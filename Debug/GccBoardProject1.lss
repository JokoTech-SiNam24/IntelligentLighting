
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00802000  00003b66  00003bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000305  0080209e  0080209e  00003c98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  00003d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000136f2  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000055ad  00000000  00000000  00017a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a483  00000000  00000000  0001d037  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000170c  00000000  00000000  000274bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003ac60  00000000  00000000  00028bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a668  00000000  00000000  00063828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  0006de90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d0f7  00000000  00000000  0006e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c2       	rjmp	.+1206   	; 0x4e4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c2       	rjmp	.+1202   	; 0x4e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__vector_14>
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c2       	rjmp	.+1146   	; 0x4e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c2       	rjmp	.+1106   	; 0x4e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c2       	rjmp	.+1102   	; 0x4e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_39>
      a0:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_40>
      a4:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_41>
      a8:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_42>
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c2       	rjmp	.+1046   	; 0x4e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c2       	rjmp	.+1042   	; 0x4e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c2       	rjmp	.+1034   	; 0x4e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c2       	rjmp	.+1030   	; 0x4e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff c1       	rjmp	.+1022   	; 0x4e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fd c1       	rjmp	.+1018   	; 0x4e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fb c1       	rjmp	.+1014   	; 0x4e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f9 c1       	rjmp	.+1010   	; 0x4e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f7 c1       	rjmp	.+1006   	; 0x4e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f5 c1       	rjmp	.+1002   	; 0x4e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f3 c1       	rjmp	.+998    	; 0x4e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f1 c1       	rjmp	.+994    	; 0x4e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	ef c1       	rjmp	.+990    	; 0x4e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	ed c1       	rjmp	.+986    	; 0x4e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	eb c1       	rjmp	.+982    	; 0x4e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e9 c1       	rjmp	.+978    	; 0x4e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	e7 c1       	rjmp	.+974    	; 0x4e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	e5 c1       	rjmp	.+970    	; 0x4e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d3 c7       	rjmp	.+4006   	; 0x10c4 <__vector_71>
     11e:	00 00       	nop
     120:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_72>
     124:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__vector_73>
     128:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_74>
     12c:	db c1       	rjmp	.+950    	; 0x4e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d9 c1       	rjmp	.+946    	; 0x4e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d7 c1       	rjmp	.+942    	; 0x4e4 <__bad_interrupt>
     136:	00 00       	nop
     138:	d5 c1       	rjmp	.+938    	; 0x4e4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d3 c1       	rjmp	.+934    	; 0x4e4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d1 c1       	rjmp	.+930    	; 0x4e4 <__bad_interrupt>
     142:	00 00       	nop
     144:	cf c1       	rjmp	.+926    	; 0x4e4 <__bad_interrupt>
     146:	00 00       	nop
     148:	cd c1       	rjmp	.+922    	; 0x4e4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	cb c1       	rjmp	.+918    	; 0x4e4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c9 c1       	rjmp	.+914    	; 0x4e4 <__bad_interrupt>
     152:	00 00       	nop
     154:	c7 c1       	rjmp	.+910    	; 0x4e4 <__bad_interrupt>
     156:	00 00       	nop
     158:	c5 c1       	rjmp	.+906    	; 0x4e4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c3 c1       	rjmp	.+902    	; 0x4e4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c1 c1       	rjmp	.+898    	; 0x4e4 <__bad_interrupt>
     162:	00 00       	nop
     164:	bf c1       	rjmp	.+894    	; 0x4e4 <__bad_interrupt>
     166:	00 00       	nop
     168:	bd c1       	rjmp	.+890    	; 0x4e4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	bb c1       	rjmp	.+886    	; 0x4e4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b9 c1       	rjmp	.+882    	; 0x4e4 <__bad_interrupt>
     172:	00 00       	nop
     174:	b7 c1       	rjmp	.+878    	; 0x4e4 <__bad_interrupt>
     176:	00 00       	nop
     178:	b5 c1       	rjmp	.+874    	; 0x4e4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b3 c1       	rjmp	.+870    	; 0x4e4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b1 c1       	rjmp	.+866    	; 0x4e4 <__bad_interrupt>
     182:	00 00       	nop
     184:	af c1       	rjmp	.+862    	; 0x4e4 <__bad_interrupt>
     186:	00 00       	nop
     188:	ad c1       	rjmp	.+858    	; 0x4e4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ab c1       	rjmp	.+854    	; 0x4e4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a9 c1       	rjmp	.+850    	; 0x4e4 <__bad_interrupt>
     192:	00 00       	nop
     194:	a7 c1       	rjmp	.+846    	; 0x4e4 <__bad_interrupt>
     196:	00 00       	nop
     198:	a5 c1       	rjmp	.+842    	; 0x4e4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a3 c1       	rjmp	.+838    	; 0x4e4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9f c1       	rjmp	.+830    	; 0x4e4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9d c1       	rjmp	.+826    	; 0x4e4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9b c1       	rjmp	.+822    	; 0x4e4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c1       	rjmp	.+818    	; 0x4e4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	97 c1       	rjmp	.+814    	; 0x4e4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	95 c1       	rjmp	.+810    	; 0x4e4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	93 c1       	rjmp	.+806    	; 0x4e4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	91 c1       	rjmp	.+802    	; 0x4e4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8f c1       	rjmp	.+798    	; 0x4e4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8d c1       	rjmp	.+794    	; 0x4e4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8b c1       	rjmp	.+790    	; 0x4e4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	89 c1       	rjmp	.+786    	; 0x4e4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	87 c1       	rjmp	.+782    	; 0x4e4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	85 c1       	rjmp	.+778    	; 0x4e4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	83 c1       	rjmp	.+774    	; 0x4e4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	81 c1       	rjmp	.+770    	; 0x4e4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7f c1       	rjmp	.+766    	; 0x4e4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7d c1       	rjmp	.+762    	; 0x4e4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7b c1       	rjmp	.+758    	; 0x4e4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	79 c1       	rjmp	.+754    	; 0x4e4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	77 c1       	rjmp	.+750    	; 0x4e4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	75 c1       	rjmp	.+746    	; 0x4e4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ac 17       	cp	r26, r28
     1fe:	ac 17       	cp	r26, r28
     200:	ac 17       	cp	r26, r28
     202:	e3 17       	cp	r30, r19
     204:	d3 17       	cp	r29, r19
     206:	e1 17       	cp	r30, r17
     208:	ac 17       	cp	r26, r28
     20a:	ac 17       	cp	r26, r28
     20c:	e3 17       	cp	r30, r19
     20e:	d3 17       	cp	r29, r19

00000210 <__trampolines_end>:
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 00       	nop
     216:	00 20       	and	r0, r0
     218:	20 20       	and	r2, r0
     21a:	20 20       	and	r2, r0
     21c:	00 20       	and	r0, r0
     21e:	50 50       	subi	r21, 0x00	; 0
     220:	50 00       	.word	0x0050	; ????
     222:	00 00       	nop
     224:	00 50       	subi	r16, 0x00	; 0
     226:	50 f8       	bld	r5, 0
     228:	50 f8       	bld	r5, 0
     22a:	50 50       	subi	r21, 0x00	; 0
     22c:	20 78       	andi	r18, 0x80	; 128
     22e:	a0 70       	andi	r26, 0x00	; 0
     230:	28 f0       	brcs	.+10     	; 0x23c <__trampolines_end+0x2c>
     232:	20 c0       	rjmp	.+64     	; 0x274 <__trampolines_end+0x64>
     234:	c8 10       	cpse	r12, r8
     236:	20 40       	sbci	r18, 0x00	; 0
     238:	98 18       	sub	r9, r8
     23a:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1cfd>
     23e:	a8 90       	.word	0x90a8	; ????
     240:	68 60       	ori	r22, 0x08	; 8
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	00 00       	nop
     246:	00 00       	nop
     248:	10 20       	and	r1, r0
     24a:	40 40       	sbci	r20, 0x00	; 0
     24c:	40 20       	and	r4, r0
     24e:	10 40       	sbci	r17, 0x00	; 0
     250:	20 10       	cpse	r2, r0
     252:	10 10       	cpse	r1, r0
     254:	20 40       	sbci	r18, 0x00	; 0
     256:	00 50       	subi	r16, 0x00	; 0
     258:	20 f8       	bld	r2, 0
     25a:	20 50       	subi	r18, 0x00	; 0
     25c:	00 00       	nop
     25e:	20 20       	and	r2, r0
     260:	f8 20       	and	r15, r8
     262:	20 00       	.word	0x0020	; ????
     264:	00 00       	nop
     266:	00 00       	nop
     268:	60 20       	and	r6, r0
     26a:	40 00       	.word	0x0040	; ????
     26c:	00 00       	nop
     26e:	f8 00       	.word	0x00f8	; ????
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 60       	ori	r16, 0x00	; 0
     278:	60 00       	.word	0x0060	; ????
     27a:	08 10       	cpse	r0, r8
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 00       	.word	0x0080	; ????
     280:	70 88       	ldd	r7, Z+16	; 0x10
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	c8 88       	ldd	r12, Y+16	; 0x10
     286:	70 20       	and	r7, r0
     288:	60 20       	and	r6, r0
     28a:	20 20       	and	r2, r0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	70 88       	ldd	r7, Z+16	; 0x10
     290:	08 10       	cpse	r0, r8
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	f8 f8       	.word	0xf8f8	; ????
     296:	10 20       	and	r1, r0
     298:	10 08       	sbc	r1, r0
     29a:	88 70       	andi	r24, 0x08	; 8
     29c:	10 30       	cpi	r17, 0x00	; 0
     29e:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     2a2:	10 f8       	bld	r1, 0
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <__trampolines_end+0xb6>
     2a6:	08 08       	sbc	r0, r8
     2a8:	88 70       	andi	r24, 0x08	; 8
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	80 f0       	brcs	.+32     	; 0x2ce <__trampolines_end+0xbe>
     2ae:	88 88       	ldd	r8, Y+16	; 0x10
     2b0:	70 f8       	bld	r7, 0
     2b2:	08 10       	cpse	r0, r8
     2b4:	20 40       	sbci	r18, 0x00	; 0
     2b6:	40 40       	sbci	r20, 0x00	; 0
     2b8:	70 88       	ldd	r7, Z+16	; 0x10
     2ba:	88 70       	andi	r24, 0x08	; 8
     2bc:	88 88       	ldd	r8, Y+16	; 0x10
     2be:	70 70       	andi	r23, 0x00	; 0
     2c0:	88 88       	ldd	r8, Y+16	; 0x10
     2c2:	78 08       	sbc	r7, r8
     2c4:	10 60       	ori	r17, 0x00	; 0
     2c6:	00 60       	ori	r16, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	00 00       	nop
     2ce:	60 60       	ori	r22, 0x00	; 0
     2d0:	00 60       	ori	r16, 0x00	; 0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	08 10       	cpse	r0, r8
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	20 10       	cpse	r2, r0
     2da:	08 00       	.word	0x0008	; ????
     2dc:	00 f8       	bld	r0, 0
     2de:	00 f8       	bld	r0, 0
     2e0:	00 00       	nop
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	20 10       	cpse	r2, r0
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 70       	andi	r24, 0x00	; 0
     2ea:	88 08       	sbc	r8, r8
     2ec:	10 20       	and	r1, r0
     2ee:	00 20       	and	r0, r0
     2f0:	70 88       	ldd	r7, Z+16	; 0x10
     2f2:	08 68       	ori	r16, 0x88	; 136
     2f4:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f6:	70 70       	andi	r23, 0x00	; 0
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	88 f8       	.word	0xf888	; ????
     2fc:	88 88       	ldd	r8, Y+16	; 0x10
     2fe:	f0 88       	ldd	r15, Z+16	; 0x10
     300:	88 f0       	brcs	.+34     	; 0x324 <__trampolines_end+0x114>
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	f0 70       	andi	r31, 0x00	; 0
     306:	88 80       	ld	r8, Y
     308:	80 80       	ld	r8, Z
     30a:	88 70       	andi	r24, 0x08	; 8
     30c:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x64e5>
     310:	88 90       	.word	0x9088	; ????
     312:	e0 f8       	bld	r14, 0
     314:	80 80       	ld	r8, Z
     316:	f0 80       	ld	r15, Z
     318:	80 f8       	bld	r8, 0
     31a:	f8 80       	ld	r15, Y
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	80 80       	ld	r8, Z
     320:	80 70       	andi	r24, 0x00	; 0
     322:	88 80       	ld	r8, Y
     324:	80 98       	cbi	0x10, 0	; 16
     326:	88 70       	andi	r24, 0x08	; 8
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 f8       	.word	0xf888	; ????
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	88 70       	andi	r24, 0x08	; 8
     330:	20 20       	and	r2, r0
     332:	20 20       	and	r2, r0
     334:	20 70       	andi	r18, 0x00	; 0
     336:	38 10       	cpse	r3, r8
     338:	10 10       	cpse	r1, r0
     33a:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x64bd>
     33e:	90 a0       	ldd	r9, Z+32	; 0x20
     340:	c0 a0       	ldd	r12, Z+32	; 0x20
     342:	90 88       	ldd	r9, Z+16	; 0x10
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	80 80       	ld	r8, Z
     34a:	f8 88       	ldd	r15, Y+16	; 0x10
     34c:	d8 a8       	ldd	r13, Y+48	; 0x30
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	88 88       	ldd	r8, Y+16	; 0x10
     354:	c8 a8       	ldd	r12, Y+48	; 0x30
     356:	98 88       	ldd	r9, Y+16	; 0x10
     358:	88 70       	andi	r24, 0x08	; 8
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 88       	ldd	r8, Y+16	; 0x10
     35e:	88 70       	andi	r24, 0x08	; 8
     360:	f0 88       	ldd	r15, Z+16	; 0x10
     362:	88 f0       	brcs	.+34     	; 0x386 <__trampolines_end+0x176>
     364:	80 80       	ld	r8, Z
     366:	80 70       	andi	r24, 0x00	; 0
     368:	88 88       	ldd	r8, Y+16	; 0x10
     36a:	88 a8       	ldd	r8, Y+48	; 0x30
     36c:	90 68       	ori	r25, 0x80	; 128
     36e:	f0 88       	ldd	r15, Z+16	; 0x10
     370:	88 f0       	brcs	.+34     	; 0x394 <__trampolines_end+0x184>
     372:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x54e5>
     376:	80 80       	ld	r8, Z
     378:	70 08       	sbc	r7, r0
     37a:	08 f0       	brcs	.+2      	; 0x37e <__trampolines_end+0x16e>
     37c:	f8 20       	and	r15, r8
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 88       	ldd	r2, Z+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 88       	ldd	r8, Y+16	; 0x10
     388:	88 70       	andi	r24, 0x08	; 8
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 88       	ldd	r8, Y+16	; 0x10
     38e:	88 50       	subi	r24, 0x08	; 8
     390:	20 88       	ldd	r2, Z+16	; 0x10
     392:	88 88       	ldd	r8, Y+16	; 0x10
     394:	a8 a8       	ldd	r10, Y+48	; 0x30
     396:	d8 88       	ldd	r13, Y+16	; 0x10
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	50 20       	and	r5, r0
     39c:	50 88       	ldd	r5, Z+16	; 0x10
     39e:	88 88       	ldd	r8, Y+16	; 0x10
     3a0:	88 50       	subi	r24, 0x08	; 8
     3a2:	20 20       	and	r2, r0
     3a4:	20 20       	and	r2, r0
     3a6:	f8 08       	sbc	r15, r8
     3a8:	10 20       	and	r1, r0
     3aa:	40 80       	ld	r4, Z
     3ac:	f8 38       	cpi	r31, 0x88	; 136
     3ae:	20 20       	and	r2, r0
     3b0:	20 20       	and	r2, r0
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	00 80       	ld	r0, Z
     3b6:	40 20       	and	r4, r0
     3b8:	10 08       	sbc	r1, r0
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	20 20       	and	r2, r0
     3be:	20 20       	and	r2, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	20 50       	subi	r18, 0x00	; 0
     3c4:	88 00       	.word	0x0088	; ????
	...
     3ce:	00 f8       	bld	r0, 0
     3d0:	40 20       	and	r4, r0
     3d2:	10 00       	.word	0x0010	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	00 70       	andi	r16, 0x00	; 0
     3da:	08 78       	andi	r16, 0x88	; 136
     3dc:	88 78       	andi	r24, 0x88	; 136
     3de:	80 80       	ld	r8, Z
     3e0:	b0 c8       	rjmp	.-3744   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	f0 00       	.word	0x00f0	; ????
     3e6:	00 70       	andi	r16, 0x00	; 0
     3e8:	80 80       	ld	r8, Z
     3ea:	88 70       	andi	r24, 0x08	; 8
     3ec:	08 08       	sbc	r0, r8
     3ee:	68 98       	cbi	0x0d, 0	; 13
     3f0:	88 88       	ldd	r8, Y+16	; 0x10
     3f2:	78 00       	.word	0x0078	; ????
     3f4:	00 70       	andi	r16, 0x00	; 0
     3f6:	88 f8       	.word	0xf888	; ????
     3f8:	80 70       	andi	r24, 0x00	; 0
     3fa:	30 48       	sbci	r19, 0x80	; 128
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	40 00       	.word	0x0040	; ????
     402:	00 78       	andi	r16, 0x80	; 128
     404:	88 78       	andi	r24, 0x88	; 136
     406:	08 30       	cpi	r16, 0x08	; 8
     408:	80 80       	ld	r8, Z
     40a:	b0 c8       	rjmp	.-3744   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     40c:	88 88       	ldd	r8, Y+16	; 0x10
     40e:	88 20       	and	r8, r8
     410:	00 60       	ori	r16, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 70       	andi	r18, 0x00	; 0
     416:	10 00       	.word	0x0010	; ????
     418:	30 10       	cpse	r3, r0
     41a:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1cbd>
     41e:	40 48       	sbci	r20, 0x80	; 128
     420:	50 60       	ori	r21, 0x00	; 0
     422:	50 48       	sbci	r21, 0x80	; 128
     424:	60 20       	and	r6, r0
     426:	20 20       	and	r2, r0
     428:	20 20       	and	r2, r0
     42a:	70 00       	.word	0x0070	; ????
     42c:	00 d0       	rcall	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	a8 a8       	ldd	r10, Y+48	; 0x30
     430:	88 88       	ldd	r8, Y+16	; 0x10
     432:	00 00       	nop
     434:	b0 c8       	rjmp	.-3744   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     436:	88 88       	ldd	r8, Y+16	; 0x10
     438:	88 00       	.word	0x0088	; ????
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	88 88       	ldd	r8, Y+16	; 0x10
     43e:	88 70       	andi	r24, 0x08	; 8
     440:	00 00       	nop
     442:	f0 88       	ldd	r15, Z+16	; 0x10
     444:	f0 80       	ld	r15, Z
     446:	80 00       	.word	0x0080	; ????
     448:	00 68       	ori	r16, 0x80	; 128
     44a:	98 78       	andi	r25, 0x88	; 136
     44c:	08 08       	sbc	r0, r8
     44e:	00 00       	nop
     450:	b0 c8       	rjmp	.-3744   	; 0xfffff5b2 <__eeprom_end+0xff7ef5b2>
     452:	80 80       	ld	r8, Z
     454:	80 00       	.word	0x0080	; ????
     456:	00 70       	andi	r16, 0x00	; 0
     458:	80 70       	andi	r24, 0x00	; 0
     45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e0 40       	sbci	r30, 0x00	; 0
     460:	40 48       	sbci	r20, 0x80	; 128
     462:	30 00       	.word	0x0030	; ????
     464:	00 88       	ldd	r0, Z+16	; 0x10
     466:	88 88       	ldd	r8, Y+16	; 0x10
     468:	98 68       	ori	r25, 0x88	; 136
     46a:	00 00       	nop
     46c:	88 88       	ldd	r8, Y+16	; 0x10
     46e:	88 50       	subi	r24, 0x08	; 8
     470:	20 00       	.word	0x0020	; ????
     472:	00 88       	ldd	r0, Z+16	; 0x10
     474:	88 a8       	ldd	r8, Y+48	; 0x30
     476:	a8 50       	subi	r26, 0x08	; 8
     478:	00 00       	nop
     47a:	88 50       	subi	r24, 0x08	; 8
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	88 00       	.word	0x0088	; ????
     480:	00 88       	ldd	r0, Z+16	; 0x10
     482:	88 78       	andi	r24, 0x88	; 136
     484:	08 70       	andi	r16, 0x08	; 8
     486:	00 00       	nop
     488:	f8 10       	cpse	r15, r8
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	f8 10       	cpse	r15, r8
     48e:	20 20       	and	r2, r0
     490:	40 20       	and	r4, r0
     492:	20 10       	cpse	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 20       	and	r2, r0
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	10 20       	and	r1, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df e5       	ldi	r29, 0x5F	; 95
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	10 e2       	ldi	r17, 0x20	; 32
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
     4b8:	e6 e6       	ldi	r30, 0x66	; 102
     4ba:	fb e3       	ldi	r31, 0x3B	; 59
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	ae 39       	cpi	r26, 0x9E	; 158
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	23 e2       	ldi	r18, 0x23	; 35
     4ce:	ae e9       	ldi	r26, 0x9E	; 158
     4d0:	b0 e2       	ldi	r27, 0x20	; 32
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a3 3a       	cpi	r26, 0xA3	; 163
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 24 19 	call	0x3248	; 0x3248 <main>
     4e0:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e8:	61 50       	subi	r22, 0x01	; 1
     4ea:	71 09       	sbc	r23, r1
     4ec:	81 09       	sbc	r24, r1
     4ee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	81 05       	cpc	r24, r1
     4f6:	91 05       	cpc	r25, r1
     4f8:	b9 f7       	brne	.-18     	; 0x4e8 <__portable_avr_delay_cycles+0x2>
     4fa:	08 95       	ret

000004fc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	16 e0       	ldi	r17, 0x06	; 6
     518:	68 94       	set
     51a:	ff 24       	eor	r15, r15
     51c:	f3 f8       	bld	r15, 3
     51e:	f8 01       	movw	r30, r16
     520:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     522:	64 e0       	ldi	r22, 0x04	; 4
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	dd df       	rcall	.-70     	; 0x4e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52c:	f8 01       	movw	r30, r16
     52e:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	d6 df       	rcall	.-84     	; 0x4e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     53a:	0f 2e       	mov	r0, r31
     53c:	fb e2       	ldi	r31, 0x2B	; 43
     53e:	bf 2e       	mov	r11, r31
     540:	f0 2d       	mov	r31, r0
     542:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	99 e0       	ldi	r25, 0x09	; 9
     548:	43 d4       	rcall	.+2182   	; 0xdd0 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
     550:	00 e4       	ldi	r16, 0x40	; 64
     552:	12 e4       	ldi	r17, 0x42	; 66
     554:	2f e0       	ldi	r18, 0x0F	; 15
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	43 e0       	ldi	r20, 0x03	; 3
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	80 ea       	ldi	r24, 0xA0	; 160
     562:	99 e0       	ldi	r25, 0x09	; 9
     564:	64 d4       	rcall	.+2248   	; 0xe2e <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     566:	00 e6       	ldi	r16, 0x60	; 96
     568:	16 e0       	ldi	r17, 0x06	; 6
     56a:	ff 24       	eor	r15, r15
     56c:	f3 94       	inc	r15
     56e:	f8 01       	movw	r30, r16
     570:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     572:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	99 e0       	ldi	r25, 0x09	; 9
     57e:	71 d4       	rcall	.+2274   	; 0xe62 <usart_spi_select_device>
     580:	f8 01       	movw	r30, r16
     582:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     584:	e0 ea       	ldi	r30, 0xA0	; 160
     586:	f9 e0       	ldi	r31, 0x09	; 9
     588:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     58a:	85 ff       	sbrs	r24, 5
     58c:	fd cf       	rjmp	.-6      	; 0x588 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     594:	e0 ea       	ldi	r30, 0xA0	; 160
     596:	f9 e0       	ldi	r31, 0x09	; 9
     598:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     59a:	86 ff       	sbrs	r24, 6
     59c:	fd cf       	rjmp	.-6      	; 0x598 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     59e:	e0 ea       	ldi	r30, 0xA0	; 160
     5a0:	f9 e0       	ldi	r31, 0x09	; 9
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5a6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	80 ea       	ldi	r24, 0xA0	; 160
     5b0:	99 e0       	ldi	r25, 0x09	; 9
     5b2:	6d d4       	rcall	.+2266   	; 0xe8e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5b4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	be 01       	movw	r22, r28
     5ba:	6f 5f       	subi	r22, 0xFF	; 255
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	80 ea       	ldi	r24, 0xA0	; 160
     5c0:	99 e0       	ldi	r25, 0x09	; 9
     5c2:	4f d4       	rcall	.+2206   	; 0xe62 <usart_spi_select_device>
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5ca:	e0 ea       	ldi	r30, 0xA0	; 160
     5cc:	f9 e0       	ldi	r31, 0x09	; 9
     5ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5d0:	85 ff       	sbrs	r24, 5
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5d4:	86 ea       	ldi	r24, 0xA6	; 166
     5d6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5e0:	86 ff       	sbrs	r24, 6
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ea:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ec:	80 81       	ld	r24, Z
     5ee:	be 01       	movw	r22, r28
     5f0:	6f 5f       	subi	r22, 0xFF	; 255
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f8:	4a d4       	rcall	.+2196   	; 0xe8e <usart_spi_deselect_device>
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5fc:	89 83       	std	Y+1, r24	; 0x01
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 ea       	ldi	r24, 0xA0	; 160
     606:	99 e0       	ldi	r25, 0x09	; 9
     608:	2c d4       	rcall	.+2136   	; 0xe62 <usart_spi_select_device>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     610:	e0 ea       	ldi	r30, 0xA0	; 160
     612:	f9 e0       	ldi	r31, 0x09	; 9
     614:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     616:	85 ff       	sbrs	r24, 5
     618:	fd cf       	rjmp	.-6      	; 0x614 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     61a:	88 ec       	ldi	r24, 0xC8	; 200
     61c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     620:	e0 ea       	ldi	r30, 0xA0	; 160
     622:	f9 e0       	ldi	r31, 0x09	; 9
     624:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     626:	86 ff       	sbrs	r24, 6
     628:	fd cf       	rjmp	.-6      	; 0x624 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     62a:	e0 ea       	ldi	r30, 0xA0	; 160
     62c:	f9 e0       	ldi	r31, 0x09	; 9
     62e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     630:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     632:	80 81       	ld	r24, Z
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	80 ea       	ldi	r24, 0xA0	; 160
     63c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63e:	27 d4       	rcall	.+2126   	; 0xe8e <usart_spi_deselect_device>
     640:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	be 01       	movw	r22, r28
     646:	6f 5f       	subi	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	80 ea       	ldi	r24, 0xA0	; 160
     64c:	99 e0       	ldi	r25, 0x09	; 9
     64e:	09 d4       	rcall	.+2066   	; 0xe62 <usart_spi_select_device>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     656:	e0 ea       	ldi	r30, 0xA0	; 160
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65c:	85 ff       	sbrs	r24, 5
     65e:	fd cf       	rjmp	.-6      	; 0x65a <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     660:	82 ea       	ldi	r24, 0xA2	; 162
     662:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     666:	e0 ea       	ldi	r30, 0xA0	; 160
     668:	f9 e0       	ldi	r31, 0x09	; 9
     66a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	fd cf       	rjmp	.-6      	; 0x66a <st7565r_init+0x16e>
     670:	e0 ea       	ldi	r30, 0xA0	; 160
     672:	f9 e0       	ldi	r31, 0x09	; 9
     674:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	80 81       	ld	r24, Z
     67a:	be 01       	movw	r22, r28
     67c:	6f 5f       	subi	r22, 0xFF	; 255
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	80 ea       	ldi	r24, 0xA0	; 160
     682:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     684:	04 d4       	rcall	.+2056   	; 0xe8e <usart_spi_deselect_device>
     686:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     688:	89 83       	std	Y+1, r24	; 0x01
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	e6 d3       	rcall	.+1996   	; 0xe62 <usart_spi_select_device>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69c:	e0 ea       	ldi	r30, 0xA0	; 160
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a2:	85 ff       	sbrs	r24, 5
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a6:	8f e2       	ldi	r24, 0x2F	; 47
     6a8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ac:	e0 ea       	ldi	r30, 0xA0	; 160
     6ae:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <st7565r_init+0x1b4>
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f9 e0       	ldi	r31, 0x09	; 9
     6ba:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6bc:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6be:	80 81       	ld	r24, Z
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	80 ea       	ldi	r24, 0xA0	; 160
     6c8:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ca:	e1 d3       	rcall	.+1986   	; 0xe8e <usart_spi_deselect_device>
     6cc:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	99 e0       	ldi	r25, 0x09	; 9
     6da:	c3 d3       	rcall	.+1926   	; 0xe62 <usart_spi_select_device>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e2:	e0 ea       	ldi	r30, 0xA0	; 160
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e8:	85 ff       	sbrs	r24, 5
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ec:	88 ef       	ldi	r24, 0xF8	; 248
     6ee:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f2:	e0 ea       	ldi	r30, 0xA0	; 160
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <st7565r_init+0x1fa>
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     700:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     702:	81 83       	std	Z+1, r24	; 0x01
     704:	80 81       	ld	r24, Z
     706:	be 01       	movw	r22, r28
     708:	6f 5f       	subi	r22, 0xFF	; 255
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	80 ea       	ldi	r24, 0xA0	; 160
     70e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     710:	be d3       	rcall	.+1916   	; 0xe8e <usart_spi_deselect_device>
     712:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	80 ea       	ldi	r24, 0xA0	; 160
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	a0 d3       	rcall	.+1856   	; 0xe62 <usart_spi_select_device>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     728:	e0 ea       	ldi	r30, 0xA0	; 160
     72a:	f9 e0       	ldi	r31, 0x09	; 9
     72c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     72e:	85 ff       	sbrs	r24, 5
     730:	fd cf       	rjmp	.-6      	; 0x72c <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     732:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     736:	e0 ea       	ldi	r30, 0xA0	; 160
     738:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     73a:	81 81       	ldd	r24, Z+1	; 0x01
     73c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     73e:	fd cf       	rjmp	.-6      	; 0x73a <st7565r_init+0x23e>
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     744:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     746:	81 83       	std	Z+1, r24	; 0x01
     748:	80 81       	ld	r24, Z
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     754:	9c d3       	rcall	.+1848   	; 0xe8e <usart_spi_deselect_device>
     756:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	80 ea       	ldi	r24, 0xA0	; 160
     762:	99 e0       	ldi	r25, 0x09	; 9
     764:	7e d3       	rcall	.+1788   	; 0xe62 <usart_spi_select_device>
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     76c:	e0 ea       	ldi	r30, 0xA0	; 160
     76e:	f9 e0       	ldi	r31, 0x09	; 9
     770:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     772:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     774:	fd cf       	rjmp	.-6      	; 0x770 <st7565r_init+0x274>
     776:	81 e2       	ldi	r24, 0x21	; 33
     778:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     780:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     782:	86 ff       	sbrs	r24, 6
     784:	fd cf       	rjmp	.-6      	; 0x780 <st7565r_init+0x284>
     786:	e0 ea       	ldi	r30, 0xA0	; 160
     788:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     78a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	80 81       	ld	r24, Z
     790:	be 01       	movw	r22, r28
     792:	6f 5f       	subi	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     79a:	79 d3       	rcall	.+1778   	; 0xe8e <usart_spi_deselect_device>
     79c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	80 ea       	ldi	r24, 0xA0	; 160
     7a8:	99 e0       	ldi	r25, 0x09	; 9
     7aa:	5b d3       	rcall	.+1718   	; 0xe62 <usart_spi_select_device>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7b2:	e0 ea       	ldi	r30, 0xA0	; 160
     7b4:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <st7565r_init+0x2ba>
     7bc:	81 e8       	ldi	r24, 0x81	; 129
     7be:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c8:	86 ff       	sbrs	r24, 6
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <st7565r_init+0x2ca>
     7cc:	e0 ea       	ldi	r30, 0xA0	; 160
     7ce:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7d0:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7d2:	81 83       	std	Z+1, r24	; 0x01
     7d4:	80 81       	ld	r24, Z
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	80 ea       	ldi	r24, 0xA0	; 160
     7de:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7e0:	56 d3       	rcall	.+1708   	; 0xe8e <usart_spi_deselect_device>
     7e2:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	be 01       	movw	r22, r28
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	99 e0       	ldi	r25, 0x09	; 9
     7f0:	38 d3       	rcall	.+1648   	; 0xe62 <usart_spi_select_device>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f8:	e0 ea       	ldi	r30, 0xA0	; 160
     7fa:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7fc:	81 81       	ldd	r24, Z+1	; 0x01
     7fe:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     800:	fd cf       	rjmp	.-6      	; 0x7fc <st7565r_init+0x300>
     802:	81 e2       	ldi	r24, 0x21	; 33
     804:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     808:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     80e:	86 ff       	sbrs	r24, 6
     810:	fd cf       	rjmp	.-6      	; 0x80c <st7565r_init+0x310>
     812:	e0 ea       	ldi	r30, 0xA0	; 160
     814:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     816:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     818:	81 83       	std	Z+1, r24	; 0x01
     81a:	80 81       	ld	r24, Z
     81c:	be 01       	movw	r22, r28
     81e:	6f 5f       	subi	r22, 0xFF	; 255
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	80 ea       	ldi	r24, 0xA0	; 160
     824:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     826:	33 d3       	rcall	.+1638   	; 0xe8e <usart_spi_deselect_device>
     828:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	99 e0       	ldi	r25, 0x09	; 9
     836:	15 d3       	rcall	.+1578   	; 0xe62 <usart_spi_select_device>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     83e:	e0 ea       	ldi	r30, 0xA0	; 160
     840:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     842:	81 81       	ldd	r24, Z+1	; 0x01
     844:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     846:	fd cf       	rjmp	.-6      	; 0x842 <st7565r_init+0x346>
     848:	8f ea       	ldi	r24, 0xAF	; 175
     84a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     852:	81 81       	ldd	r24, Z+1	; 0x01
     854:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     856:	fd cf       	rjmp	.-6      	; 0x852 <st7565r_init+0x356>
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     85e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     860:	80 81       	ld	r24, Z
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	80 ea       	ldi	r24, 0xA0	; 160
     86a:	99 e0       	ldi	r25, 0x09	; 9
     86c:	10 d3       	rcall	.+1568   	; 0xe8e <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	08 95       	ret

00000884 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     88a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     88e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     892:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     896:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     89a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     89e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     8a2:	08 95       	ret

000008a4 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	1f 92       	push	r1
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8ae:	9f b7       	in	r25, 0x3f	; 63
     8b0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8b2:	f8 94       	cli
	return flags;
     8b4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8b6:	e8 2f       	mov	r30, r24
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e0 59       	subi	r30, 0x90	; 144
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	60 95       	com	r22
     8c0:	80 81       	ld	r24, Z
     8c2:	68 23       	and	r22, r24
     8c4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8c6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	1f 92       	push	r1
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8da:	9f b7       	in	r25, 0x3f	; 63
     8dc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8de:	f8 94       	cli
	return flags;
     8e0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     8e2:	e8 2f       	mov	r30, r24
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	e0 59       	subi	r30, 0x90	; 144
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	80 81       	ld	r24, Z
     8ec:	68 2b       	or	r22, r24
     8ee:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8f0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	1f 92       	push	r1
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	08 2f       	mov	r16, r24
     90c:	f6 2e       	mov	r15, r22
     90e:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     910:	1a d1       	rcall	.+564    	; 0xb46 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     912:	0f 70       	andi	r16, 0x0F	; 15
     914:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     916:	8b e2       	ldi	r24, 0x2B	; 43
     918:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     91a:	be 01       	movw	r22, r28
     91c:	6f 5f       	subi	r22, 0xFF	; 255
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	80 ea       	ldi	r24, 0xA0	; 160
     922:	99 e0       	ldi	r25, 0x09	; 9
     924:	9e d2       	rcall	.+1340   	; 0xe62 <usart_spi_select_device>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     92c:	e0 ea       	ldi	r30, 0xA0	; 160
     92e:	f9 e0       	ldi	r31, 0x09	; 9
     930:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     932:	95 ff       	sbrs	r25, 5
     934:	fd cf       	rjmp	.-6      	; 0x930 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     936:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     93a:	e0 ea       	ldi	r30, 0xA0	; 160
     93c:	f9 e0       	ldi	r31, 0x09	; 9
     93e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     940:	86 ff       	sbrs	r24, 6
     942:	fd cf       	rjmp	.-6      	; 0x93e <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     944:	e0 ea       	ldi	r30, 0xA0	; 160
     946:	f9 e0       	ldi	r31, 0x09	; 9
     948:	80 e4       	ldi	r24, 0x40	; 64
     94a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     94c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	80 ea       	ldi	r24, 0xA0	; 160
     956:	99 e0       	ldi	r25, 0x09	; 9
     958:	9a d2       	rcall	.+1332   	; 0xe8e <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     95a:	0f 2d       	mov	r16, r15
     95c:	0f 77       	andi	r16, 0x7F	; 127
     95e:	02 95       	swap	r16
     960:	0f 70       	andi	r16, 0x0F	; 15
     962:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     964:	8b e2       	ldi	r24, 0x2B	; 43
     966:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	80 ea       	ldi	r24, 0xA0	; 160
     970:	99 e0       	ldi	r25, 0x09	; 9
     972:	77 d2       	rcall	.+1262   	; 0xe62 <usart_spi_select_device>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     97a:	e0 ea       	ldi	r30, 0xA0	; 160
     97c:	f9 e0       	ldi	r31, 0x09	; 9
     97e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     980:	85 ff       	sbrs	r24, 5
     982:	fd cf       	rjmp	.-6      	; 0x97e <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     984:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     988:	e0 ea       	ldi	r30, 0xA0	; 160
     98a:	f9 e0       	ldi	r31, 0x09	; 9
     98c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     98e:	86 ff       	sbrs	r24, 6
     990:	fd cf       	rjmp	.-6      	; 0x98c <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     992:	e0 ea       	ldi	r30, 0xA0	; 160
     994:	f9 e0       	ldi	r31, 0x09	; 9
     996:	80 e4       	ldi	r24, 0x40	; 64
     998:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     99a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     99c:	be 01       	movw	r22, r28
     99e:	6f 5f       	subi	r22, 0xFF	; 255
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	80 ea       	ldi	r24, 0xA0	; 160
     9a4:	99 e0       	ldi	r25, 0x09	; 9
     9a6:	73 d2       	rcall	.+1254   	; 0xe8e <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     9a8:	0f 2d       	mov	r16, r15
     9aa:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9ac:	8b e2       	ldi	r24, 0x2B	; 43
     9ae:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9b0:	be 01       	movw	r22, r28
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	80 ea       	ldi	r24, 0xA0	; 160
     9b8:	99 e0       	ldi	r25, 0x09	; 9
     9ba:	53 d2       	rcall	.+1190   	; 0xe62 <usart_spi_select_device>
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9c2:	e0 ea       	ldi	r30, 0xA0	; 160
     9c4:	f9 e0       	ldi	r31, 0x09	; 9
     9c6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9c8:	85 ff       	sbrs	r24, 5
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9cc:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9d0:	e0 ea       	ldi	r30, 0xA0	; 160
     9d2:	f9 e0       	ldi	r31, 0x09	; 9
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9d6:	86 ff       	sbrs	r24, 6
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9da:	e0 ea       	ldi	r30, 0xA0	; 160
     9dc:	f9 e0       	ldi	r31, 0x09	; 9
     9de:	80 e4       	ldi	r24, 0x40	; 64
     9e0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9e2:	80 81       	ld	r24, Z
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	4f d2       	rcall	.+1182   	; 0xe8e <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9f0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	be 01       	movw	r22, r28
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	80 ea       	ldi	r24, 0xA0	; 160
     9fc:	99 e0       	ldi	r25, 0x09	; 9
     9fe:	31 d2       	rcall	.+1122   	; 0xe62 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a06:	e0 ea       	ldi	r30, 0xA0	; 160
     a08:	f9 e0       	ldi	r31, 0x09	; 9
     a0a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a0c:	85 ff       	sbrs	r24, 5
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a10:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a14:	e0 ea       	ldi	r30, 0xA0	; 160
     a16:	f9 e0       	ldi	r31, 0x09	; 9
     a18:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a1a:	86 ff       	sbrs	r24, 6
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a1e:	e0 ea       	ldi	r30, 0xA0	; 160
     a20:	f9 e0       	ldi	r31, 0x09	; 9
     a22:	80 e4       	ldi	r24, 0x40	; 64
     a24:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a26:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a2e:	be 01       	movw	r22, r28
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	80 ea       	ldi	r24, 0xA0	; 160
     a36:	99 e0       	ldi	r25, 0x09	; 9
     a38:	2a d2       	rcall	.+1108   	; 0xe8e <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	08 95       	ret

00000a48 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	1f 92       	push	r1
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a56:	8e e9       	ldi	r24, 0x9E	; 158
     a58:	90 e2       	ldi	r25, 0x20	; 32
     a5a:	70 d0       	rcall	.+224    	; 0xb3c <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a5c:	4f dd       	rcall	.-1378   	; 0x4fc <st7565r_init>
     a5e:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 ea       	ldi	r24, 0xA0	; 160
     a6a:	99 e0       	ldi	r25, 0x09	; 9
     a6c:	fa d1       	rcall	.+1012   	; 0xe62 <usart_spi_select_device>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     a74:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a76:	f9 e0       	ldi	r31, 0x09	; 9
     a78:	81 81       	ldd	r24, Z+1	; 0x01
     a7a:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <gfx_mono_st7565r_init+0x30>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a80:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     a84:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a86:	f9 e0       	ldi	r31, 0x09	; 9
     a88:	81 81       	ldd	r24, Z+1	; 0x01
     a8a:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <gfx_mono_st7565r_init+0x40>
     a8e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a90:	f9 e0       	ldi	r31, 0x09	; 9
     a92:	80 e4       	ldi	r24, 0x40	; 64
     a94:	81 83       	std	Z+1, r24	; 0x01
     a96:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a98:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	80 ea       	ldi	r24, 0xA0	; 160
     aa0:	99 e0       	ldi	r25, 0x09	; 9
     aa2:	f5 d1       	rcall	.+1002   	; 0xe8e <usart_spi_deselect_device>
     aa4:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     aa6:	0a c0       	rjmp	.+20     	; 0xabc <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	61 2f       	mov	r22, r17
     aac:	80 2f       	mov	r24, r16
     aae:	25 df       	rcall	.-438    	; 0x8fa <gfx_mono_st7565r_put_byte>
     ab0:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     ab2:	10 38       	cpi	r17, 0x80	; 128
     ab4:	c9 f7       	brne	.-14     	; 0xaa8 <gfx_mono_st7565r_init+0x60>
     ab6:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     ab8:	04 30       	cpi	r16, 0x04	; 4
     aba:	11 f0       	breq	.+4      	; 0xac0 <gfx_mono_st7565r_init+0x78>
     abc:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     abe:	f4 cf       	rjmp	.-24     	; 0xaa8 <gfx_mono_st7565r_init+0x60>
     ac0:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <gfx_mono_st7565r_draw_pixel>:
     acc:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     ad6:	88 23       	and	r24, r24
     ad8:	4c f1       	brlt	.+82     	; 0xb2c <gfx_mono_st7565r_draw_pixel+0x60>
     ada:	60 32       	cpi	r22, 0x20	; 32
     adc:	38 f5       	brcc	.+78     	; 0xb2c <gfx_mono_st7565r_draw_pixel+0x60>
     ade:	d4 2f       	mov	r29, r20
     ae0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ae2:	f6 2e       	mov	r15, r22
     ae4:	f6 94       	lsr	r15
     ae6:	f6 94       	lsr	r15
     ae8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	88 e0       	ldi	r24, 0x08	; 8
     aee:	f8 9e       	mul	r15, r24
     af0:	60 19       	sub	r22, r0
     af2:	71 09       	sbc	r23, r1
     af4:	11 24       	eor	r1, r1
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	8c 01       	movw	r16, r24
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <gfx_mono_st7565r_draw_pixel+0x36>
     afe:	00 0f       	add	r16, r16
     b00:	11 1f       	adc	r17, r17
     b02:	6a 95       	dec	r22
     b04:	e2 f7       	brpl	.-8      	; 0xafe <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b06:	6c 2f       	mov	r22, r28
     b08:	8f 2d       	mov	r24, r15
     b0a:	2b d0       	rcall	.+86     	; 0xb62 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     b0c:	d1 30       	cpi	r29, 0x01	; 1
     b0e:	21 f0       	breq	.+8      	; 0xb18 <gfx_mono_st7565r_draw_pixel+0x4c>
     b10:	28 f0       	brcs	.+10     	; 0xb1c <gfx_mono_st7565r_draw_pixel+0x50>
     b12:	d2 30       	cpi	r29, 0x02	; 2
     b14:	31 f0       	breq	.+12     	; 0xb22 <gfx_mono_st7565r_draw_pixel+0x56>
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     b18:	80 2b       	or	r24, r16
		break;
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     b1c:	00 95       	com	r16
     b1e:	80 23       	and	r24, r16
		break;
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     b22:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     b24:	48 2f       	mov	r20, r24
     b26:	6c 2f       	mov	r22, r28
     b28:	8f 2d       	mov	r24, r15
     b2a:	e7 de       	rcall	.-562    	; 0x8fa <gfx_mono_st7565r_put_byte>
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	08 95       	ret

00000b38 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b38:	14 c0       	rjmp	.+40     	; 0xb62 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b3a:	08 95       	ret

00000b3c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     b3c:	80 93 9e 22 	sts	0x229E, r24	; 0x80229e <fbpointer>
     b40:	90 93 9f 22 	sts	0x229F, r25	; 0x80229f <fbpointer+0x1>
     b44:	08 95       	ret

00000b46 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b46:	20 91 9e 22 	lds	r18, 0x229E	; 0x80229e <fbpointer>
     b4a:	30 91 9f 22 	lds	r19, 0x229F	; 0x80229f <fbpointer+0x1>
     b4e:	90 e8       	ldi	r25, 0x80	; 128
     b50:	89 9f       	mul	r24, r25
     b52:	20 0d       	add	r18, r0
     b54:	31 1d       	adc	r19, r1
     b56:	11 24       	eor	r1, r1
     b58:	f9 01       	movw	r30, r18
     b5a:	e6 0f       	add	r30, r22
     b5c:	f1 1d       	adc	r31, r1
     b5e:	40 83       	st	Z, r20
     b60:	08 95       	ret

00000b62 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b62:	20 91 9e 22 	lds	r18, 0x229E	; 0x80229e <fbpointer>
     b66:	30 91 9f 22 	lds	r19, 0x229F	; 0x80229f <fbpointer+0x1>
     b6a:	90 e8       	ldi	r25, 0x80	; 128
     b6c:	89 9f       	mul	r24, r25
     b6e:	20 0d       	add	r18, r0
     b70:	31 1d       	adc	r19, r1
     b72:	11 24       	eor	r1, r1
     b74:	f9 01       	movw	r30, r18
     b76:	e6 0f       	add	r30, r22
     b78:	f1 1d       	adc	r31, r1
}
     b7a:	80 81       	ld	r24, Z
     b7c:	08 95       	ret

00000b7e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	e4 2f       	mov	r30, r20
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	e8 0f       	add	r30, r24
     b8e:	f1 1d       	adc	r31, r1
     b90:	e1 38       	cpi	r30, 0x81	; 129
     b92:	f1 05       	cpc	r31, r1
     b94:	1c f0       	brlt	.+6      	; 0xb9c <gfx_mono_generic_draw_horizontal_line+0x1e>
     b96:	c0 e8       	ldi	r28, 0x80	; 128
     b98:	4c 2f       	mov	r20, r28
     b9a:	48 1b       	sub	r20, r24
     b9c:	44 23       	and	r20, r20
     b9e:	09 f4       	brne	.+2      	; 0xba2 <gfx_mono_generic_draw_horizontal_line+0x24>
     ba0:	4a c0       	rjmp	.+148    	; 0xc36 <gfx_mono_generic_draw_horizontal_line+0xb8>
     ba2:	d6 2f       	mov	r29, r22
     ba4:	d6 95       	lsr	r29
     ba6:	d6 95       	lsr	r29
     ba8:	d6 95       	lsr	r29
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	98 e0       	ldi	r25, 0x08	; 8
     bae:	d9 9f       	mul	r29, r25
     bb0:	60 19       	sub	r22, r0
     bb2:	71 09       	sbc	r23, r1
     bb4:	11 24       	eor	r1, r1
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	df 01       	movw	r26, r30
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <gfx_mono_generic_draw_horizontal_line+0x44>
     bbe:	aa 0f       	add	r26, r26
     bc0:	bb 1f       	adc	r27, r27
     bc2:	6a 95       	dec	r22
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <gfx_mono_generic_draw_horizontal_line+0x40>
     bc6:	fa 2e       	mov	r15, r26
     bc8:	21 30       	cpi	r18, 0x01	; 1
     bca:	21 f0       	breq	.+8      	; 0xbd4 <gfx_mono_generic_draw_horizontal_line+0x56>
     bcc:	98 f0       	brcs	.+38     	; 0xbf4 <gfx_mono_generic_draw_horizontal_line+0x76>
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	19 f1       	breq	.+70     	; 0xc18 <gfx_mono_generic_draw_horizontal_line+0x9a>
     bd2:	31 c0       	rjmp	.+98     	; 0xc36 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bd4:	c4 2f       	mov	r28, r20
     bd6:	1f ef       	ldi	r17, 0xFF	; 255
     bd8:	18 0f       	add	r17, r24
     bda:	01 2f       	mov	r16, r17
     bdc:	0c 0f       	add	r16, r28
     bde:	60 2f       	mov	r22, r16
     be0:	8d 2f       	mov	r24, r29
     be2:	aa df       	rcall	.-172    	; 0xb38 <gfx_mono_st7565r_get_byte>
     be4:	4f 2d       	mov	r20, r15
     be6:	48 2b       	or	r20, r24
     be8:	60 2f       	mov	r22, r16
     bea:	8d 2f       	mov	r24, r29
     bec:	86 de       	rcall	.-756    	; 0x8fa <gfx_mono_st7565r_put_byte>
     bee:	c1 50       	subi	r28, 0x01	; 1
     bf0:	a1 f7       	brne	.-24     	; 0xbda <gfx_mono_generic_draw_horizontal_line+0x5c>
     bf2:	21 c0       	rjmp	.+66     	; 0xc36 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bf4:	c4 2f       	mov	r28, r20
     bf6:	1f ef       	ldi	r17, 0xFF	; 255
     bf8:	18 0f       	add	r17, r24
     bfa:	fa 2e       	mov	r15, r26
     bfc:	f0 94       	com	r15
     bfe:	01 2f       	mov	r16, r17
     c00:	0c 0f       	add	r16, r28
     c02:	60 2f       	mov	r22, r16
     c04:	8d 2f       	mov	r24, r29
     c06:	98 df       	rcall	.-208    	; 0xb38 <gfx_mono_st7565r_get_byte>
     c08:	4f 2d       	mov	r20, r15
     c0a:	48 23       	and	r20, r24
     c0c:	60 2f       	mov	r22, r16
     c0e:	8d 2f       	mov	r24, r29
     c10:	74 de       	rcall	.-792    	; 0x8fa <gfx_mono_st7565r_put_byte>
     c12:	c1 50       	subi	r28, 0x01	; 1
     c14:	a1 f7       	brne	.-24     	; 0xbfe <gfx_mono_generic_draw_horizontal_line+0x80>
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <gfx_mono_generic_draw_horizontal_line+0xb8>
     c18:	c4 2f       	mov	r28, r20
     c1a:	1f ef       	ldi	r17, 0xFF	; 255
     c1c:	18 0f       	add	r17, r24
     c1e:	01 2f       	mov	r16, r17
     c20:	0c 0f       	add	r16, r28
     c22:	60 2f       	mov	r22, r16
     c24:	8d 2f       	mov	r24, r29
     c26:	88 df       	rcall	.-240    	; 0xb38 <gfx_mono_st7565r_get_byte>
     c28:	4f 2d       	mov	r20, r15
     c2a:	48 27       	eor	r20, r24
     c2c:	60 2f       	mov	r22, r16
     c2e:	8d 2f       	mov	r24, r29
     c30:	64 de       	rcall	.-824    	; 0x8fa <gfx_mono_st7565r_put_byte>
     c32:	c1 50       	subi	r28, 0x01	; 1
     c34:	a1 f7       	brne	.-24     	; 0xc1e <gfx_mono_generic_draw_horizontal_line+0xa0>
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	08 95       	ret

00000c42 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
	if (height == 0) {
     c4c:	22 23       	and	r18, r18
     c4e:	69 f0       	breq	.+26     	; 0xc6a <gfx_mono_generic_draw_filled_rect+0x28>
     c50:	f4 2e       	mov	r15, r20
     c52:	18 2f       	mov	r17, r24
     c54:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c56:	df ef       	ldi	r29, 0xFF	; 255
     c58:	d6 0f       	add	r29, r22
     c5a:	6d 2f       	mov	r22, r29
     c5c:	6c 0f       	add	r22, r28
     c5e:	20 2f       	mov	r18, r16
     c60:	4f 2d       	mov	r20, r15
     c62:	81 2f       	mov	r24, r17
     c64:	8c df       	rcall	.-232    	; 0xb7e <gfx_mono_generic_draw_horizontal_line>
     c66:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c68:	c1 f7       	brne	.-16     	; 0xc5a <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	08 95       	ret

00000c76 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	c8 2f       	mov	r28, r24
     c8c:	e6 2e       	mov	r14, r22
     c8e:	b4 2e       	mov	r11, r20
     c90:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c92:	00 e0       	ldi	r16, 0x00	; 0
     c94:	f9 01       	movw	r30, r18
     c96:	24 81       	ldd	r18, Z+4	; 0x04
     c98:	43 81       	ldd	r20, Z+3	; 0x03
     c9a:	6b 2d       	mov	r22, r11
     c9c:	8e 2d       	mov	r24, r14
     c9e:	d1 df       	rcall	.-94     	; 0xc42 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     ca0:	f6 01       	movw	r30, r12
     ca2:	80 81       	ld	r24, Z
     ca4:	81 11       	cpse	r24, r1
     ca6:	39 c0       	rjmp	.+114    	; 0xd1a <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     ca8:	83 81       	ldd	r24, Z+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	26 95       	lsr	r18
     cae:	26 95       	lsr	r18
     cb0:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     cb2:	87 70       	andi	r24, 0x07	; 7
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <gfx_mono_draw_char+0x42>
		char_row_size++;
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     cb8:	f6 01       	movw	r30, r12
     cba:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     cbc:	8c 2f       	mov	r24, r28
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	35 81       	ldd	r19, Z+5	; 0x05
     cc2:	83 1b       	sub	r24, r19
     cc4:	91 09       	sbc	r25, r1
     cc6:	2a 9d       	mul	r18, r10
     cc8:	90 01       	movw	r18, r0
     cca:	11 24       	eor	r1, r1
     ccc:	82 9f       	mul	r24, r18
     cce:	a0 01       	movw	r20, r0
     cd0:	83 9f       	mul	r24, r19
     cd2:	50 0d       	add	r21, r0
     cd4:	92 9f       	mul	r25, r18
     cd6:	50 0d       	add	r21, r0
     cd8:	11 24       	eor	r1, r1
     cda:	01 81       	ldd	r16, Z+1	; 0x01
     cdc:	12 81       	ldd	r17, Z+2	; 0x02
     cde:	04 0f       	add	r16, r20
     ce0:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     ce2:	f6 01       	movw	r30, r12
     ce4:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     ce6:	ff 20       	and	r15, r15
     ce8:	a1 f0       	breq	.+40     	; 0xd12 <gfx_mono_draw_char+0x9c>
     cea:	d0 e0       	ldi	r29, 0x00	; 0
     cec:	c0 e0       	ldi	r28, 0x00	; 0
     cee:	8e 2d       	mov	r24, r14
     cf0:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cf2:	9c 2f       	mov	r25, r28
     cf4:	97 70       	andi	r25, 0x07	; 7
     cf6:	21 f4       	brne	.+8      	; 0xd00 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     cf8:	f8 01       	movw	r30, r16
     cfa:	d4 91       	lpm	r29, Z
				glyph_data++;
     cfc:	0f 5f       	subi	r16, 0xFF	; 255
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     d00:	dd 23       	and	r29, r29
     d02:	1c f4       	brge	.+6      	; 0xd0a <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	6b 2d       	mov	r22, r11
     d08:	e1 de       	rcall	.-574    	; 0xacc <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     d0a:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     d0c:	cf 5f       	subi	r28, 0xFF	; 255
     d0e:	fc 12       	cpse	r15, r28
     d10:	ee cf       	rjmp	.-36     	; 0xcee <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     d12:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     d14:	aa 94       	dec	r10
	} while (rows_left > 0);
     d16:	a1 10       	cpse	r10, r1
     d18:	e4 cf       	rjmp	.-56     	; 0xce2 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	cf 90       	pop	r12
     d2a:	bf 90       	pop	r11
     d2c:	af 90       	pop	r10
     d2e:	08 95       	ret

00000d30 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	d6 2e       	mov	r13, r22
     d40:	04 2f       	mov	r16, r20
     d42:	79 01       	movw	r14, r18
     d44:	ec 01       	movw	r28, r24
     d46:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d48:	89 91       	ld	r24, Y+
     d4a:	8a 30       	cpi	r24, 0x0A	; 10
     d4c:	31 f4       	brne	.+12     	; 0xd5a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d4e:	f7 01       	movw	r30, r14
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d56:	1d 2d       	mov	r17, r13
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d5a:	8d 30       	cpi	r24, 0x0D	; 13
     d5c:	39 f0       	breq	.+14     	; 0xd6c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d5e:	97 01       	movw	r18, r14
     d60:	40 2f       	mov	r20, r16
     d62:	61 2f       	mov	r22, r17
     d64:	88 df       	rcall	.-240    	; 0xc76 <gfx_mono_draw_char>
			x += font->width;
     d66:	f7 01       	movw	r30, r14
     d68:	83 81       	ldd	r24, Z+3	; 0x03
     d6a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d6c:	88 81       	ld	r24, Y
     d6e:	81 11       	cpse	r24, r1
     d70:	eb cf       	rjmp	.-42     	; 0xd48 <gfx_mono_draw_string+0x18>
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	08 95       	ret

00000d82 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     d8c:	c6 2f       	mov	r28, r22
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	de 01       	movw	r26, r28
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <ioport_configure_port_pin+0x18>
     d96:	b5 95       	asr	r27
     d98:	a7 95       	ror	r26
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <ioport_configure_port_pin+0x14>
     d9e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     da0:	50 8b       	std	Z+16, r21	; 0x10
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     da8:	28 30       	cpi	r18, 0x08	; 8
     daa:	31 05       	cpc	r19, r1
     dac:	89 f7       	brne	.-30     	; 0xd90 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     dae:	40 ff       	sbrs	r20, 0
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     db2:	41 ff       	sbrs	r20, 1
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     db6:	fc 01       	movw	r30, r24
     db8:	65 83       	std	Z+5, r22	; 0x05
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     dbc:	fc 01       	movw	r30, r24
     dbe:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     dc0:	fc 01       	movw	r30, r24
     dc2:	61 83       	std	Z+1, r22	; 0x01
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     dc6:	fc 01       	movw	r30, r24
     dc8:	62 83       	std	Z+2, r22	; 0x02
	}
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     dd0:	80 3a       	cpi	r24, 0xA0	; 160
     dd2:	28 e0       	ldi	r18, 0x08	; 8
     dd4:	92 07       	cpc	r25, r18
     dd6:	21 f4       	brne	.+8      	; 0xde0 <usart_spi_init+0x10>
     dd8:	60 e1       	ldi	r22, 0x10	; 16
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	63 cd       	rjmp	.-1338   	; 0x8a4 <sysclk_enable_module>
     dde:	08 95       	ret
     de0:	80 3b       	cpi	r24, 0xB0	; 176
     de2:	28 e0       	ldi	r18, 0x08	; 8
     de4:	92 07       	cpc	r25, r18
     de6:	21 f4       	brne	.+8      	; 0xdf0 <usart_spi_init+0x20>
     de8:	60 e2       	ldi	r22, 0x20	; 32
     dea:	83 e0       	ldi	r24, 0x03	; 3
     dec:	5b cd       	rjmp	.-1354   	; 0x8a4 <sysclk_enable_module>
     dee:	08 95       	ret
     df0:	80 3a       	cpi	r24, 0xA0	; 160
     df2:	29 e0       	ldi	r18, 0x09	; 9
     df4:	92 07       	cpc	r25, r18
     df6:	21 f4       	brne	.+8      	; 0xe00 <usart_spi_init+0x30>
     df8:	60 e1       	ldi	r22, 0x10	; 16
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	53 cd       	rjmp	.-1370   	; 0x8a4 <sysclk_enable_module>
     dfe:	08 95       	ret
     e00:	80 3b       	cpi	r24, 0xB0	; 176
     e02:	29 e0       	ldi	r18, 0x09	; 9
     e04:	92 07       	cpc	r25, r18
     e06:	21 f4       	brne	.+8      	; 0xe10 <usart_spi_init+0x40>
     e08:	60 e2       	ldi	r22, 0x20	; 32
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	4b cd       	rjmp	.-1386   	; 0x8a4 <sysclk_enable_module>
     e0e:	08 95       	ret
     e10:	80 3a       	cpi	r24, 0xA0	; 160
     e12:	2a e0       	ldi	r18, 0x0A	; 10
     e14:	92 07       	cpc	r25, r18
     e16:	21 f4       	brne	.+8      	; 0xe20 <usart_spi_init+0x50>
     e18:	60 e1       	ldi	r22, 0x10	; 16
     e1a:	85 e0       	ldi	r24, 0x05	; 5
     e1c:	43 cd       	rjmp	.-1402   	; 0x8a4 <sysclk_enable_module>
     e1e:	08 95       	ret
     e20:	80 3a       	cpi	r24, 0xA0	; 160
     e22:	9b 40       	sbci	r25, 0x0B	; 11
     e24:	19 f4       	brne	.+6      	; 0xe2c <usart_spi_init+0x5c>
     e26:	60 e1       	ldi	r22, 0x10	; 16
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	3c cd       	rjmp	.-1416   	; 0x8a4 <sysclk_enable_module>
     e2c:	08 95       	ret

00000e2e <usart_spi_setup_device>:
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	00 d0       	rcall	.+0      	; 0xe38 <usart_spi_setup_device+0xa>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <usart_spi_setup_device+0xc>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	09 83       	std	Y+1, r16	; 0x01
     e40:	1a 83       	std	Y+2, r17	; 0x02
     e42:	2b 83       	std	Y+3, r18	; 0x03
     e44:	3c 83       	std	Y+4, r19	; 0x04
     e46:	4d 83       	std	Y+5, r20	; 0x05
     e48:	1e 82       	std	Y+6, r1	; 0x06
     e4a:	be 01       	movw	r22, r28
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	3a d4       	rcall	.+2164   	; 0x16c6 <usart_init_spi>
     e52:	26 96       	adiw	r28, 0x06	; 6
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     e62:	fb 01       	movw	r30, r22
     e64:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e66:	e8 2f       	mov	r30, r24
     e68:	e6 95       	lsr	r30
     e6a:	e6 95       	lsr	r30
     e6c:	e6 95       	lsr	r30
     e6e:	40 e2       	ldi	r20, 0x20	; 32
     e70:	e4 9f       	mul	r30, r20
     e72:	f0 01       	movw	r30, r0
     e74:	11 24       	eor	r1, r1
     e76:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e78:	87 70       	andi	r24, 0x07	; 7
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	a9 01       	movw	r20, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <usart_spi_select_device+0x24>
     e82:	44 0f       	add	r20, r20
     e84:	55 1f       	adc	r21, r21
     e86:	8a 95       	dec	r24
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e8a:	46 83       	std	Z+6, r20	; 0x06
     e8c:	08 95       	ret

00000e8e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e8e:	fb 01       	movw	r30, r22
     e90:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e92:	e8 2f       	mov	r30, r24
     e94:	e6 95       	lsr	r30
     e96:	e6 95       	lsr	r30
     e98:	e6 95       	lsr	r30
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	e4 9f       	mul	r30, r20
     e9e:	f0 01       	movw	r30, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     ea4:	87 70       	andi	r24, 0x07	; 7
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <usart_spi_deselect_device+0x24>
     eae:	44 0f       	add	r20, r20
     eb0:	55 1f       	adc	r21, r21
     eb2:	8a 95       	dec	r24
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     eb6:	45 83       	std	Z+5, r20	; 0x05
     eb8:	08 95       	ret

00000eba <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     eba:	43 e0       	ldi	r20, 0x03	; 3
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	80 ee       	ldi	r24, 0xE0	; 224
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	5e df       	rcall	.-324    	; 0xd82 <ioport_configure_port_pin>
     ec6:	43 e0       	ldi	r20, 0x03	; 3
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	80 ee       	ldi	r24, 0xE0	; 224
     ece:	97 e0       	ldi	r25, 0x07	; 7
     ed0:	58 df       	rcall	.-336    	; 0xd82 <ioport_configure_port_pin>
     ed2:	43 e0       	ldi	r20, 0x03	; 3
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	60 e1       	ldi	r22, 0x10	; 16
     ed8:	80 e6       	ldi	r24, 0x60	; 96
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	52 df       	rcall	.-348    	; 0xd82 <ioport_configure_port_pin>
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	50 e4       	ldi	r21, 0x40	; 64
     ee2:	60 e2       	ldi	r22, 0x20	; 32
     ee4:	80 e6       	ldi	r24, 0x60	; 96
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	4c df       	rcall	.-360    	; 0xd82 <ioport_configure_port_pin>
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	5b e1       	ldi	r21, 0x1B	; 27
     eee:	60 e2       	ldi	r22, 0x20	; 32
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	96 e0       	ldi	r25, 0x06	; 6
     ef4:	46 df       	rcall	.-372    	; 0xd82 <ioport_configure_port_pin>
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	5b e1       	ldi	r21, 0x1B	; 27
     efa:	62 e0       	ldi	r22, 0x02	; 2
     efc:	80 ea       	ldi	r24, 0xA0	; 160
     efe:	96 e0       	ldi	r25, 0x06	; 6
     f00:	40 df       	rcall	.-384    	; 0xd82 <ioport_configure_port_pin>
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	5b e1       	ldi	r21, 0x1B	; 27
     f06:	64 e0       	ldi	r22, 0x04	; 4
     f08:	80 ea       	ldi	r24, 0xA0	; 160
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	3a df       	rcall	.-396    	; 0xd82 <ioport_configure_port_pin>
     f0e:	43 e0       	ldi	r20, 0x03	; 3
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	62 e0       	ldi	r22, 0x02	; 2
     f14:	80 e6       	ldi	r24, 0x60	; 96
     f16:	96 e0       	ldi	r25, 0x06	; 6
     f18:	34 df       	rcall	.-408    	; 0xd82 <ioport_configure_port_pin>
     f1a:	43 e0       	ldi	r20, 0x03	; 3
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	68 e0       	ldi	r22, 0x08	; 8
     f20:	80 e6       	ldi	r24, 0x60	; 96
     f22:	96 e0       	ldi	r25, 0x06	; 6
     f24:	2e df       	rcall	.-420    	; 0xd82 <ioport_configure_port_pin>
     f26:	43 e0       	ldi	r20, 0x03	; 3
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	68 e0       	ldi	r22, 0x08	; 8
     f2c:	80 ea       	ldi	r24, 0xA0	; 160
     f2e:	96 e0       	ldi	r25, 0x06	; 6
     f30:	28 df       	rcall	.-432    	; 0xd82 <ioport_configure_port_pin>
     f32:	43 e0       	ldi	r20, 0x03	; 3
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	80 e6       	ldi	r24, 0x60	; 96
     f3a:	96 e0       	ldi	r25, 0x06	; 6
     f3c:	22 df       	rcall	.-444    	; 0xd82 <ioport_configure_port_pin>
     f3e:	43 e0       	ldi	r20, 0x03	; 3
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	68 e0       	ldi	r22, 0x08	; 8
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	96 e0       	ldi	r25, 0x06	; 6
     f48:	1c df       	rcall	.-456    	; 0xd82 <ioport_configure_port_pin>
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	60 e1       	ldi	r22, 0x10	; 16
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	96 e0       	ldi	r25, 0x06	; 6
     f54:	16 df       	rcall	.-468    	; 0xd82 <ioport_configure_port_pin>
     f56:	43 e0       	ldi	r20, 0x03	; 3
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	62 e0       	ldi	r22, 0x02	; 2
     f5c:	80 e6       	ldi	r24, 0x60	; 96
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	10 df       	rcall	.-480    	; 0xd82 <ioport_configure_port_pin>
     f62:	43 e0       	ldi	r20, 0x03	; 3
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	68 e0       	ldi	r22, 0x08	; 8
     f68:	80 e6       	ldi	r24, 0x60	; 96
     f6a:	96 e0       	ldi	r25, 0x06	; 6
     f6c:	0a df       	rcall	.-492    	; 0xd82 <ioport_configure_port_pin>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	64 e0       	ldi	r22, 0x04	; 4
     f74:	80 e6       	ldi	r24, 0x60	; 96
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	04 df       	rcall	.-504    	; 0xd82 <ioport_configure_port_pin>
     f7a:	43 e0       	ldi	r20, 0x03	; 3
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e1       	ldi	r22, 0x10	; 16
     f80:	80 ea       	ldi	r24, 0xA0	; 160
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	fe de       	rcall	.-516    	; 0xd82 <ioport_configure_port_pin>
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	96 e0       	ldi	r25, 0x06	; 6
     f90:	f8 de       	rcall	.-528    	; 0xd82 <ioport_configure_port_pin>
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	96 e0       	ldi	r25, 0x06	; 6
     f9c:	f2 de       	rcall	.-540    	; 0xd82 <ioport_configure_port_pin>
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	62 e0       	ldi	r22, 0x02	; 2
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	96 e0       	ldi	r25, 0x06	; 6
     fa8:	ec de       	rcall	.-552    	; 0xd82 <ioport_configure_port_pin>
     faa:	43 e0       	ldi	r20, 0x03	; 3
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	68 e0       	ldi	r22, 0x08	; 8
     fb0:	80 e4       	ldi	r24, 0x40	; 64
     fb2:	96 e0       	ldi	r25, 0x06	; 6
     fb4:	e6 de       	rcall	.-564    	; 0xd82 <ioport_configure_port_pin>
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	64 e0       	ldi	r22, 0x04	; 4
     fbc:	80 e4       	ldi	r24, 0x40	; 64
     fbe:	96 e0       	ldi	r25, 0x06	; 6
     fc0:	e0 de       	rcall	.-576    	; 0xd82 <ioport_configure_port_pin>
     fc2:	43 e0       	ldi	r20, 0x03	; 3
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	68 e0       	ldi	r22, 0x08	; 8
     fc8:	80 e6       	ldi	r24, 0x60	; 96
     fca:	96 e0       	ldi	r25, 0x06	; 6
     fcc:	da de       	rcall	.-588    	; 0xd82 <ioport_configure_port_pin>
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	64 e0       	ldi	r22, 0x04	; 4
     fd4:	80 e6       	ldi	r24, 0x60	; 96
     fd6:	96 e0       	ldi	r25, 0x06	; 6
     fd8:	d4 de       	rcall	.-600    	; 0xd82 <ioport_configure_port_pin>
     fda:	43 e0       	ldi	r20, 0x03	; 3
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	68 e0       	ldi	r22, 0x08	; 8
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	96 e0       	ldi	r25, 0x06	; 6
     fe4:	ce de       	rcall	.-612    	; 0xd82 <ioport_configure_port_pin>
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	64 e0       	ldi	r22, 0x04	; 4
     fec:	80 e8       	ldi	r24, 0x80	; 128
     fee:	96 e0       	ldi	r25, 0x06	; 6
     ff0:	c8 ce       	rjmp	.-624    	; 0xd82 <ioport_configure_port_pin>
     ff2:	08 95       	ret

00000ff4 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     ff4:	81 15       	cp	r24, r1
     ff6:	22 e0       	ldi	r18, 0x02	; 2
     ff8:	92 07       	cpc	r25, r18
     ffa:	61 f4       	brne	.+24     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     ffc:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <adca_enable_count>
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	98 0f       	add	r25, r24
    1004:	90 93 a1 22 	sts	0x22A1, r25	; 0x8022a1 <adca_enable_count>
    1008:	81 11       	cpse	r24, r1
    100a:	12 c0       	rjmp	.+36     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    100c:	62 e0       	ldi	r22, 0x02	; 2
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	49 cc       	rjmp	.-1902   	; 0x8a4 <sysclk_enable_module>
    1012:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1014:	80 34       	cpi	r24, 0x40	; 64
    1016:	92 40       	sbci	r25, 0x02	; 2
    1018:	59 f4       	brne	.+22     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    101a:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <adcb_enable_count>
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	98 0f       	add	r25, r24
    1022:	90 93 a0 22 	sts	0x22A0, r25	; 0x8022a0 <adcb_enable_count>
    1026:	81 11       	cpse	r24, r1
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    102a:	62 e0       	ldi	r22, 0x02	; 2
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	3a cc       	rjmp	.-1932   	; 0x8a4 <sysclk_enable_module>
    1030:	08 95       	ret

00001032 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1032:	81 15       	cp	r24, r1
    1034:	22 e0       	ldi	r18, 0x02	; 2
    1036:	92 07       	cpc	r25, r18
    1038:	59 f4       	brne	.+22     	; 0x1050 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    103a:	80 91 a1 22 	lds	r24, 0x22A1	; 0x8022a1 <adca_enable_count>
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	80 93 a1 22 	sts	0x22A1, r24	; 0x8022a1 <adca_enable_count>
    1044:	81 11       	cpse	r24, r1
    1046:	11 c0       	rjmp	.+34     	; 0x106a <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	41 cc       	rjmp	.-1918   	; 0x8d0 <sysclk_disable_module>
    104e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1050:	80 34       	cpi	r24, 0x40	; 64
    1052:	92 40       	sbci	r25, 0x02	; 2
    1054:	51 f4       	brne	.+20     	; 0x106a <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1056:	80 91 a0 22 	lds	r24, 0x22A0	; 0x8022a0 <adcb_enable_count>
    105a:	81 50       	subi	r24, 0x01	; 1
    105c:	80 93 a0 22 	sts	0x22A0, r24	; 0x8022a0 <adcb_enable_count>
    1060:	81 11       	cpse	r24, r1
    1062:	03 c0       	rjmp	.+6      	; 0x106a <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	33 cc       	rjmp	.-1946   	; 0x8d0 <sysclk_disable_module>
    106a:	08 95       	ret

0000106c <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	1f 92       	push	r1
    1078:	1f 92       	push	r1
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1080:	8f b7       	in	r24, 0x3f	; 63
    1082:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1084:	f8 94       	cli
	return flags;
    1086:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1088:	c7 01       	movw	r24, r14
    108a:	b4 df       	rcall	.-152    	; 0xff4 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    108c:	f7 01       	movw	r30, r14
    108e:	80 81       	ld	r24, Z
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1094:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1096:	80 91 96 23 	lds	r24, 0x2396	; 0x802396 <sleepmgr_locks+0x1>
    109a:	8f 3f       	cpi	r24, 0xFF	; 255
    109c:	09 f4       	brne	.+2      	; 0x10a0 <adc_enable+0x34>
    109e:	ff cf       	rjmp	.-2      	; 0x109e <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10a0:	8f b7       	in	r24, 0x3f	; 63
    10a2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10a4:	f8 94       	cli
	return flags;
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    10a8:	e5 e9       	ldi	r30, 0x95	; 149
    10aa:	f3 e2       	ldi	r31, 0x23	; 35
    10ac:	81 81       	ldd	r24, Z+1	; 0x01
    10ae:	8f 5f       	subi	r24, 0xFF	; 255
    10b0:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b2:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	08 95       	ret

000010c4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    10ea:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
    10ee:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>
    10f2:	e0 91 9d 23 	lds	r30, 0x239D	; 0x80239d <adca_callback>
    10f6:	f0 91 9e 23 	lds	r31, 0x239E	; 0x80239e <adca_callback+0x1>
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	19 95       	eicall
}
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0b be       	out	0x3b, r0	; 59
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	0b b6       	in	r0, 0x3b	; 59
    1134:	0f 92       	push	r0
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    114e:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x7be22c>
    1152:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x7be22d>
    1156:	e0 91 9d 23 	lds	r30, 0x239D	; 0x80239d <adca_callback>
    115a:	f0 91 9e 23 	lds	r31, 0x239E	; 0x80239e <adca_callback+0x1>
    115e:	62 e0       	ldi	r22, 0x02	; 2
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	19 95       	eicall
}
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0b be       	out	0x3b, r0	; 59
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    118c:	1f 92       	push	r1
    118e:	0f 92       	push	r0
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	0f 92       	push	r0
    1194:	11 24       	eor	r1, r1
    1196:	0b b6       	in	r0, 0x3b	; 59
    1198:	0f 92       	push	r0
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    11b2:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x7be234>
    11b6:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x7be235>
    11ba:	e0 91 9d 23 	lds	r30, 0x239D	; 0x80239d <adca_callback>
    11be:	f0 91 9e 23 	lds	r31, 0x239E	; 0x80239e <adca_callback+0x1>
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	19 95       	eicall
}
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0b be       	out	0x3b, r0	; 59
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	0b b6       	in	r0, 0x3b	; 59
    11fc:	0f 92       	push	r0
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1216:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x7be23c>
    121a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x7be23d>
    121e:	e0 91 9d 23 	lds	r30, 0x239D	; 0x80239d <adca_callback>
    1222:	f0 91 9e 23 	lds	r31, 0x239E	; 0x80239e <adca_callback+0x1>
    1226:	68 e0       	ldi	r22, 0x08	; 8
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	19 95       	eicall
}
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	0b be       	out	0x3b, r0	; 59
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	0b b6       	in	r0, 0x3b	; 59
    1260:	0f 92       	push	r0
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    127a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x7be264>
    127e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x7be265>
    1282:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <adcb_callback>
    1286:	f0 91 9c 23 	lds	r31, 0x239C	; 0x80239c <adcb_callback+0x1>
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	80 e4       	ldi	r24, 0x40	; 64
    128e:	92 e0       	ldi	r25, 0x02	; 2
    1290:	19 95       	eicall
}
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0b be       	out	0x3b, r0	; 59
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	0b b6       	in	r0, 0x3b	; 59
    12c4:	0f 92       	push	r0
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    12de:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x7be26c>
    12e2:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x7be26d>
    12e6:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <adcb_callback>
    12ea:	f0 91 9c 23 	lds	r31, 0x239C	; 0x80239c <adcb_callback+0x1>
    12ee:	62 e0       	ldi	r22, 0x02	; 2
    12f0:	80 e4       	ldi	r24, 0x40	; 64
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	19 95       	eicall
}
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0b be       	out	0x3b, r0	; 59
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	11 24       	eor	r1, r1
    1326:	0b b6       	in	r0, 0x3b	; 59
    1328:	0f 92       	push	r0
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1342:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x7be274>
    1346:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x7be275>
    134a:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <adcb_callback>
    134e:	f0 91 9c 23 	lds	r31, 0x239C	; 0x80239c <adcb_callback+0x1>
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	80 e4       	ldi	r24, 0x40	; 64
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	19 95       	eicall
}
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0b be       	out	0x3b, r0	; 59
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	0b b6       	in	r0, 0x3b	; 59
    138c:	0f 92       	push	r0
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    13a6:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x7be27c>
    13aa:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x7be27d>
    13ae:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <adcb_callback>
    13b2:	f0 91 9c 23 	lds	r31, 0x239C	; 0x80239c <adcb_callback+0x1>
    13b6:	68 e0       	ldi	r22, 0x08	; 8
    13b8:	80 e4       	ldi	r24, 0x40	; 64
    13ba:	92 e0       	ldi	r25, 0x02	; 2
    13bc:	19 95       	eicall
}
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0b be       	out	0x3b, r0	; 59
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	1f 92       	push	r1
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	8c 01       	movw	r16, r24
    13fe:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1400:	81 15       	cp	r24, r1
    1402:	22 e0       	ldi	r18, 0x02	; 2
    1404:	92 07       	cpc	r25, r18
    1406:	71 f4       	brne	.+28     	; 0x1424 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1408:	61 e2       	ldi	r22, 0x21	; 33
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	1f d1       	rcall	.+574    	; 0x164e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1410:	c8 2e       	mov	r12, r24
    1412:	d1 2c       	mov	r13, r1
    1414:	60 e2       	ldi	r22, 0x20	; 32
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	19 d1       	rcall	.+562    	; 0x164e <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    141c:	dc 2c       	mov	r13, r12
    141e:	cc 24       	eor	r12, r12
    1420:	c8 2a       	or	r12, r24
    1422:	10 c0       	rjmp	.+32     	; 0x1444 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1424:	80 34       	cpi	r24, 0x40	; 64
    1426:	92 40       	sbci	r25, 0x02	; 2
    1428:	c1 f5       	brne	.+112    	; 0x149a <adc_write_configuration+0xb6>
    142a:	65 e2       	ldi	r22, 0x25	; 37
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	0e d1       	rcall	.+540    	; 0x164e <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1432:	c8 2e       	mov	r12, r24
    1434:	d1 2c       	mov	r13, r1
    1436:	64 e2       	ldi	r22, 0x24	; 36
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	08 d1       	rcall	.+528    	; 0x164e <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    143e:	dc 2c       	mov	r13, r12
    1440:	cc 24       	eor	r12, r12
    1442:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1444:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1446:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    1448:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    144a:	b9 80       	ldd	r11, Y+1	; 0x01
    144c:	c8 01       	movw	r24, r16
    144e:	d2 dd       	rcall	.-1116   	; 0xff4 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1450:	f8 01       	movw	r30, r16
    1452:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1454:	92 e0       	ldi	r25, 0x02	; 2
    1456:	90 83       	st	Z, r25
	adc->CAL = cal;
    1458:	c4 86       	std	Z+12, r12	; 0x0c
    145a:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    145c:	f7 01       	movw	r30, r14
    145e:	25 81       	ldd	r18, Z+5	; 0x05
    1460:	36 81       	ldd	r19, Z+6	; 0x06
    1462:	f8 01       	movw	r30, r16
    1464:	20 8f       	std	Z+24, r18	; 0x18
    1466:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1468:	f7 01       	movw	r30, r14
    146a:	92 81       	ldd	r25, Z+2	; 0x02
    146c:	f8 01       	movw	r30, r16
    146e:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1470:	f7 01       	movw	r30, r14
    1472:	94 81       	ldd	r25, Z+4	; 0x04
    1474:	f8 01       	movw	r30, r16
    1476:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1478:	f7 01       	movw	r30, r14
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	f8 01       	movw	r30, r16
    147e:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1480:	f7 01       	movw	r30, r14
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	f8 01       	movw	r30, r16
    1486:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1488:	81 70       	andi	r24, 0x01	; 1
    148a:	f7 01       	movw	r30, r14
    148c:	90 81       	ld	r25, Z
    148e:	89 2b       	or	r24, r25
    1490:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    1492:	80 83       	st	Z, r24
    1494:	c8 01       	movw	r24, r16
    1496:	cd dd       	rcall	.-1126   	; 0x1032 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1498:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    149a:	0f 90       	pop	r0
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	08 95       	ret

000014b0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	8c 01       	movw	r16, r24
    14c6:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14c8:	8f b7       	in	r24, 0x3f	; 63
    14ca:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14cc:	f8 94       	cli
	return flags;
    14ce:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    14d0:	c8 01       	movw	r24, r16
    14d2:	90 dd       	rcall	.-1248   	; 0xff4 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    14d4:	f8 01       	movw	r30, r16
    14d6:	80 81       	ld	r24, Z
    14d8:	80 7c       	andi	r24, 0xC0	; 192
    14da:	f7 01       	movw	r30, r14
    14dc:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    14de:	f8 01       	movw	r30, r16
    14e0:	80 8d       	ldd	r24, Z+24	; 0x18
    14e2:	91 8d       	ldd	r25, Z+25	; 0x19
    14e4:	f7 01       	movw	r30, r14
    14e6:	85 83       	std	Z+5, r24	; 0x05
    14e8:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    14ea:	f8 01       	movw	r30, r16
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	f7 01       	movw	r30, r14
    14f0:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    14f2:	f8 01       	movw	r30, r16
    14f4:	84 81       	ldd	r24, Z+4	; 0x04
    14f6:	f7 01       	movw	r30, r14
    14f8:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    14fa:	f8 01       	movw	r30, r16
    14fc:	83 81       	ldd	r24, Z+3	; 0x03
    14fe:	f7 01       	movw	r30, r14
    1500:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1502:	f8 01       	movw	r30, r16
    1504:	81 81       	ldd	r24, Z+1	; 0x01
    1506:	f7 01       	movw	r30, r14
    1508:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    150a:	c8 01       	movw	r24, r16
    150c:	92 dd       	rcall	.-1244   	; 0x1032 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    150e:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1510:	0f 90       	pop	r0
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	08 95       	ret

00001522 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	1f 92       	push	r1
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	6c 01       	movw	r12, r24
    153e:	b6 2e       	mov	r11, r22
    1540:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1542:	86 2f       	mov	r24, r22
    1544:	83 70       	andi	r24, 0x03	; 3
    1546:	29 f4       	brne	.+10     	; 0x1552 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1548:	96 2f       	mov	r25, r22
    154a:	96 95       	lsr	r25
    154c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1552:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1554:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1556:	90 ff       	sbrs	r25, 0
		index++;
    1558:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    155a:	86 01       	movw	r16, r12
    155c:	00 5e       	subi	r16, 0xE0	; 224
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	98 e0       	ldi	r25, 0x08	; 8
    1562:	89 9f       	mul	r24, r25
    1564:	00 0d       	add	r16, r0
    1566:	11 1d       	adc	r17, r1
    1568:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    156a:	8f b7       	in	r24, 0x3f	; 63
    156c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    156e:	f8 94       	cli
	return flags;
    1570:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1572:	c6 01       	movw	r24, r12
    1574:	3f dd       	rcall	.-1410   	; 0xff4 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1576:	f7 01       	movw	r30, r14
    1578:	80 81       	ld	r24, Z
    157a:	f8 01       	movw	r30, r16
    157c:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    157e:	f7 01       	movw	r30, r14
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	f8 01       	movw	r30, r16
    1584:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1586:	f7 01       	movw	r30, r14
    1588:	81 81       	ldd	r24, Z+1	; 0x01
    158a:	f8 01       	movw	r30, r16
    158c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    158e:	b0 fe       	sbrs	r11, 0
    1590:	04 c0       	rjmp	.+8      	; 0x159a <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1592:	f7 01       	movw	r30, r14
    1594:	83 81       	ldd	r24, Z+3	; 0x03
    1596:	f8 01       	movw	r30, r16
    1598:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    159a:	c6 01       	movw	r24, r12
    159c:	4a dd       	rcall	.-1388   	; 0x1032 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    159e:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    15a0:	0f 90       	pop	r0
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	bf 90       	pop	r11
    15b4:	af 90       	pop	r10
    15b6:	08 95       	ret

000015b8 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	1f 92       	push	r1
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	6c 01       	movw	r12, r24
    15d4:	b6 2e       	mov	r11, r22
    15d6:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    15d8:	86 2f       	mov	r24, r22
    15da:	83 70       	andi	r24, 0x03	; 3
    15dc:	29 f4       	brne	.+10     	; 0x15e8 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    15de:	96 2f       	mov	r25, r22
    15e0:	96 95       	lsr	r25
    15e2:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    15e8:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    15ea:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    15ec:	90 ff       	sbrs	r25, 0
		index++;
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    15f0:	86 01       	movw	r16, r12
    15f2:	00 5e       	subi	r16, 0xE0	; 224
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	98 e0       	ldi	r25, 0x08	; 8
    15f8:	89 9f       	mul	r24, r25
    15fa:	00 0d       	add	r16, r0
    15fc:	11 1d       	adc	r17, r1
    15fe:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1600:	8f b7       	in	r24, 0x3f	; 63
    1602:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1604:	f8 94       	cli
	return flags;
    1606:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1608:	c6 01       	movw	r24, r12
    160a:	f4 dc       	rcall	.-1560   	; 0xff4 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    160c:	f8 01       	movw	r30, r16
    160e:	80 81       	ld	r24, Z
    1610:	f7 01       	movw	r30, r14
    1612:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1614:	f8 01       	movw	r30, r16
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	f7 01       	movw	r30, r14
    161a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    161c:	f8 01       	movw	r30, r16
    161e:	81 81       	ldd	r24, Z+1	; 0x01
    1620:	f7 01       	movw	r30, r14
    1622:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1624:	b0 fe       	sbrs	r11, 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1628:	f8 01       	movw	r30, r16
    162a:	86 81       	ldd	r24, Z+6	; 0x06
    162c:	f7 01       	movw	r30, r14
    162e:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1630:	c6 01       	movw	r24, r12
    1632:	ff dc       	rcall	.-1538   	; 0x1032 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1634:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1636:	0f 90       	pop	r0
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	08 95       	ret

0000164e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    164e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1652:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1654:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1656:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    165a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    165c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1660:	08 95       	ret

00001662 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1674:	d9 01       	movw	r26, r18
    1676:	c8 01       	movw	r24, r16
    1678:	b6 95       	lsr	r27
    167a:	a7 95       	ror	r26
    167c:	97 95       	ror	r25
    167e:	87 95       	ror	r24
    1680:	48 17       	cp	r20, r24
    1682:	59 07       	cpc	r21, r25
    1684:	6a 07       	cpc	r22, r26
    1686:	7b 07       	cpc	r23, r27
    1688:	78 f4       	brcc	.+30     	; 0x16a8 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    168a:	6a 01       	movw	r12, r20
    168c:	7b 01       	movw	r14, r22
    168e:	cc 0c       	add	r12, r12
    1690:	dd 1c       	adc	r13, r13
    1692:	ee 1c       	adc	r14, r14
    1694:	ff 1c       	adc	r15, r15
    1696:	c9 01       	movw	r24, r18
    1698:	b8 01       	movw	r22, r16
    169a:	a7 01       	movw	r20, r14
    169c:	96 01       	movw	r18, r12
    169e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__udivmodsi4>
    16a2:	21 50       	subi	r18, 0x01	; 1
    16a4:	31 09       	sbc	r19, r1
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    16ac:	83 2f       	mov	r24, r19
    16ae:	8f 70       	andi	r24, 0x0F	; 15
    16b0:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    16b2:	2e 83       	std	Y+6, r18	; 0x06
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	08 95       	ret

000016c6 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	1f 92       	push	r1
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	7c 01       	movw	r14, r24
    16dc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <usart_init_spi+0x1e>
    16e2:	b6 c1       	rjmp	.+876    	; 0x1a50 <usart_init_spi+0x38a>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    16e4:	80 3c       	cpi	r24, 0xC0	; 192
    16e6:	91 05       	cpc	r25, r1
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    16ea:	60 e1       	ldi	r22, 0x10	; 16
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	da d8       	rcall	.-3660   	; 0x8a4 <sysclk_enable_module>
    16f0:	af c1       	rjmp	.+862    	; 0x1a50 <usart_init_spi+0x38a>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	e8 16       	cp	r14, r24
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	f8 06       	cpc	r15, r24
    16fa:	21 f4       	brne	.+8      	; 0x1704 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    16fc:	62 e0       	ldi	r22, 0x02	; 2
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	d1 d8       	rcall	.-3678   	; 0x8a4 <sysclk_enable_module>
    1702:	a6 c1       	rjmp	.+844    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1704:	e1 14       	cp	r14, r1
    1706:	e1 e0       	ldi	r30, 0x01	; 1
    1708:	fe 06       	cpc	r15, r30
    170a:	21 f4       	brne	.+8      	; 0x1714 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	c9 d8       	rcall	.-3694   	; 0x8a4 <sysclk_enable_module>
    1712:	9e c1       	rjmp	.+828    	; 0x1a50 <usart_init_spi+0x38a>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1714:	f0 e8       	ldi	r31, 0x80	; 128
    1716:	ef 16       	cp	r14, r31
    1718:	f3 e0       	ldi	r31, 0x03	; 3
    171a:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    171c:	21 f4       	brne	.+8      	; 0x1726 <usart_init_spi+0x60>
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	c0 d8       	rcall	.-3712   	; 0x8a4 <sysclk_enable_module>
    1724:	95 c1       	rjmp	.+810    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1726:	30 e9       	ldi	r19, 0x90	; 144
    1728:	e3 16       	cp	r14, r19
    172a:	33 e0       	ldi	r19, 0x03	; 3
    172c:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    172e:	21 f4       	brne	.+8      	; 0x1738 <usart_init_spi+0x72>
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	b7 d8       	rcall	.-3730   	; 0x8a4 <sysclk_enable_module>
    1736:	8c c1       	rjmp	.+792    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1738:	e1 14       	cp	r14, r1
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    173e:	21 f4       	brne	.+8      	; 0x1748 <usart_init_spi+0x82>
    1740:	62 e0       	ldi	r22, 0x02	; 2
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	af d8       	rcall	.-3746   	; 0x8a4 <sysclk_enable_module>
    1746:	84 c1       	rjmp	.+776    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1748:	e0 e4       	ldi	r30, 0x40	; 64
    174a:	ee 16       	cp	r14, r30
    174c:	e2 e0       	ldi	r30, 0x02	; 2
    174e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1750:	21 f4       	brne	.+8      	; 0x175a <usart_init_spi+0x94>
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	a6 d8       	rcall	.-3764   	; 0x8a4 <sysclk_enable_module>
    1758:	7b c1       	rjmp	.+758    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    175a:	f0 e2       	ldi	r31, 0x20	; 32
    175c:	ef 16       	cp	r14, r31
    175e:	f3 e0       	ldi	r31, 0x03	; 3
    1760:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1762:	21 f4       	brne	.+8      	; 0x176c <usart_init_spi+0xa6>
    1764:	64 e0       	ldi	r22, 0x04	; 4
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	9d d8       	rcall	.-3782   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    176a:	72 c1       	rjmp	.+740    	; 0x1a50 <usart_init_spi+0x38a>
    176c:	e1 14       	cp	r14, r1
    176e:	38 e0       	ldi	r19, 0x08	; 8
    1770:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1772:	21 f4       	brne	.+8      	; 0x177c <usart_init_spi+0xb6>
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	95 d8       	rcall	.-3798   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    177a:	6a c1       	rjmp	.+724    	; 0x1a50 <usart_init_spi+0x38a>
    177c:	e1 14       	cp	r14, r1
    177e:	89 e0       	ldi	r24, 0x09	; 9
    1780:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1782:	21 f4       	brne	.+8      	; 0x178c <usart_init_spi+0xc6>
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	8d d8       	rcall	.-3814   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    178a:	62 c1       	rjmp	.+708    	; 0x1a50 <usart_init_spi+0x38a>
    178c:	e1 14       	cp	r14, r1
    178e:	ea e0       	ldi	r30, 0x0A	; 10
    1790:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1792:	21 f4       	brne	.+8      	; 0x179c <usart_init_spi+0xd6>
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	85 e0       	ldi	r24, 0x05	; 5
    1798:	85 d8       	rcall	.-3830   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    179a:	5a c1       	rjmp	.+692    	; 0x1a50 <usart_init_spi+0x38a>
    179c:	e1 14       	cp	r14, r1
    179e:	fb e0       	ldi	r31, 0x0B	; 11
    17a0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    17a2:	21 f4       	brne	.+8      	; 0x17ac <usart_init_spi+0xe6>
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	7d d8       	rcall	.-3846   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    17aa:	52 c1       	rjmp	.+676    	; 0x1a50 <usart_init_spi+0x38a>
    17ac:	30 e4       	ldi	r19, 0x40	; 64
    17ae:	e3 16       	cp	r14, r19
    17b0:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    17b2:	f3 06       	cpc	r15, r19
    17b4:	21 f4       	brne	.+8      	; 0x17be <usart_init_spi+0xf8>
    17b6:	62 e0       	ldi	r22, 0x02	; 2
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	74 d8       	rcall	.-3864   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    17bc:	49 c1       	rjmp	.+658    	; 0x1a50 <usart_init_spi+0x38a>
    17be:	80 e4       	ldi	r24, 0x40	; 64
    17c0:	e8 16       	cp	r14, r24
    17c2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    17c4:	f8 06       	cpc	r15, r24
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <usart_init_spi+0x10a>
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	6b d8       	rcall	.-3882   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    17ce:	40 c1       	rjmp	.+640    	; 0x1a50 <usart_init_spi+0x38a>
    17d0:	e0 e4       	ldi	r30, 0x40	; 64
    17d2:	ee 16       	cp	r14, r30
    17d4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    17d6:	fe 06       	cpc	r15, r30
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <usart_init_spi+0x11c>
    17da:	62 e0       	ldi	r22, 0x02	; 2
    17dc:	85 e0       	ldi	r24, 0x05	; 5
    17de:	62 d8       	rcall	.-3900   	; 0x8a4 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    17e0:	37 c1       	rjmp	.+622    	; 0x1a50 <usart_init_spi+0x38a>
    17e2:	f0 e9       	ldi	r31, 0x90	; 144
    17e4:	ef 16       	cp	r14, r31
    17e6:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    17e8:	ff 06       	cpc	r15, r31
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <usart_init_spi+0x12e>
    17ec:	64 e0       	ldi	r22, 0x04	; 4
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	59 d8       	rcall	.-3918   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    17f2:	2e c1       	rjmp	.+604    	; 0x1a50 <usart_init_spi+0x38a>
    17f4:	30 e9       	ldi	r19, 0x90	; 144
    17f6:	e3 16       	cp	r14, r19
    17f8:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    17fa:	f3 06       	cpc	r15, r19
    17fc:	21 f4       	brne	.+8      	; 0x1806 <usart_init_spi+0x140>
    17fe:	64 e0       	ldi	r22, 0x04	; 4
    1800:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1802:	50 d8       	rcall	.-3936   	; 0x8a4 <sysclk_enable_module>
    1804:	25 c1       	rjmp	.+586    	; 0x1a50 <usart_init_spi+0x38a>
    1806:	80 e9       	ldi	r24, 0x90	; 144
    1808:	e8 16       	cp	r14, r24
    180a:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    180c:	f8 06       	cpc	r15, r24
    180e:	21 f4       	brne	.+8      	; 0x1818 <usart_init_spi+0x152>
    1810:	64 e0       	ldi	r22, 0x04	; 4
    1812:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1814:	47 d8       	rcall	.-3954   	; 0x8a4 <sysclk_enable_module>
    1816:	1c c1       	rjmp	.+568    	; 0x1a50 <usart_init_spi+0x38a>
    1818:	e0 e9       	ldi	r30, 0x90	; 144
    181a:	ee 16       	cp	r14, r30
    181c:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    181e:	fe 06       	cpc	r15, r30
    1820:	21 f4       	brne	.+8      	; 0x182a <usart_init_spi+0x164>
    1822:	64 e0       	ldi	r22, 0x04	; 4
    1824:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1826:	3e d8       	rcall	.-3972   	; 0x8a4 <sysclk_enable_module>
    1828:	13 c1       	rjmp	.+550    	; 0x1a50 <usart_init_spi+0x38a>
    182a:	f0 ec       	ldi	r31, 0xC0	; 192
    182c:	ef 16       	cp	r14, r31
    182e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1830:	ff 06       	cpc	r15, r31
    1832:	21 f4       	brne	.+8      	; 0x183c <usart_init_spi+0x176>
    1834:	68 e0       	ldi	r22, 0x08	; 8
    1836:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1838:	35 d8       	rcall	.-3990   	; 0x8a4 <sysclk_enable_module>
    183a:	0a c1       	rjmp	.+532    	; 0x1a50 <usart_init_spi+0x38a>
    183c:	30 ec       	ldi	r19, 0xC0	; 192
    183e:	e3 16       	cp	r14, r19
    1840:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1842:	f3 06       	cpc	r15, r19
    1844:	21 f4       	brne	.+8      	; 0x184e <usart_init_spi+0x188>
    1846:	68 e0       	ldi	r22, 0x08	; 8
    1848:	84 e0       	ldi	r24, 0x04	; 4
    184a:	2c d8       	rcall	.-4008   	; 0x8a4 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    184c:	01 c1       	rjmp	.+514    	; 0x1a50 <usart_init_spi+0x38a>
    184e:	80 ea       	ldi	r24, 0xA0	; 160
    1850:	e8 16       	cp	r14, r24
    1852:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1854:	f8 06       	cpc	r15, r24
    1856:	61 f4       	brne	.+24     	; 0x1870 <usart_init_spi+0x1aa>
    1858:	60 e1       	ldi	r22, 0x10	; 16
    185a:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    185c:	23 d8       	rcall	.-4026   	; 0x8a4 <sysclk_enable_module>
    185e:	e0 ea       	ldi	r30, 0xA0	; 160
    1860:	f8 e0       	ldi	r31, 0x08	; 8
    1862:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1864:	8f 7e       	andi	r24, 0xEF	; 239
    1866:	84 83       	std	Z+4, r24	; 0x04
    1868:	f8 01       	movw	r30, r16
    186a:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    186c:	22 50       	subi	r18, 0x02	; 2
    186e:	50 c0       	rjmp	.+160    	; 0x1910 <usart_init_spi+0x24a>
    1870:	f0 ea       	ldi	r31, 0xA0	; 160
    1872:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1874:	f9 e0       	ldi	r31, 0x09	; 9
    1876:	ff 06       	cpc	r15, r31
    1878:	21 f4       	brne	.+8      	; 0x1882 <usart_init_spi+0x1bc>
    187a:	60 e1       	ldi	r22, 0x10	; 16
    187c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    187e:	12 d8       	rcall	.-4060   	; 0x8a4 <sysclk_enable_module>
    1880:	e7 c0       	rjmp	.+462    	; 0x1a50 <usart_init_spi+0x38a>
    1882:	30 ea       	ldi	r19, 0xA0	; 160
    1884:	e3 16       	cp	r14, r19
    1886:	3a e0       	ldi	r19, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1888:	f3 06       	cpc	r15, r19
    188a:	21 f4       	brne	.+8      	; 0x1894 <usart_init_spi+0x1ce>
    188c:	60 e1       	ldi	r22, 0x10	; 16
    188e:	85 e0       	ldi	r24, 0x05	; 5
    1890:	09 d8       	rcall	.-4078   	; 0x8a4 <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1892:	de c0       	rjmp	.+444    	; 0x1a50 <usart_init_spi+0x38a>
    1894:	80 ea       	ldi	r24, 0xA0	; 160
    1896:	e8 16       	cp	r14, r24
    1898:	8b e0       	ldi	r24, 0x0B	; 11
    189a:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    189c:	21 f4       	brne	.+8      	; 0x18a6 <usart_init_spi+0x1e0>
    189e:	60 e1       	ldi	r22, 0x10	; 16
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	00 d8       	rcall	.-4096   	; 0x8a4 <sysclk_enable_module>
    18a4:	d5 c0       	rjmp	.+426    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    18a6:	e0 eb       	ldi	r30, 0xB0	; 176
    18a8:	ee 16       	cp	r14, r30
    18aa:	e8 e0       	ldi	r30, 0x08	; 8
    18ac:	fe 06       	cpc	r15, r30
    18ae:	29 f4       	brne	.+10     	; 0x18ba <usart_init_spi+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    18b0:	60 e2       	ldi	r22, 0x20	; 32
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <sysclk_enable_module>
    18b8:	cb c0       	rjmp	.+406    	; 0x1a50 <usart_init_spi+0x38a>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    18ba:	f0 eb       	ldi	r31, 0xB0	; 176
    18bc:	ef 16       	cp	r14, r31
    18be:	f9 e0       	ldi	r31, 0x09	; 9
    18c0:	ff 06       	cpc	r15, r31
    18c2:	29 f4       	brne	.+10     	; 0x18ce <usart_init_spi+0x208>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    18c4:	60 e2       	ldi	r22, 0x20	; 32
    18c6:	84 e0       	ldi	r24, 0x04	; 4
    18c8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <sysclk_enable_module>
    18cc:	c1 c0       	rjmp	.+386    	; 0x1a50 <usart_init_spi+0x38a>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    18ce:	30 e8       	ldi	r19, 0x80	; 128
    18d0:	e3 16       	cp	r14, r19
    18d2:	34 e0       	ldi	r19, 0x04	; 4
    18d4:	f3 06       	cpc	r15, r19
    18d6:	29 f4       	brne	.+10     	; 0x18e2 <usart_init_spi+0x21c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    18d8:	60 e4       	ldi	r22, 0x40	; 64
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <sysclk_enable_module>
    18e0:	b7 c0       	rjmp	.+366    	; 0x1a50 <usart_init_spi+0x38a>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    18e2:	80 ea       	ldi	r24, 0xA0	; 160
    18e4:	e8 16       	cp	r14, r24
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	f8 06       	cpc	r15, r24
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <usart_init_spi+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    18ec:	60 e4       	ldi	r22, 0x40	; 64
    18ee:	85 e0       	ldi	r24, 0x05	; 5
    18f0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <sysclk_enable_module>
    18f4:	ad c0       	rjmp	.+346    	; 0x1a50 <usart_init_spi+0x38a>
    18f6:	f7 01       	movw	r30, r14
    18f8:	84 81       	ldd	r24, Z+4	; 0x04
    18fa:	8f 7e       	andi	r24, 0xEF	; 239
    18fc:	84 83       	std	Z+4, r24	; 0x04
    18fe:	fb 01       	movw	r30, r22
    1900:	24 81       	ldd	r18, Z+4	; 0x04
    1902:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1904:	c7 01       	movw	r24, r14
    1906:	f0 ea       	ldi	r31, 0xA0	; 160
    1908:	ef 16       	cp	r14, r31
    190a:	f8 e0       	ldi	r31, 0x08	; 8
    190c:	ff 06       	cpc	r15, r31
    190e:	49 f4       	brne	.+18     	; 0x1922 <usart_init_spi+0x25c>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1910:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
    1914:	84 fd       	sbrc	r24, 4
    1916:	a5 c0       	rjmp	.+330    	; 0x1a62 <usart_init_spi+0x39c>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1918:	0f 2e       	mov	r0, r31
    191a:	f1 e1       	ldi	r31, 0x11	; 17
    191c:	df 2e       	mov	r13, r31
    191e:	f0 2d       	mov	r31, r0
    1920:	a4 c0       	rjmp	.+328    	; 0x1a6a <usart_init_spi+0x3a4>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1922:	80 3b       	cpi	r24, 0xB0	; 176
    1924:	38 e0       	ldi	r19, 0x08	; 8
    1926:	93 07       	cpc	r25, r19
    1928:	91 f0       	breq	.+36     	; 0x194e <usart_init_spi+0x288>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    192a:	80 3a       	cpi	r24, 0xA0	; 160
    192c:	e9 e0       	ldi	r30, 0x09	; 9
    192e:	9e 07       	cpc	r25, r30
    1930:	49 f4       	brne	.+18     	; 0x1944 <usart_init_spi+0x27e>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1932:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
    1936:	34 fd       	sbrc	r19, 4
    1938:	9b c0       	rjmp	.+310    	; 0x1a70 <usart_init_spi+0x3aa>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    193a:	0f 2e       	mov	r0, r31
    193c:	f9 e1       	ldi	r31, 0x19	; 25
    193e:	df 2e       	mov	r13, r31
    1940:	f0 2d       	mov	r31, r0
    1942:	16 c0       	rjmp	.+44     	; 0x1970 <usart_init_spi+0x2aa>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1944:	80 3b       	cpi	r24, 0xB0	; 176
    1946:	f9 e0       	ldi	r31, 0x09	; 9
    1948:	9f 07       	cpc	r25, r31
    194a:	f1 f0       	breq	.+60     	; 0x1988 <usart_init_spi+0x2c2>
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <usart_init_spi+0x290>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    194e:	0f 2e       	mov	r0, r31
    1950:	f5 e1       	ldi	r31, 0x15	; 21
    1952:	df 2e       	mov	r13, r31
    1954:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1956:	80 3a       	cpi	r24, 0xA0	; 160
    1958:	3a e0       	ldi	r19, 0x0A	; 10
    195a:	93 07       	cpc	r25, r19
    195c:	49 f4       	brne	.+18     	; 0x1970 <usart_init_spi+0x2aa>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    195e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
    1962:	84 fd       	sbrc	r24, 4
    1964:	8a c0       	rjmp	.+276    	; 0x1a7a <usart_init_spi+0x3b4>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1966:	0f 2e       	mov	r0, r31
    1968:	f1 e2       	ldi	r31, 0x21	; 33
    196a:	df 2e       	mov	r13, r31
    196c:	f0 2d       	mov	r31, r0
    196e:	15 c0       	rjmp	.+42     	; 0x199a <usart_init_spi+0x2d4>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1970:	80 3a       	cpi	r24, 0xA0	; 160
    1972:	9b 40       	sbci	r25, 0x0B	; 11
    1974:	91 f4       	brne	.+36     	; 0x199a <usart_init_spi+0x2d4>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1976:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
    197a:	84 fd       	sbrc	r24, 4
    197c:	0a c0       	rjmp	.+20     	; 0x1992 <usart_init_spi+0x2cc>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    197e:	0f 2e       	mov	r0, r31
    1980:	f9 e2       	ldi	r31, 0x29	; 41
    1982:	df 2e       	mov	r13, r31
    1984:	f0 2d       	mov	r31, r0
    1986:	09 c0       	rjmp	.+18     	; 0x199a <usart_init_spi+0x2d4>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1988:	0f 2e       	mov	r0, r31
    198a:	fd e1       	ldi	r31, 0x1D	; 29
    198c:	df 2e       	mov	r13, r31
    198e:	f0 2d       	mov	r31, r0
    1990:	04 c0       	rjmp	.+8      	; 0x199a <usart_init_spi+0x2d4>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1992:	0f 2e       	mov	r0, r31
    1994:	fd e2       	ldi	r31, 0x2D	; 45
    1996:	df 2e       	mov	r13, r31
    1998:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    199a:	ed 2d       	mov	r30, r13
    199c:	e6 95       	lsr	r30
    199e:	e6 95       	lsr	r30
    19a0:	e6 95       	lsr	r30
    19a2:	30 e2       	ldi	r19, 0x20	; 32
    19a4:	e3 9f       	mul	r30, r19
    19a6:	f0 01       	movw	r30, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	fa 5f       	subi	r31, 0xFA	; 250
    19ac:	3d 2d       	mov	r19, r13
    19ae:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	03 2e       	mov	r0, r19
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <usart_init_spi+0x2f6>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <usart_init_spi+0x2f2>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    19c0:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	10 f0       	brcs	.+4      	; 0x19ca <usart_init_spi+0x304>
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <usart_init_spi+0x306>
    19ca:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    19cc:	df 01       	movw	r26, r30
    19ce:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    19d0:	a3 0f       	add	r26, r19
    19d2:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19d4:	9f b7       	in	r25, 0x3f	; 63
    19d6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    19d8:	f8 94       	cli
	return flags;
    19da:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    19dc:	2c 91       	ld	r18, X
    19de:	27 70       	andi	r18, 0x07	; 7
    19e0:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    19e2:	9c 91       	ld	r25, X
    19e4:	94 2b       	or	r25, r20
    19e6:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19e8:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    19ea:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    19ec:	f7 01       	movw	r30, r14
    19ee:	85 81       	ldd	r24, Z+5	; 0x05
    19f0:	80 6c       	ori	r24, 0xC0	; 192
    19f2:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    19f4:	f8 01       	movw	r30, r16
    19f6:	84 81       	ldd	r24, Z+4	; 0x04
    19f8:	8d 7f       	andi	r24, 0xFD	; 253
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	29 f4       	brne	.+10     	; 0x1a08 <usart_init_spi+0x342>
		usart->CTRLC |= USART_UCPHA_bm;
    19fe:	f7 01       	movw	r30, r14
    1a00:	85 81       	ldd	r24, Z+5	; 0x05
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	85 83       	std	Z+5, r24	; 0x05
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <usart_init_spi+0x34a>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1a08:	f7 01       	movw	r30, r14
    1a0a:	85 81       	ldd	r24, Z+5	; 0x05
    1a0c:	8d 7f       	andi	r24, 0xFD	; 253
    1a0e:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    1a10:	f8 01       	movw	r30, r16
    1a12:	85 81       	ldd	r24, Z+5	; 0x05
    1a14:	88 23       	and	r24, r24
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <usart_init_spi+0x35c>
		(usart)->CTRLC |= USART_DORD_bm;
    1a18:	f7 01       	movw	r30, r14
    1a1a:	85 81       	ldd	r24, Z+5	; 0x05
    1a1c:	84 60       	ori	r24, 0x04	; 4
    1a1e:	85 83       	std	Z+5, r24	; 0x05
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <usart_init_spi+0x364>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1a22:	f7 01       	movw	r30, r14
    1a24:	85 81       	ldd	r24, Z+5	; 0x05
    1a26:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1a28:	85 83       	std	Z+5, r24	; 0x05
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	40 81       	ld	r20, Z
    1a2e:	51 81       	ldd	r21, Z+1	; 0x01
    1a30:	62 81       	ldd	r22, Z+2	; 0x02
    1a32:	73 81       	ldd	r23, Z+3	; 0x03
    1a34:	00 e8       	ldi	r16, 0x80	; 128
    1a36:	14 e8       	ldi	r17, 0x84	; 132
    1a38:	2e e1       	ldi	r18, 0x1E	; 30
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	11 de       	rcall	.-990    	; 0x1662 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1a40:	f7 01       	movw	r30, r14
    1a42:	84 81       	ldd	r24, Z+4	; 0x04
    1a44:	88 60       	ori	r24, 0x08	; 8
    1a46:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1a48:	84 81       	ldd	r24, Z+4	; 0x04
    1a4a:	80 61       	ori	r24, 0x10	; 16
    1a4c:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1a4e:	1a c0       	rjmp	.+52     	; 0x1a84 <usart_init_spi+0x3be>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1a50:	f7 01       	movw	r30, r14
    1a52:	84 81       	ldd	r24, Z+4	; 0x04
    1a54:	8f 7e       	andi	r24, 0xEF	; 239
    1a56:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1a58:	f8 01       	movw	r30, r16
    1a5a:	24 81       	ldd	r18, Z+4	; 0x04
    1a5c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1a5e:	c7 01       	movw	r24, r14
    1a60:	60 cf       	rjmp	.-320    	; 0x1922 <usart_init_spi+0x25c>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1a62:	0f 2e       	mov	r0, r31
    1a64:	f5 e1       	ldi	r31, 0x15	; 21
    1a66:	df 2e       	mov	r13, r31
    1a68:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1a6a:	80 ea       	ldi	r24, 0xA0	; 160
    1a6c:	98 e0       	ldi	r25, 0x08	; 8
    1a6e:	6a cf       	rjmp	.-300    	; 0x1944 <usart_init_spi+0x27e>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1a70:	0f 2e       	mov	r0, r31
    1a72:	fd e1       	ldi	r31, 0x1D	; 29
    1a74:	df 2e       	mov	r13, r31
    1a76:	f0 2d       	mov	r31, r0
    1a78:	7b cf       	rjmp	.-266    	; 0x1970 <usart_init_spi+0x2aa>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f5 e2       	ldi	r31, 0x25	; 37
    1a7e:	df 2e       	mov	r13, r31
    1a80:	f0 2d       	mov	r31, r0
    1a82:	8b cf       	rjmp	.-234    	; 0x199a <usart_init_spi+0x2d4>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1a84:	0f 90       	pop	r0
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	df 90       	pop	r13
    1a94:	08 95       	ret

00001a96 <usart_sendString>:
	return adc_get_result(&ADCA, ADC_CH0);
}

// Inisialisasi sensor PIR
void PIR_Init(void) {
	PORTC.DIRCLR = PIR_SENSOR_PIN; // Set pin PIR sebagai input
    1a96:	fc 01       	movw	r30, r24
    1a98:	20 81       	ld	r18, Z
    1a9a:	22 23       	and	r18, r18
    1a9c:	59 f0       	breq	.+22     	; 0x1ab4 <usart_sendString+0x1e>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	e0 ea       	ldi	r30, 0xA0	; 160
    1aa4:	f8 e0       	ldi	r31, 0x08	; 8
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	95 ff       	sbrs	r25, 5
    1aaa:	fd cf       	rjmp	.-6      	; 0x1aa6 <usart_sendString+0x10>
    1aac:	20 83       	st	Z, r18
    1aae:	2d 91       	ld	r18, X+
    1ab0:	21 11       	cpse	r18, r1
    1ab2:	f9 cf       	rjmp	.-14     	; 0x1aa6 <usart_sendString+0x10>
    1ab4:	08 95       	ret

00001ab6 <prvCopyDataToQueue>:
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	ec 01       	movw	r28, r24
    1abe:	14 2f       	mov	r17, r20
    1ac0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1ac2:	44 23       	and	r20, r20
    1ac4:	d9 f1       	breq	.+118    	; 0x1b3c <prvCopyDataToQueue+0x86>
    1ac6:	11 11       	cpse	r17, r1
    1ac8:	16 c0       	rjmp	.+44     	; 0x1af6 <prvCopyDataToQueue+0x40>
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	0e 94 cb 1a 	call	0x3596	; 0x3596 <memcpy>
    1ad4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ada:	82 0f       	add	r24, r18
    1adc:	91 1d       	adc	r25, r1
    1ade:	8c 83       	std	Y+4, r24	; 0x04
    1ae0:	9d 83       	std	Y+5, r25	; 0x05
    1ae2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae6:	82 17       	cp	r24, r18
    1ae8:	93 07       	cpc	r25, r19
    1aea:	40 f1       	brcs	.+80     	; 0x1b3c <prvCopyDataToQueue+0x86>
    1aec:	88 81       	ld	r24, Y
    1aee:	99 81       	ldd	r25, Y+1	; 0x01
    1af0:	8c 83       	std	Y+4, r24	; 0x04
    1af2:	9d 83       	std	Y+5, r25	; 0x05
    1af4:	23 c0       	rjmp	.+70     	; 0x1b3c <prvCopyDataToQueue+0x86>
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	9f 81       	ldd	r25, Y+7	; 0x07
    1afc:	0e 94 cb 1a 	call	0x3596	; 0x3596 <memcpy>
    1b00:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	91 95       	neg	r25
    1b06:	81 95       	neg	r24
    1b08:	91 09       	sbc	r25, r1
    1b0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b0e:	28 0f       	add	r18, r24
    1b10:	39 1f       	adc	r19, r25
    1b12:	2e 83       	std	Y+6, r18	; 0x06
    1b14:	3f 83       	std	Y+7, r19	; 0x07
    1b16:	48 81       	ld	r20, Y
    1b18:	59 81       	ldd	r21, Y+1	; 0x01
    1b1a:	24 17       	cp	r18, r20
    1b1c:	35 07       	cpc	r19, r21
    1b1e:	30 f4       	brcc	.+12     	; 0x1b2c <prvCopyDataToQueue+0x76>
    1b20:	2a 81       	ldd	r18, Y+2	; 0x02
    1b22:	3b 81       	ldd	r19, Y+3	; 0x03
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	8e 83       	std	Y+6, r24	; 0x06
    1b2a:	9f 83       	std	Y+7, r25	; 0x07
    1b2c:	12 30       	cpi	r17, 0x02	; 2
    1b2e:	31 f4       	brne	.+12     	; 0x1b3c <prvCopyDataToQueue+0x86>
    1b30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b32:	88 23       	and	r24, r24
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <prvCopyDataToQueue+0x86>
    1b36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b38:	81 50       	subi	r24, 0x01	; 1
    1b3a:	8a 8f       	std	Y+26, r24	; 0x1a
    1b3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	8a 8f       	std	Y+26, r24	; 0x1a
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	08 95       	ret

00001b4c <prvCopyDataFromQueue>:
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1b50:	44 23       	and	r20, r20
    1b52:	a9 f0       	breq	.+42     	; 0x1b7e <prvCopyDataFromQueue+0x32>
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	26 81       	ldd	r18, Z+6	; 0x06
    1b58:	37 81       	ldd	r19, Z+7	; 0x07
    1b5a:	24 0f       	add	r18, r20
    1b5c:	35 1f       	adc	r19, r21
    1b5e:	26 83       	std	Z+6, r18	; 0x06
    1b60:	37 83       	std	Z+7, r19	; 0x07
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	20 f0       	brcs	.+8      	; 0x1b74 <prvCopyDataFromQueue+0x28>
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	86 83       	std	Z+6, r24	; 0x06
    1b72:	97 83       	std	Z+7, r25	; 0x07
    1b74:	cb 01       	movw	r24, r22
    1b76:	66 81       	ldd	r22, Z+6	; 0x06
    1b78:	77 81       	ldd	r23, Z+7	; 0x07
    1b7a:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <memcpy>
    1b7e:	08 95       	ret

00001b80 <vTaskSuspendAll>:
    1b80:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	80 93 3d 23 	sts	0x233D, r24	; 0x80233d <uxSchedulerSuspended>
    1b8a:	08 95       	ret

00001b8c <xTaskGetTickCount>:
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	0f 92       	push	r0
    1b92:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <xTickCount>
    1b96:	90 91 45 23 	lds	r25, 0x2345	; 0x802345 <xTickCount+0x1>
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	08 95       	ret

00001ba0 <vTaskSwitchContext>:
    1ba0:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    1ba4:	88 23       	and	r24, r24
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <vTaskSwitchContext+0x10>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <xYieldPending>
    1bae:	08 95       	ret
    1bb0:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <xYieldPending>
    1bb4:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <uxTopReadyPriority>
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	fc 01       	movw	r30, r24
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	8e 0f       	add	r24, r30
    1bca:	9f 1f       	adc	r25, r31
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ea 59       	subi	r30, 0x9A	; 154
    1bd0:	fc 4d       	sbci	r31, 0xDC	; 220
    1bd2:	80 81       	ld	r24, Z
    1bd4:	81 11       	cpse	r24, r1
    1bd6:	17 c0       	rjmp	.+46     	; 0x1c06 <vTaskSwitchContext+0x66>
    1bd8:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <uxTopReadyPriority>
    1bdc:	81 50       	subi	r24, 0x01	; 1
    1bde:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <uxTopReadyPriority>
    1be2:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <uxTopReadyPriority>
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	fc 01       	movw	r30, r24
    1bea:	ee 0f       	add	r30, r30
    1bec:	ff 1f       	adc	r31, r31
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	8e 0f       	add	r24, r30
    1bf8:	9f 1f       	adc	r25, r31
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	ea 59       	subi	r30, 0x9A	; 154
    1bfe:	fc 4d       	sbci	r31, 0xDC	; 220
    1c00:	80 81       	ld	r24, Z
    1c02:	88 23       	and	r24, r24
    1c04:	49 f3       	breq	.-46     	; 0x1bd8 <vTaskSwitchContext+0x38>
    1c06:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <uxTopReadyPriority>
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	22 0f       	add	r18, r18
    1c14:	33 1f       	adc	r19, r19
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	28 0f       	add	r18, r24
    1c1c:	39 1f       	adc	r19, r25
    1c1e:	d9 01       	movw	r26, r18
    1c20:	aa 59       	subi	r26, 0x9A	; 154
    1c22:	bc 4d       	sbci	r27, 0xDC	; 220
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	12 97       	sbiw	r26, 0x02	; 2
    1c2c:	02 80       	ldd	r0, Z+2	; 0x02
    1c2e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c30:	e0 2d       	mov	r30, r0
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	ed 93       	st	X+, r30
    1c36:	fc 93       	st	X, r31
    1c38:	12 97       	sbiw	r26, 0x02	; 2
    1c3a:	27 59       	subi	r18, 0x97	; 151
    1c3c:	3c 4d       	sbci	r19, 0xDC	; 220
    1c3e:	e2 17       	cp	r30, r18
    1c40:	f3 07       	cpc	r31, r19
    1c42:	29 f4       	brne	.+10     	; 0x1c4e <vTaskSwitchContext+0xae>
    1c44:	22 81       	ldd	r18, Z+2	; 0x02
    1c46:	33 81       	ldd	r19, Z+3	; 0x03
    1c48:	fd 01       	movw	r30, r26
    1c4a:	21 83       	std	Z+1, r18	; 0x01
    1c4c:	32 83       	std	Z+2, r19	; 0x02
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	8e 0f       	add	r24, r30
    1c5e:	9f 1f       	adc	r25, r31
    1c60:	fc 01       	movw	r30, r24
    1c62:	ea 59       	subi	r30, 0x9A	; 154
    1c64:	fc 4d       	sbci	r31, 0xDC	; 220
    1c66:	01 80       	ldd	r0, Z+1	; 0x01
    1c68:	f2 81       	ldd	r31, Z+2	; 0x02
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	86 81       	ldd	r24, Z+6	; 0x06
    1c6e:	97 81       	ldd	r25, Z+7	; 0x07
    1c70:	80 93 93 23 	sts	0x2393, r24	; 0x802393 <pxCurrentTCB>
    1c74:	90 93 94 23 	sts	0x2394, r25	; 0x802394 <pxCurrentTCB+0x1>
    1c78:	08 95       	ret

00001c7a <vTaskSetTimeOutState>:
    1c7a:	20 91 3f 23 	lds	r18, 0x233F	; 0x80233f <xNumOfOverflows>
    1c7e:	fc 01       	movw	r30, r24
    1c80:	20 83       	st	Z, r18
    1c82:	20 91 44 23 	lds	r18, 0x2344	; 0x802344 <xTickCount>
    1c86:	30 91 45 23 	lds	r19, 0x2345	; 0x802345 <xTickCount+0x1>
    1c8a:	21 83       	std	Z+1, r18	; 0x01
    1c8c:	32 83       	std	Z+2, r19	; 0x02
    1c8e:	08 95       	ret

00001c90 <xTaskCheckForTimeOut>:
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	fc 01       	movw	r30, r24
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	0f 92       	push	r0
    1c9c:	20 91 44 23 	lds	r18, 0x2344	; 0x802344 <xTickCount>
    1ca0:	30 91 45 23 	lds	r19, 0x2345	; 0x802345 <xTickCount+0x1>
    1ca4:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <xNumOfOverflows>
    1ca8:	90 81       	ld	r25, Z
    1caa:	98 17       	cp	r25, r24
    1cac:	29 f0       	breq	.+10     	; 0x1cb8 <xTaskCheckForTimeOut+0x28>
    1cae:	81 81       	ldd	r24, Z+1	; 0x01
    1cb0:	92 81       	ldd	r25, Z+2	; 0x02
    1cb2:	28 17       	cp	r18, r24
    1cb4:	39 07       	cpc	r19, r25
    1cb6:	a8 f4       	brcc	.+42     	; 0x1ce2 <xTaskCheckForTimeOut+0x52>
    1cb8:	a1 81       	ldd	r26, Z+1	; 0x01
    1cba:	b2 81       	ldd	r27, Z+2	; 0x02
    1cbc:	eb 01       	movw	r28, r22
    1cbe:	48 81       	ld	r20, Y
    1cc0:	59 81       	ldd	r21, Y+1	; 0x01
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	8a 1b       	sub	r24, r26
    1cc6:	9b 0b       	sbc	r25, r27
    1cc8:	84 17       	cp	r24, r20
    1cca:	95 07       	cpc	r25, r21
    1ccc:	60 f4       	brcc	.+24     	; 0x1ce6 <xTaskCheckForTimeOut+0x56>
    1cce:	cf 01       	movw	r24, r30
    1cd0:	a2 1b       	sub	r26, r18
    1cd2:	b3 0b       	sbc	r27, r19
    1cd4:	4a 0f       	add	r20, r26
    1cd6:	5b 1f       	adc	r21, r27
    1cd8:	48 83       	st	Y, r20
    1cda:	59 83       	std	Y+1, r21	; 0x01
    1cdc:	ce df       	rcall	.-100    	; 0x1c7a <vTaskSetTimeOutState>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	03 c0       	rjmp	.+6      	; 0x1ce8 <xTaskCheckForTimeOut+0x58>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <xTaskCheckForTimeOut+0x58>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <xTaskGetSchedulerState>:
    1cf2:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <xSchedulerRunning>
    1cf6:	88 23       	and	r24, r24
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <xTaskGetSchedulerState+0x14>
    1cfa:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    1cfe:	88 23       	and	r24, r24
    1d00:	21 f0       	breq	.+8      	; 0x1d0a <xTaskGetSchedulerState+0x18>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	08 95       	ret
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	08 95       	ret
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	08 95       	ret

00001d0e <vListInitialise>:
    1d0e:	fc 01       	movw	r30, r24
    1d10:	03 96       	adiw	r24, 0x03	; 3
    1d12:	81 83       	std	Z+1, r24	; 0x01
    1d14:	92 83       	std	Z+2, r25	; 0x02
    1d16:	2f ef       	ldi	r18, 0xFF	; 255
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	23 83       	std	Z+3, r18	; 0x03
    1d1c:	34 83       	std	Z+4, r19	; 0x04
    1d1e:	85 83       	std	Z+5, r24	; 0x05
    1d20:	96 83       	std	Z+6, r25	; 0x06
    1d22:	87 83       	std	Z+7, r24	; 0x07
    1d24:	90 87       	std	Z+8, r25	; 0x08
    1d26:	10 82       	st	Z, r1
    1d28:	08 95       	ret

00001d2a <vListInsertEnd>:
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	9c 01       	movw	r18, r24
    1d30:	fb 01       	movw	r30, r22
    1d32:	dc 01       	movw	r26, r24
    1d34:	11 96       	adiw	r26, 0x01	; 1
    1d36:	cd 91       	ld	r28, X+
    1d38:	dc 91       	ld	r29, X
    1d3a:	12 97       	sbiw	r26, 0x02	; 2
    1d3c:	c2 83       	std	Z+2, r28	; 0x02
    1d3e:	d3 83       	std	Z+3, r29	; 0x03
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	9d 81       	ldd	r25, Y+5	; 0x05
    1d44:	84 83       	std	Z+4, r24	; 0x04
    1d46:	95 83       	std	Z+5, r25	; 0x05
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	12 96       	adiw	r26, 0x02	; 2
    1d50:	6d 93       	st	X+, r22
    1d52:	7c 93       	st	X, r23
    1d54:	13 97       	sbiw	r26, 0x03	; 3
    1d56:	6c 83       	std	Y+4, r22	; 0x04
    1d58:	7d 83       	std	Y+5, r23	; 0x05
    1d5a:	20 87       	std	Z+8, r18	; 0x08
    1d5c:	31 87       	std	Z+9, r19	; 0x09
    1d5e:	f9 01       	movw	r30, r18
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	80 83       	st	Z, r24
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <vListInsert>:
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	eb 01       	movw	r28, r22
    1d72:	48 81       	ld	r20, Y
    1d74:	59 81       	ldd	r21, Y+1	; 0x01
    1d76:	4f 3f       	cpi	r20, 0xFF	; 255
    1d78:	2f ef       	ldi	r18, 0xFF	; 255
    1d7a:	52 07       	cpc	r21, r18
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <vListInsert+0x1a>
    1d7e:	fc 01       	movw	r30, r24
    1d80:	a7 81       	ldd	r26, Z+7	; 0x07
    1d82:	b0 85       	ldd	r27, Z+8	; 0x08
    1d84:	0d c0       	rjmp	.+26     	; 0x1da0 <vListInsert+0x34>
    1d86:	dc 01       	movw	r26, r24
    1d88:	13 96       	adiw	r26, 0x03	; 3
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <vListInsert+0x22>
    1d8c:	df 01       	movw	r26, r30
    1d8e:	12 96       	adiw	r26, 0x02	; 2
    1d90:	ed 91       	ld	r30, X+
    1d92:	fc 91       	ld	r31, X
    1d94:	13 97       	sbiw	r26, 0x03	; 3
    1d96:	20 81       	ld	r18, Z
    1d98:	31 81       	ldd	r19, Z+1	; 0x01
    1d9a:	42 17       	cp	r20, r18
    1d9c:	53 07       	cpc	r21, r19
    1d9e:	b0 f7       	brcc	.-20     	; 0x1d8c <vListInsert+0x20>
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	13 97       	sbiw	r26, 0x03	; 3
    1da8:	ea 83       	std	Y+2, r30	; 0x02
    1daa:	fb 83       	std	Y+3, r31	; 0x03
    1dac:	c4 83       	std	Z+4, r28	; 0x04
    1dae:	d5 83       	std	Z+5, r29	; 0x05
    1db0:	ac 83       	std	Y+4, r26	; 0x04
    1db2:	bd 83       	std	Y+5, r27	; 0x05
    1db4:	12 96       	adiw	r26, 0x02	; 2
    1db6:	cd 93       	st	X+, r28
    1db8:	dc 93       	st	X, r29
    1dba:	13 97       	sbiw	r26, 0x03	; 3
    1dbc:	88 87       	std	Y+8, r24	; 0x08
    1dbe:	99 87       	std	Y+9, r25	; 0x09
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 81       	ld	r18, Z
    1dc4:	2f 5f       	subi	r18, 0xFF	; 255
    1dc6:	20 83       	st	Z, r18
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <prvAddCurrentTaskToDelayedList>:
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ec 01       	movw	r28, r24
    1dd4:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    1dd8:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    1ddc:	82 83       	std	Z+2, r24	; 0x02
    1dde:	93 83       	std	Z+3, r25	; 0x03
    1de0:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <xTickCount>
    1de4:	90 91 45 23 	lds	r25, 0x2345	; 0x802345 <xTickCount+0x1>
    1de8:	c8 17       	cp	r28, r24
    1dea:	d9 07       	cpc	r29, r25
    1dec:	60 f4       	brcc	.+24     	; 0x1e06 <prvAddCurrentTaskToDelayedList+0x38>
    1dee:	60 91 93 23 	lds	r22, 0x2393	; 0x802393 <pxCurrentTCB>
    1df2:	70 91 94 23 	lds	r23, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    1df6:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <pxOverflowDelayedTaskList>
    1dfa:	90 91 51 23 	lds	r25, 0x2351	; 0x802351 <pxOverflowDelayedTaskList+0x1>
    1dfe:	6e 5f       	subi	r22, 0xFE	; 254
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	b4 df       	rcall	.-152    	; 0x1d6c <vListInsert>
    1e04:	16 c0       	rjmp	.+44     	; 0x1e32 <prvAddCurrentTaskToDelayedList+0x64>
    1e06:	60 91 93 23 	lds	r22, 0x2393	; 0x802393 <pxCurrentTCB>
    1e0a:	70 91 94 23 	lds	r23, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    1e0e:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <pxDelayedTaskList>
    1e12:	90 91 53 23 	lds	r25, 0x2353	; 0x802353 <pxDelayedTaskList+0x1>
    1e16:	6e 5f       	subi	r22, 0xFE	; 254
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	a8 df       	rcall	.-176    	; 0x1d6c <vListInsert>
    1e1c:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <xNextTaskUnblockTime>
    1e20:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <xNextTaskUnblockTime+0x1>
    1e24:	c8 17       	cp	r28, r24
    1e26:	d9 07       	cpc	r29, r25
    1e28:	20 f4       	brcc	.+8      	; 0x1e32 <prvAddCurrentTaskToDelayedList+0x64>
    1e2a:	c0 93 0d 20 	sts	0x200D, r28	; 0x80200d <xNextTaskUnblockTime>
    1e2e:	d0 93 0e 20 	sts	0x200E, r29	; 0x80200e <xNextTaskUnblockTime+0x1>
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <prvInsertTimerInActiveList>:
    1e38:	fc 01       	movw	r30, r24
    1e3a:	62 83       	std	Z+2, r22	; 0x02
    1e3c:	73 83       	std	Z+3, r23	; 0x03
    1e3e:	80 87       	std	Z+8, r24	; 0x08
    1e40:	91 87       	std	Z+9, r25	; 0x09
    1e42:	46 17       	cp	r20, r22
    1e44:	57 07       	cpc	r21, r23
    1e46:	88 f0       	brcs	.+34     	; 0x1e6a <prvInsertTimerInActiveList+0x32>
    1e48:	42 1b       	sub	r20, r18
    1e4a:	53 0b       	sbc	r21, r19
    1e4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e4e:	95 85       	ldd	r25, Z+13	; 0x0d
    1e50:	48 17       	cp	r20, r24
    1e52:	59 07       	cpc	r21, r25
    1e54:	d0 f4       	brcc	.+52     	; 0x1e8a <prvInsertTimerInActiveList+0x52>
    1e56:	bf 01       	movw	r22, r30
    1e58:	6e 5f       	subi	r22, 0xFE	; 254
    1e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5c:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <pxOverflowTimerList>
    1e60:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <pxOverflowTimerList+0x1>
    1e64:	83 df       	rcall	.-250    	; 0x1d6c <vListInsert>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	08 95       	ret
    1e6a:	42 17       	cp	r20, r18
    1e6c:	53 07       	cpc	r21, r19
    1e6e:	18 f4       	brcc	.+6      	; 0x1e76 <prvInsertTimerInActiveList+0x3e>
    1e70:	62 17       	cp	r22, r18
    1e72:	73 07       	cpc	r23, r19
    1e74:	60 f4       	brcc	.+24     	; 0x1e8e <prvInsertTimerInActiveList+0x56>
    1e76:	bf 01       	movw	r22, r30
    1e78:	6e 5f       	subi	r22, 0xFE	; 254
    1e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7c:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <pxCurrentTimerList>
    1e80:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <pxCurrentTimerList+0x1>
    1e84:	73 df       	rcall	.-282    	; 0x1d6c <vListInsert>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	08 95       	ret
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	08 95       	ret
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	08 95       	ret

00001e92 <uxListRemove>:
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	fc 01       	movw	r30, r24
    1e98:	a0 85       	ldd	r26, Z+8	; 0x08
    1e9a:	b1 85       	ldd	r27, Z+9	; 0x09
    1e9c:	c2 81       	ldd	r28, Z+2	; 0x02
    1e9e:	d3 81       	ldd	r29, Z+3	; 0x03
    1ea0:	84 81       	ldd	r24, Z+4	; 0x04
    1ea2:	95 81       	ldd	r25, Z+5	; 0x05
    1ea4:	8c 83       	std	Y+4, r24	; 0x04
    1ea6:	9d 83       	std	Y+5, r25	; 0x05
    1ea8:	c4 81       	ldd	r28, Z+4	; 0x04
    1eaa:	d5 81       	ldd	r29, Z+5	; 0x05
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	11 96       	adiw	r26, 0x01	; 1
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9c 91       	ld	r25, X
    1eba:	12 97       	sbiw	r26, 0x02	; 2
    1ebc:	e8 17       	cp	r30, r24
    1ebe:	f9 07       	cpc	r31, r25
    1ec0:	31 f4       	brne	.+12     	; 0x1ece <uxListRemove+0x3c>
    1ec2:	84 81       	ldd	r24, Z+4	; 0x04
    1ec4:	95 81       	ldd	r25, Z+5	; 0x05
    1ec6:	11 96       	adiw	r26, 0x01	; 1
    1ec8:	8d 93       	st	X+, r24
    1eca:	9c 93       	st	X, r25
    1ecc:	12 97       	sbiw	r26, 0x02	; 2
    1ece:	10 86       	std	Z+8, r1	; 0x08
    1ed0:	11 86       	std	Z+9, r1	; 0x09
    1ed2:	8c 91       	ld	r24, X
    1ed4:	81 50       	subi	r24, 0x01	; 1
    1ed6:	8c 93       	st	X, r24
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	08 95       	ret

00001ede <xTaskIncrementTick>:
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	b3 c0       	rjmp	.+358    	; 0x205a <xTaskIncrementTick+0x17c>
    1ef4:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <xTickCount>
    1ef8:	90 91 45 23 	lds	r25, 0x2345	; 0x802345 <xTickCount+0x1>
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	80 93 44 23 	sts	0x2344, r24	; 0x802344 <xTickCount>
    1f02:	90 93 45 23 	sts	0x2345, r25	; 0x802345 <xTickCount+0x1>
    1f06:	e0 90 44 23 	lds	r14, 0x2344	; 0x802344 <xTickCount>
    1f0a:	f0 90 45 23 	lds	r15, 0x2345	; 0x802345 <xTickCount+0x1>
    1f0e:	e1 14       	cp	r14, r1
    1f10:	f1 04       	cpc	r15, r1
    1f12:	99 f5       	brne	.+102    	; 0x1f7a <xTaskIncrementTick+0x9c>
    1f14:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <pxDelayedTaskList>
    1f18:	90 91 53 23 	lds	r25, 0x2353	; 0x802353 <pxDelayedTaskList+0x1>
    1f1c:	20 91 50 23 	lds	r18, 0x2350	; 0x802350 <pxOverflowDelayedTaskList>
    1f20:	30 91 51 23 	lds	r19, 0x2351	; 0x802351 <pxOverflowDelayedTaskList+0x1>
    1f24:	20 93 52 23 	sts	0x2352, r18	; 0x802352 <pxDelayedTaskList>
    1f28:	30 93 53 23 	sts	0x2353, r19	; 0x802353 <pxDelayedTaskList+0x1>
    1f2c:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <pxOverflowDelayedTaskList>
    1f30:	90 93 51 23 	sts	0x2351, r25	; 0x802351 <pxOverflowDelayedTaskList+0x1>
    1f34:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <xNumOfOverflows>
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <xNumOfOverflows>
    1f3e:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <pxDelayedTaskList>
    1f42:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <pxDelayedTaskList+0x1>
    1f46:	80 81       	ld	r24, Z
    1f48:	81 11       	cpse	r24, r1
    1f4a:	07 c0       	rjmp	.+14     	; 0x1f5a <xTaskIncrementTick+0x7c>
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	9f ef       	ldi	r25, 0xFF	; 255
    1f50:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    1f54:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    1f58:	10 c0       	rjmp	.+32     	; 0x1f7a <xTaskIncrementTick+0x9c>
    1f5a:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <pxDelayedTaskList>
    1f5e:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <pxDelayedTaskList+0x1>
    1f62:	05 80       	ldd	r0, Z+5	; 0x05
    1f64:	f6 81       	ldd	r31, Z+6	; 0x06
    1f66:	e0 2d       	mov	r30, r0
    1f68:	06 80       	ldd	r0, Z+6	; 0x06
    1f6a:	f7 81       	ldd	r31, Z+7	; 0x07
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    1f76:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    1f7a:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <xNextTaskUnblockTime>
    1f7e:	90 91 0e 20 	lds	r25, 0x200E	; 0x80200e <xNextTaskUnblockTime+0x1>
    1f82:	e8 16       	cp	r14, r24
    1f84:	f9 06       	cpc	r15, r25
    1f86:	10 f4       	brcc	.+4      	; 0x1f8c <xTaskIncrementTick+0xae>
    1f88:	d1 2c       	mov	r13, r1
    1f8a:	4f c0       	rjmp	.+158    	; 0x202a <xTaskIncrementTick+0x14c>
    1f8c:	d1 2c       	mov	r13, r1
    1f8e:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <pxDelayedTaskList>
    1f92:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <pxDelayedTaskList+0x1>
    1f96:	80 81       	ld	r24, Z
    1f98:	81 11       	cpse	r24, r1
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <xTaskIncrementTick+0xcc>
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	9f ef       	ldi	r25, 0xFF	; 255
    1fa0:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    1fa4:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    1fa8:	40 c0       	rjmp	.+128    	; 0x202a <xTaskIncrementTick+0x14c>
    1faa:	e0 91 52 23 	lds	r30, 0x2352	; 0x802352 <pxDelayedTaskList>
    1fae:	f0 91 53 23 	lds	r31, 0x2353	; 0x802353 <pxDelayedTaskList+0x1>
    1fb2:	05 80       	ldd	r0, Z+5	; 0x05
    1fb4:	f6 81       	ldd	r31, Z+6	; 0x06
    1fb6:	e0 2d       	mov	r30, r0
    1fb8:	c6 81       	ldd	r28, Z+6	; 0x06
    1fba:	d7 81       	ldd	r29, Z+7	; 0x07
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	e8 16       	cp	r14, r24
    1fc2:	f9 06       	cpc	r15, r25
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <xTaskIncrementTick+0xf2>
    1fc6:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <xNextTaskUnblockTime>
    1fca:	90 93 0e 20 	sts	0x200E, r25	; 0x80200e <xNextTaskUnblockTime+0x1>
    1fce:	2d c0       	rjmp	.+90     	; 0x202a <xTaskIncrementTick+0x14c>
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	0e 5f       	subi	r16, 0xFE	; 254
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	5c df       	rcall	.-328    	; 0x1e92 <uxListRemove>
    1fda:	8c 89       	ldd	r24, Y+20	; 0x14
    1fdc:	9d 89       	ldd	r25, Y+21	; 0x15
    1fde:	89 2b       	or	r24, r25
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <xTaskIncrementTick+0x10a>
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0c 96       	adiw	r24, 0x0c	; 12
    1fe6:	55 df       	rcall	.-342    	; 0x1e92 <uxListRemove>
    1fe8:	8e 89       	ldd	r24, Y+22	; 0x16
    1fea:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <uxTopReadyPriority>
    1fee:	98 17       	cp	r25, r24
    1ff0:	10 f4       	brcc	.+4      	; 0x1ff6 <xTaskIncrementTick+0x118>
    1ff2:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <uxTopReadyPriority>
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 01       	movw	r18, r24
    1ffa:	22 0f       	add	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	22 0f       	add	r18, r18
    2004:	33 1f       	adc	r19, r19
    2006:	82 0f       	add	r24, r18
    2008:	93 1f       	adc	r25, r19
    200a:	b8 01       	movw	r22, r16
    200c:	8a 59       	subi	r24, 0x9A	; 154
    200e:	9c 4d       	sbci	r25, 0xDC	; 220
    2010:	8c de       	rcall	.-744    	; 0x1d2a <vListInsertEnd>
    2012:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    2016:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    201a:	9e 89       	ldd	r25, Y+22	; 0x16
    201c:	86 89       	ldd	r24, Z+22	; 0x16
    201e:	98 17       	cp	r25, r24
    2020:	08 f4       	brcc	.+2      	; 0x2024 <xTaskIncrementTick+0x146>
    2022:	b5 cf       	rjmp	.-150    	; 0x1f8e <xTaskIncrementTick+0xb0>
    2024:	dd 24       	eor	r13, r13
    2026:	d3 94       	inc	r13
    2028:	b2 cf       	rjmp	.-156    	; 0x1f8e <xTaskIncrementTick+0xb0>
    202a:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    202e:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2032:	86 89       	ldd	r24, Z+22	; 0x16
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	fc 01       	movw	r30, r24
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	8e 0f       	add	r24, r30
    2046:	9f 1f       	adc	r25, r31
    2048:	fc 01       	movw	r30, r24
    204a:	ea 59       	subi	r30, 0x9A	; 154
    204c:	fc 4d       	sbci	r31, 0xDC	; 220
    204e:	80 81       	ld	r24, Z
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	48 f0       	brcs	.+18     	; 0x2066 <xTaskIncrementTick+0x188>
    2054:	dd 24       	eor	r13, r13
    2056:	d3 94       	inc	r13
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <xTaskIncrementTick+0x188>
    205a:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <uxPendedTicks>
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <uxPendedTicks>
    2064:	d1 2c       	mov	r13, r1
    2066:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <xYieldPending>
    206a:	88 23       	and	r24, r24
    206c:	11 f0       	breq	.+4      	; 0x2072 <xTaskIncrementTick+0x194>
    206e:	dd 24       	eor	r13, r13
    2070:	d3 94       	inc	r13
    2072:	8d 2d       	mov	r24, r13
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	df 90       	pop	r13
    2082:	08 95       	ret

00002084 <vTaskPlaceOnEventList>:
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	eb 01       	movw	r28, r22
    208a:	60 91 93 23 	lds	r22, 0x2393	; 0x802393 <pxCurrentTCB>
    208e:	70 91 94 23 	lds	r23, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2092:	64 5f       	subi	r22, 0xF4	; 244
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	6a de       	rcall	.-812    	; 0x1d6c <vListInsert>
    2098:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <pxCurrentTCB>
    209c:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    20a0:	02 96       	adiw	r24, 0x02	; 2
    20a2:	f7 de       	rcall	.-530    	; 0x1e92 <uxListRemove>
    20a4:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <xTickCount>
    20a8:	90 91 45 23 	lds	r25, 0x2345	; 0x802345 <xTickCount+0x1>
    20ac:	8c 0f       	add	r24, r28
    20ae:	9d 1f       	adc	r25, r29
    20b0:	8e de       	rcall	.-740    	; 0x1dce <prvAddCurrentTaskToDelayedList>
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	08 95       	ret

000020b8 <vTaskPlaceOnEventListRestricted>:
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	eb 01       	movw	r28, r22
    20be:	60 91 93 23 	lds	r22, 0x2393	; 0x802393 <pxCurrentTCB>
    20c2:	70 91 94 23 	lds	r23, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    20c6:	64 5f       	subi	r22, 0xF4	; 244
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	2f de       	rcall	.-930    	; 0x1d2a <vListInsertEnd>
    20cc:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <pxCurrentTCB>
    20d0:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    20d4:	02 96       	adiw	r24, 0x02	; 2
    20d6:	dd de       	rcall	.-582    	; 0x1e92 <uxListRemove>
    20d8:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <xTickCount>
    20dc:	90 91 45 23 	lds	r25, 0x2345	; 0x802345 <xTickCount+0x1>
    20e0:	8c 0f       	add	r24, r28
    20e2:	9d 1f       	adc	r25, r29
    20e4:	74 de       	rcall	.-792    	; 0x1dce <prvAddCurrentTaskToDelayedList>
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	08 95       	ret

000020ec <xTaskRemoveFromEventList>:
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	dc 01       	movw	r26, r24
    20f6:	15 96       	adiw	r26, 0x05	; 5
    20f8:	ed 91       	ld	r30, X+
    20fa:	fc 91       	ld	r31, X
    20fc:	16 97       	sbiw	r26, 0x06	; 6
    20fe:	c6 81       	ldd	r28, Z+6	; 0x06
    2100:	d7 81       	ldd	r29, Z+7	; 0x07
    2102:	8e 01       	movw	r16, r28
    2104:	04 5f       	subi	r16, 0xF4	; 244
    2106:	1f 4f       	sbci	r17, 0xFF	; 255
    2108:	c8 01       	movw	r24, r16
    210a:	c3 de       	rcall	.-634    	; 0x1e92 <uxListRemove>
    210c:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    2110:	81 11       	cpse	r24, r1
    2112:	1a c0       	rjmp	.+52     	; 0x2148 <xTaskRemoveFromEventList+0x5c>
    2114:	0a 50       	subi	r16, 0x0A	; 10
    2116:	11 09       	sbc	r17, r1
    2118:	c8 01       	movw	r24, r16
    211a:	bb de       	rcall	.-650    	; 0x1e92 <uxListRemove>
    211c:	8e 89       	ldd	r24, Y+22	; 0x16
    211e:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <uxTopReadyPriority>
    2122:	98 17       	cp	r25, r24
    2124:	10 f4       	brcc	.+4      	; 0x212a <xTaskRemoveFromEventList+0x3e>
    2126:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <uxTopReadyPriority>
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9c 01       	movw	r18, r24
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	22 0f       	add	r18, r18
    2134:	33 1f       	adc	r19, r19
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	82 0f       	add	r24, r18
    213c:	93 1f       	adc	r25, r19
    213e:	b8 01       	movw	r22, r16
    2140:	8a 59       	subi	r24, 0x9A	; 154
    2142:	9c 4d       	sbci	r25, 0xDC	; 220
    2144:	f2 dd       	rcall	.-1052   	; 0x1d2a <vListInsertEnd>
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <xTaskRemoveFromEventList+0x64>
    2148:	b8 01       	movw	r22, r16
    214a:	87 e4       	ldi	r24, 0x47	; 71
    214c:	93 e2       	ldi	r25, 0x23	; 35
    214e:	ed dd       	rcall	.-1062   	; 0x1d2a <vListInsertEnd>
    2150:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    2154:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2158:	9e 89       	ldd	r25, Y+22	; 0x16
    215a:	86 89       	ldd	r24, Z+22	; 0x16
    215c:	89 17       	cp	r24, r25
    215e:	20 f4       	brcc	.+8      	; 0x2168 <xTaskRemoveFromEventList+0x7c>
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <xYieldPending>
    2166:	01 c0       	rjmp	.+2      	; 0x216a <xTaskRemoveFromEventList+0x7e>
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <prvUnlockQueue>:
    2174:	ff 92       	push	r15
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	ec 01       	movw	r28, r24
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	0f 92       	push	r0
    2186:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2188:	18 16       	cp	r1, r24
    218a:	c4 f4       	brge	.+48     	; 0x21bc <prvUnlockQueue+0x48>
    218c:	89 89       	ldd	r24, Y+17	; 0x11
    218e:	81 11       	cpse	r24, r1
    2190:	05 c0       	rjmp	.+10     	; 0x219c <prvUnlockQueue+0x28>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <prvUnlockQueue+0x48>
    2194:	89 89       	ldd	r24, Y+17	; 0x11
    2196:	81 11       	cpse	r24, r1
    2198:	06 c0       	rjmp	.+12     	; 0x21a6 <prvUnlockQueue+0x32>
    219a:	10 c0       	rjmp	.+32     	; 0x21bc <prvUnlockQueue+0x48>
    219c:	8e 01       	movw	r16, r28
    219e:	0f 5e       	subi	r16, 0xEF	; 239
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	ff 24       	eor	r15, r15
    21a4:	f3 94       	inc	r15
    21a6:	c8 01       	movw	r24, r16
    21a8:	a1 df       	rcall	.-190    	; 0x20ec <xTaskRemoveFromEventList>
    21aa:	81 11       	cpse	r24, r1
    21ac:	f0 92 40 23 	sts	0x2340, r15	; 0x802340 <xYieldPending>
    21b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b2:	81 50       	subi	r24, 0x01	; 1
    21b4:	8e 8f       	std	Y+30, r24	; 0x1e
    21b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b8:	18 16       	cp	r1, r24
    21ba:	64 f3       	brlt	.-40     	; 0x2194 <prvUnlockQueue+0x20>
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	8e 8f       	std	Y+30, r24	; 0x1e
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	0f 92       	push	r0
    21ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21cc:	18 16       	cp	r1, r24
    21ce:	c4 f4       	brge	.+48     	; 0x2200 <prvUnlockQueue+0x8c>
    21d0:	88 85       	ldd	r24, Y+8	; 0x08
    21d2:	81 11       	cpse	r24, r1
    21d4:	05 c0       	rjmp	.+10     	; 0x21e0 <prvUnlockQueue+0x6c>
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <prvUnlockQueue+0x8c>
    21d8:	88 85       	ldd	r24, Y+8	; 0x08
    21da:	81 11       	cpse	r24, r1
    21dc:	06 c0       	rjmp	.+12     	; 0x21ea <prvUnlockQueue+0x76>
    21de:	10 c0       	rjmp	.+32     	; 0x2200 <prvUnlockQueue+0x8c>
    21e0:	8e 01       	movw	r16, r28
    21e2:	08 5f       	subi	r16, 0xF8	; 248
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	ff 24       	eor	r15, r15
    21e8:	f3 94       	inc	r15
    21ea:	c8 01       	movw	r24, r16
    21ec:	7f df       	rcall	.-258    	; 0x20ec <xTaskRemoveFromEventList>
    21ee:	81 11       	cpse	r24, r1
    21f0:	f0 92 40 23 	sts	0x2340, r15	; 0x802340 <xYieldPending>
    21f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f6:	81 50       	subi	r24, 0x01	; 1
    21f8:	8d 8f       	std	Y+29, r24	; 0x1d
    21fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fc:	18 16       	cp	r1, r24
    21fe:	64 f3       	brlt	.-40     	; 0x21d8 <prvUnlockQueue+0x64>
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	8d 8f       	std	Y+29, r24	; 0x1d
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	08 95       	ret

00002214 <vQueueWaitForMessageRestricted>:
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	0f 92       	push	r0
    2220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2222:	8f 3f       	cpi	r24, 0xFF	; 255
    2224:	09 f4       	brne	.+2      	; 0x2228 <vQueueWaitForMessageRestricted+0x14>
    2226:	1d 8e       	std	Y+29, r1	; 0x1d
    2228:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222a:	8f 3f       	cpi	r24, 0xFF	; 255
    222c:	09 f4       	brne	.+2      	; 0x2230 <vQueueWaitForMessageRestricted+0x1c>
    222e:	1e 8e       	std	Y+30, r1	; 0x1e
    2230:	0f 90       	pop	r0
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2236:	81 11       	cpse	r24, r1
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <vQueueWaitForMessageRestricted+0x2c>
    223a:	ce 01       	movw	r24, r28
    223c:	41 96       	adiw	r24, 0x11	; 17
    223e:	3c df       	rcall	.-392    	; 0x20b8 <vTaskPlaceOnEventListRestricted>
    2240:	ce 01       	movw	r24, r28
    2242:	98 df       	rcall	.-208    	; 0x2174 <prvUnlockQueue>
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret

0000224a <xQueueGenericSendFromISR>:
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	fa 01       	movw	r30, r20
    2254:	dc 01       	movw	r26, r24
    2256:	5a 96       	adiw	r26, 0x1a	; 26
    2258:	5c 91       	ld	r21, X
    225a:	5a 97       	sbiw	r26, 0x1a	; 26
    225c:	5b 96       	adiw	r26, 0x1b	; 27
    225e:	3c 91       	ld	r19, X
    2260:	53 17       	cp	r21, r19
    2262:	10 f0       	brcs	.+4      	; 0x2268 <xQueueGenericSendFromISR+0x1e>
    2264:	22 30       	cpi	r18, 0x02	; 2
    2266:	d9 f4       	brne	.+54     	; 0x229e <xQueueGenericSendFromISR+0x54>
    2268:	42 2f       	mov	r20, r18
    226a:	8f 01       	movw	r16, r30
    226c:	ec 01       	movw	r28, r24
    226e:	23 dc       	rcall	.-1978   	; 0x1ab6 <prvCopyDataToQueue>
    2270:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2272:	8f 3f       	cpi	r24, 0xFF	; 255
    2274:	79 f4       	brne	.+30     	; 0x2294 <xQueueGenericSendFromISR+0x4a>
    2276:	89 89       	ldd	r24, Y+17	; 0x11
    2278:	88 23       	and	r24, r24
    227a:	99 f0       	breq	.+38     	; 0x22a2 <xQueueGenericSendFromISR+0x58>
    227c:	ce 01       	movw	r24, r28
    227e:	41 96       	adiw	r24, 0x11	; 17
    2280:	35 df       	rcall	.-406    	; 0x20ec <xTaskRemoveFromEventList>
    2282:	88 23       	and	r24, r24
    2284:	81 f0       	breq	.+32     	; 0x22a6 <xQueueGenericSendFromISR+0x5c>
    2286:	01 15       	cp	r16, r1
    2288:	11 05       	cpc	r17, r1
    228a:	79 f0       	breq	.+30     	; 0x22aa <xQueueGenericSendFromISR+0x60>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	f8 01       	movw	r30, r16
    2290:	80 83       	st	Z, r24
    2292:	0c c0       	rjmp	.+24     	; 0x22ac <xQueueGenericSendFromISR+0x62>
    2294:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2296:	8f 5f       	subi	r24, 0xFF	; 255
    2298:	8e 8f       	std	Y+30, r24	; 0x1e
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	07 c0       	rjmp	.+14     	; 0x22ac <xQueueGenericSendFromISR+0x62>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <xQueueGenericSendFromISR+0x62>
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <xQueueGenericSendFromISR+0x62>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	01 c0       	rjmp	.+2      	; 0x22ac <xQueueGenericSendFromISR+0x62>
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	08 95       	ret

000022b6 <pxPortInitialiseStack>:
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	8b 01       	movw	r16, r22
    22bc:	71 e1       	ldi	r23, 0x11	; 17
    22be:	fc 01       	movw	r30, r24
    22c0:	70 83       	st	Z, r23
    22c2:	31 97       	sbiw	r30, 0x01	; 1
    22c4:	62 e2       	ldi	r22, 0x22	; 34
    22c6:	60 83       	st	Z, r22
    22c8:	31 97       	sbiw	r30, 0x01	; 1
    22ca:	23 e3       	ldi	r18, 0x33	; 51
    22cc:	20 83       	st	Z, r18
    22ce:	01 2e       	mov	r0, r17
    22d0:	00 0c       	add	r0, r0
    22d2:	22 0b       	sbc	r18, r18
    22d4:	33 0b       	sbc	r19, r19
    22d6:	31 97       	sbiw	r30, 0x01	; 1
    22d8:	00 83       	st	Z, r16
    22da:	31 97       	sbiw	r30, 0x01	; 1
    22dc:	10 83       	st	Z, r17
    22de:	31 97       	sbiw	r30, 0x01	; 1
    22e0:	20 83       	st	Z, r18
    22e2:	31 97       	sbiw	r30, 0x01	; 1
    22e4:	10 82       	st	Z, r1
    22e6:	31 97       	sbiw	r30, 0x01	; 1
    22e8:	20 e8       	ldi	r18, 0x80	; 128
    22ea:	20 83       	st	Z, r18
    22ec:	31 97       	sbiw	r30, 0x01	; 1
    22ee:	10 82       	st	Z, r1
    22f0:	31 97       	sbiw	r30, 0x01	; 1
    22f2:	22 e0       	ldi	r18, 0x02	; 2
    22f4:	20 83       	st	Z, r18
    22f6:	31 97       	sbiw	r30, 0x01	; 1
    22f8:	23 e0       	ldi	r18, 0x03	; 3
    22fa:	20 83       	st	Z, r18
    22fc:	31 97       	sbiw	r30, 0x01	; 1
    22fe:	24 e0       	ldi	r18, 0x04	; 4
    2300:	20 83       	st	Z, r18
    2302:	31 97       	sbiw	r30, 0x01	; 1
    2304:	25 e0       	ldi	r18, 0x05	; 5
    2306:	20 83       	st	Z, r18
    2308:	31 97       	sbiw	r30, 0x01	; 1
    230a:	26 e0       	ldi	r18, 0x06	; 6
    230c:	20 83       	st	Z, r18
    230e:	31 97       	sbiw	r30, 0x01	; 1
    2310:	27 e0       	ldi	r18, 0x07	; 7
    2312:	20 83       	st	Z, r18
    2314:	31 97       	sbiw	r30, 0x01	; 1
    2316:	28 e0       	ldi	r18, 0x08	; 8
    2318:	20 83       	st	Z, r18
    231a:	31 97       	sbiw	r30, 0x01	; 1
    231c:	29 e0       	ldi	r18, 0x09	; 9
    231e:	20 83       	st	Z, r18
    2320:	31 97       	sbiw	r30, 0x01	; 1
    2322:	20 e1       	ldi	r18, 0x10	; 16
    2324:	20 83       	st	Z, r18
    2326:	31 97       	sbiw	r30, 0x01	; 1
    2328:	70 83       	st	Z, r23
    232a:	31 97       	sbiw	r30, 0x01	; 1
    232c:	22 e1       	ldi	r18, 0x12	; 18
    232e:	20 83       	st	Z, r18
    2330:	31 97       	sbiw	r30, 0x01	; 1
    2332:	23 e1       	ldi	r18, 0x13	; 19
    2334:	20 83       	st	Z, r18
    2336:	31 97       	sbiw	r30, 0x01	; 1
    2338:	24 e1       	ldi	r18, 0x14	; 20
    233a:	20 83       	st	Z, r18
    233c:	31 97       	sbiw	r30, 0x01	; 1
    233e:	25 e1       	ldi	r18, 0x15	; 21
    2340:	20 83       	st	Z, r18
    2342:	31 97       	sbiw	r30, 0x01	; 1
    2344:	26 e1       	ldi	r18, 0x16	; 22
    2346:	20 83       	st	Z, r18
    2348:	31 97       	sbiw	r30, 0x01	; 1
    234a:	27 e1       	ldi	r18, 0x17	; 23
    234c:	20 83       	st	Z, r18
    234e:	31 97       	sbiw	r30, 0x01	; 1
    2350:	28 e1       	ldi	r18, 0x18	; 24
    2352:	20 83       	st	Z, r18
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	29 e1       	ldi	r18, 0x19	; 25
    2358:	20 83       	st	Z, r18
    235a:	31 97       	sbiw	r30, 0x01	; 1
    235c:	20 e2       	ldi	r18, 0x20	; 32
    235e:	20 83       	st	Z, r18
    2360:	31 97       	sbiw	r30, 0x01	; 1
    2362:	21 e2       	ldi	r18, 0x21	; 33
    2364:	20 83       	st	Z, r18
    2366:	31 97       	sbiw	r30, 0x01	; 1
    2368:	60 83       	st	Z, r22
    236a:	31 97       	sbiw	r30, 0x01	; 1
    236c:	23 e2       	ldi	r18, 0x23	; 35
    236e:	20 83       	st	Z, r18
    2370:	31 97       	sbiw	r30, 0x01	; 1
    2372:	40 83       	st	Z, r20
    2374:	31 97       	sbiw	r30, 0x01	; 1
    2376:	50 83       	st	Z, r21
    2378:	31 97       	sbiw	r30, 0x01	; 1
    237a:	26 e2       	ldi	r18, 0x26	; 38
    237c:	20 83       	st	Z, r18
    237e:	31 97       	sbiw	r30, 0x01	; 1
    2380:	27 e2       	ldi	r18, 0x27	; 39
    2382:	20 83       	st	Z, r18
    2384:	31 97       	sbiw	r30, 0x01	; 1
    2386:	28 e2       	ldi	r18, 0x28	; 40
    2388:	20 83       	st	Z, r18
    238a:	31 97       	sbiw	r30, 0x01	; 1
    238c:	29 e2       	ldi	r18, 0x29	; 41
    238e:	20 83       	st	Z, r18
    2390:	31 97       	sbiw	r30, 0x01	; 1
    2392:	20 e3       	ldi	r18, 0x30	; 48
    2394:	20 83       	st	Z, r18
    2396:	31 97       	sbiw	r30, 0x01	; 1
    2398:	21 e3       	ldi	r18, 0x31	; 49
    239a:	20 83       	st	Z, r18
    239c:	87 97       	sbiw	r24, 0x27	; 39
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	08 95       	ret

000023a4 <xPortStartScheduler>:
    23a4:	f8 94       	cli
    23a6:	e0 e7       	ldi	r30, 0x70	; 112
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	83 81       	ldd	r24, Z+3	; 0x03
    23ac:	8a 7f       	andi	r24, 0xFA	; 250
    23ae:	83 83       	std	Z+3, r24	; 0x03
    23b0:	e0 e0       	ldi	r30, 0x00	; 0
    23b2:	f8 e0       	ldi	r31, 0x08	; 8
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	9a ef       	ldi	r25, 0xFA	; 250
    23b8:	86 a3       	std	Z+38, r24	; 0x26
    23ba:	97 a3       	std	Z+39, r25	; 0x27
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	96 83       	std	Z+6, r25	; 0x06
    23c0:	a0 ea       	ldi	r26, 0xA0	; 160
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	12 96       	adiw	r26, 0x02	; 2
    23c6:	8c 91       	ld	r24, X
    23c8:	12 97       	sbiw	r26, 0x02	; 2
    23ca:	81 60       	ori	r24, 0x01	; 1
    23cc:	12 96       	adiw	r26, 0x02	; 2
    23ce:	8c 93       	st	X, r24
    23d0:	90 83       	st	Z, r25
    23d2:	78 94       	sei
    23d4:	a0 91 93 23 	lds	r26, 0x2393	; 0x802393 <pxCurrentTCB>
    23d8:	b0 91 94 23 	lds	r27, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    23dc:	0d 90       	ld	r0, X+
    23de:	0d be       	out	0x3d, r0	; 61
    23e0:	0d 90       	ld	r0, X+
    23e2:	0e be       	out	0x3e, r0	; 62
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	7f 90       	pop	r7
    2416:	6f 90       	pop	r6
    2418:	5f 90       	pop	r5
    241a:	4f 90       	pop	r4
    241c:	3f 90       	pop	r3
    241e:	2f 90       	pop	r2
    2420:	1f 90       	pop	r1
    2422:	0f 90       	pop	r0
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	0f 90       	pop	r0
    2428:	08 95       	ret
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	08 95       	ret

0000242e <vPortYield>:
    242e:	0f 92       	push	r0
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	0f 92       	push	r0
    2436:	1f 92       	push	r1
    2438:	11 24       	eor	r1, r1
    243a:	2f 92       	push	r2
    243c:	3f 92       	push	r3
    243e:	4f 92       	push	r4
    2440:	5f 92       	push	r5
    2442:	6f 92       	push	r6
    2444:	7f 92       	push	r7
    2446:	8f 92       	push	r8
    2448:	9f 92       	push	r9
    244a:	af 92       	push	r10
    244c:	bf 92       	push	r11
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	ef 93       	push	r30
    2474:	ff 93       	push	r31
    2476:	a0 91 93 23 	lds	r26, 0x2393	; 0x802393 <pxCurrentTCB>
    247a:	b0 91 94 23 	lds	r27, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    247e:	0d b6       	in	r0, 0x3d	; 61
    2480:	0d 92       	st	X+, r0
    2482:	0e b6       	in	r0, 0x3e	; 62
    2484:	0d 92       	st	X+, r0
    2486:	8c db       	rcall	.-2280   	; 0x1ba0 <vTaskSwitchContext>
    2488:	a0 91 93 23 	lds	r26, 0x2393	; 0x802393 <pxCurrentTCB>
    248c:	b0 91 94 23 	lds	r27, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2490:	0d 90       	ld	r0, X+
    2492:	0d be       	out	0x3d, r0	; 61
    2494:	0d 90       	ld	r0, X+
    2496:	0e be       	out	0x3e, r0	; 62
    2498:	ff 91       	pop	r31
    249a:	ef 91       	pop	r30
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	bf 91       	pop	r27
    24a2:	af 91       	pop	r26
    24a4:	9f 91       	pop	r25
    24a6:	8f 91       	pop	r24
    24a8:	7f 91       	pop	r23
    24aa:	6f 91       	pop	r22
    24ac:	5f 91       	pop	r21
    24ae:	4f 91       	pop	r20
    24b0:	3f 91       	pop	r19
    24b2:	2f 91       	pop	r18
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	9f 90       	pop	r9
    24c6:	8f 90       	pop	r8
    24c8:	7f 90       	pop	r7
    24ca:	6f 90       	pop	r6
    24cc:	5f 90       	pop	r5
    24ce:	4f 90       	pop	r4
    24d0:	3f 90       	pop	r3
    24d2:	2f 90       	pop	r2
    24d4:	1f 90       	pop	r1
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	0f 90       	pop	r0
    24dc:	08 95       	ret

000024de <prvIdleTask>:
    24de:	c6 e6       	ldi	r28, 0x66	; 102
    24e0:	d3 e2       	ldi	r29, 0x23	; 35
    24e2:	88 81       	ld	r24, Y
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	f0 f3       	brcs	.-4      	; 0x24e4 <prvIdleTask+0x6>
    24e8:	a2 df       	rcall	.-188    	; 0x242e <vPortYield>
    24ea:	fb cf       	rjmp	.-10     	; 0x24e2 <prvIdleTask+0x4>

000024ec <xTaskResumeAll>:
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	0f 92       	push	r0
    2500:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    2504:	81 50       	subi	r24, 0x01	; 1
    2506:	80 93 3d 23 	sts	0x233D, r24	; 0x80233d <uxSchedulerSuspended>
    250a:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <uxSchedulerSuspended>
    250e:	81 11       	cpse	r24, r1
    2510:	5d c0       	rjmp	.+186    	; 0x25cc <xTaskResumeAll+0xe0>
    2512:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <uxCurrentNumberOfTasks>
    2516:	81 11       	cpse	r24, r1
    2518:	30 c0       	rjmp	.+96     	; 0x257a <xTaskResumeAll+0x8e>
    251a:	5b c0       	rjmp	.+182    	; 0x25d2 <xTaskResumeAll+0xe6>
    251c:	d7 01       	movw	r26, r14
    251e:	15 96       	adiw	r26, 0x05	; 5
    2520:	ed 91       	ld	r30, X+
    2522:	fc 91       	ld	r31, X
    2524:	16 97       	sbiw	r26, 0x06	; 6
    2526:	c6 81       	ldd	r28, Z+6	; 0x06
    2528:	d7 81       	ldd	r29, Z+7	; 0x07
    252a:	ce 01       	movw	r24, r28
    252c:	0c 96       	adiw	r24, 0x0c	; 12
    252e:	b1 dc       	rcall	.-1694   	; 0x1e92 <uxListRemove>
    2530:	8e 01       	movw	r16, r28
    2532:	0e 5f       	subi	r16, 0xFE	; 254
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	c8 01       	movw	r24, r16
    2538:	ac dc       	rcall	.-1704   	; 0x1e92 <uxListRemove>
    253a:	8e 89       	ldd	r24, Y+22	; 0x16
    253c:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <uxTopReadyPriority>
    2540:	98 17       	cp	r25, r24
    2542:	10 f4       	brcc	.+4      	; 0x2548 <xTaskResumeAll+0x5c>
    2544:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <uxTopReadyPriority>
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9c 01       	movw	r18, r24
    254c:	22 0f       	add	r18, r18
    254e:	33 1f       	adc	r19, r19
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	b8 01       	movw	r22, r16
    255e:	8a 59       	subi	r24, 0x9A	; 154
    2560:	9c 4d       	sbci	r25, 0xDC	; 220
    2562:	e3 db       	rcall	.-2106   	; 0x1d2a <vListInsertEnd>
    2564:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    2568:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    256c:	9e 89       	ldd	r25, Y+22	; 0x16
    256e:	86 89       	ldd	r24, Z+22	; 0x16
    2570:	98 17       	cp	r25, r24
    2572:	58 f0       	brcs	.+22     	; 0x258a <xTaskResumeAll+0x9e>
    2574:	d0 92 40 23 	sts	0x2340, r13	; 0x802340 <xYieldPending>
    2578:	08 c0       	rjmp	.+16     	; 0x258a <xTaskResumeAll+0x9e>
    257a:	0f 2e       	mov	r0, r31
    257c:	f7 e4       	ldi	r31, 0x47	; 71
    257e:	ef 2e       	mov	r14, r31
    2580:	f3 e2       	ldi	r31, 0x23	; 35
    2582:	ff 2e       	mov	r15, r31
    2584:	f0 2d       	mov	r31, r0
    2586:	dd 24       	eor	r13, r13
    2588:	d3 94       	inc	r13
    258a:	f7 01       	movw	r30, r14
    258c:	80 81       	ld	r24, Z
    258e:	81 11       	cpse	r24, r1
    2590:	c5 cf       	rjmp	.-118    	; 0x251c <xTaskResumeAll+0x30>
    2592:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <uxPendedTicks>
    2596:	88 23       	and	r24, r24
    2598:	91 f0       	breq	.+36     	; 0x25be <xTaskResumeAll+0xd2>
    259a:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <uxPendedTicks>
    259e:	88 23       	and	r24, r24
    25a0:	71 f0       	breq	.+28     	; 0x25be <xTaskResumeAll+0xd2>
    25a2:	c1 e0       	ldi	r28, 0x01	; 1
    25a4:	9c dc       	rcall	.-1736   	; 0x1ede <xTaskIncrementTick>
    25a6:	81 11       	cpse	r24, r1
    25a8:	c0 93 40 23 	sts	0x2340, r28	; 0x802340 <xYieldPending>
    25ac:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <uxPendedTicks>
    25b0:	81 50       	subi	r24, 0x01	; 1
    25b2:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <uxPendedTicks>
    25b6:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <uxPendedTicks>
    25ba:	81 11       	cpse	r24, r1
    25bc:	f3 cf       	rjmp	.-26     	; 0x25a4 <xTaskResumeAll+0xb8>
    25be:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <xYieldPending>
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <xTaskResumeAll+0xe4>
    25c6:	33 df       	rcall	.-410    	; 0x242e <vPortYield>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	03 c0       	rjmp	.+6      	; 0x25d2 <xTaskResumeAll+0xe6>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <xTaskResumeAll+0xe6>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	0f 90       	pop	r0
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	df 90       	pop	r13
    25e4:	08 95       	ret

000025e6 <vTaskDelay>:
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	ec 01       	movw	r28, r24
    25ec:	89 2b       	or	r24, r25
    25ee:	91 f0       	breq	.+36     	; 0x2614 <vTaskDelay+0x2e>
    25f0:	c7 da       	rcall	.-2674   	; 0x1b80 <vTaskSuspendAll>
    25f2:	80 91 44 23 	lds	r24, 0x2344	; 0x802344 <xTickCount>
    25f6:	90 91 45 23 	lds	r25, 0x2345	; 0x802345 <xTickCount+0x1>
    25fa:	c8 0f       	add	r28, r24
    25fc:	d9 1f       	adc	r29, r25
    25fe:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <pxCurrentTCB>
    2602:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2606:	02 96       	adiw	r24, 0x02	; 2
    2608:	44 dc       	rcall	.-1912   	; 0x1e92 <uxListRemove>
    260a:	ce 01       	movw	r24, r28
    260c:	e0 db       	rcall	.-2112   	; 0x1dce <prvAddCurrentTaskToDelayedList>
    260e:	6e df       	rcall	.-292    	; 0x24ec <xTaskResumeAll>
    2610:	81 11       	cpse	r24, r1
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <vTaskDelay+0x30>
    2614:	0c df       	rcall	.-488    	; 0x242e <vPortYield>
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <xQueueGenericReset>:
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	ec 01       	movw	r28, r24
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	0f 92       	push	r0
    2628:	48 81       	ld	r20, Y
    262a:	59 81       	ldd	r21, Y+1	; 0x01
    262c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2632:	72 9f       	mul	r23, r18
    2634:	c0 01       	movw	r24, r0
    2636:	73 9f       	mul	r23, r19
    2638:	90 0d       	add	r25, r0
    263a:	11 24       	eor	r1, r1
    263c:	fa 01       	movw	r30, r20
    263e:	e8 0f       	add	r30, r24
    2640:	f9 1f       	adc	r31, r25
    2642:	ea 83       	std	Y+2, r30	; 0x02
    2644:	fb 83       	std	Y+3, r31	; 0x03
    2646:	1a 8e       	std	Y+26, r1	; 0x1a
    2648:	4c 83       	std	Y+4, r20	; 0x04
    264a:	5d 83       	std	Y+5, r21	; 0x05
    264c:	82 1b       	sub	r24, r18
    264e:	93 0b       	sbc	r25, r19
    2650:	84 0f       	add	r24, r20
    2652:	95 1f       	adc	r25, r21
    2654:	8e 83       	std	Y+6, r24	; 0x06
    2656:	9f 83       	std	Y+7, r25	; 0x07
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	8d 8f       	std	Y+29, r24	; 0x1d
    265c:	8e 8f       	std	Y+30, r24	; 0x1e
    265e:	61 11       	cpse	r22, r1
    2660:	0a c0       	rjmp	.+20     	; 0x2676 <xQueueGenericReset+0x5a>
    2662:	88 85       	ldd	r24, Y+8	; 0x08
    2664:	88 23       	and	r24, r24
    2666:	69 f0       	breq	.+26     	; 0x2682 <xQueueGenericReset+0x66>
    2668:	ce 01       	movw	r24, r28
    266a:	08 96       	adiw	r24, 0x08	; 8
    266c:	3f dd       	rcall	.-1410   	; 0x20ec <xTaskRemoveFromEventList>
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	41 f4       	brne	.+16     	; 0x2682 <xQueueGenericReset+0x66>
    2672:	dd de       	rcall	.-582    	; 0x242e <vPortYield>
    2674:	06 c0       	rjmp	.+12     	; 0x2682 <xQueueGenericReset+0x66>
    2676:	ce 01       	movw	r24, r28
    2678:	08 96       	adiw	r24, 0x08	; 8
    267a:	49 db       	rcall	.-2414   	; 0x1d0e <vListInitialise>
    267c:	ce 01       	movw	r24, r28
    267e:	41 96       	adiw	r24, 0x11	; 17
    2680:	46 db       	rcall	.-2420   	; 0x1d0e <vListInitialise>
    2682:	0f 90       	pop	r0
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <xQueueGenericSend>:
    268e:	af 92       	push	r10
    2690:	bf 92       	push	r11
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	25 97       	sbiw	r28, 0x05	; 5
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	8c 01       	movw	r16, r24
    26ae:	6b 01       	movw	r12, r22
    26b0:	4c 83       	std	Y+4, r20	; 0x04
    26b2:	5d 83       	std	Y+5, r21	; 0x05
    26b4:	a2 2e       	mov	r10, r18
    26b6:	b1 2c       	mov	r11, r1
    26b8:	7c 01       	movw	r14, r24
    26ba:	88 e0       	ldi	r24, 0x08	; 8
    26bc:	e8 0e       	add	r14, r24
    26be:	f1 1c       	adc	r15, r1
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	0f 92       	push	r0
    26c6:	f8 01       	movw	r30, r16
    26c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    26ca:	83 8d       	ldd	r24, Z+27	; 0x1b
    26cc:	98 17       	cp	r25, r24
    26ce:	18 f0       	brcs	.+6      	; 0x26d6 <xQueueGenericSend+0x48>
    26d0:	f2 e0       	ldi	r31, 0x02	; 2
    26d2:	af 12       	cpse	r10, r31
    26d4:	15 c0       	rjmp	.+42     	; 0x2700 <xQueueGenericSend+0x72>
    26d6:	4a 2d       	mov	r20, r10
    26d8:	b6 01       	movw	r22, r12
    26da:	c8 01       	movw	r24, r16
    26dc:	ec d9       	rcall	.-3112   	; 0x1ab6 <prvCopyDataToQueue>
    26de:	f8 01       	movw	r30, r16
    26e0:	91 89       	ldd	r25, Z+17	; 0x11
    26e2:	99 23       	and	r25, r25
    26e4:	39 f0       	breq	.+14     	; 0x26f4 <xQueueGenericSend+0x66>
    26e6:	c8 01       	movw	r24, r16
    26e8:	41 96       	adiw	r24, 0x11	; 17
    26ea:	00 dd       	rcall	.-1536   	; 0x20ec <xTaskRemoveFromEventList>
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	21 f4       	brne	.+8      	; 0x26f8 <xQueueGenericSend+0x6a>
    26f0:	9e de       	rcall	.-708    	; 0x242e <vPortYield>
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <xQueueGenericSend+0x6a>
    26f4:	81 11       	cpse	r24, r1
    26f6:	9b de       	rcall	.-714    	; 0x242e <vPortYield>
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	46 c0       	rjmp	.+140    	; 0x278c <xQueueGenericSend+0xfe>
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	89 2b       	or	r24, r25
    2706:	21 f4       	brne	.+8      	; 0x2710 <xQueueGenericSend+0x82>
    2708:	0f 90       	pop	r0
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	3e c0       	rjmp	.+124    	; 0x278c <xQueueGenericSend+0xfe>
    2710:	b1 10       	cpse	r11, r1
    2712:	05 c0       	rjmp	.+10     	; 0x271e <xQueueGenericSend+0x90>
    2714:	ce 01       	movw	r24, r28
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	b0 da       	rcall	.-2720   	; 0x1c7a <vTaskSetTimeOutState>
    271a:	bb 24       	eor	r11, r11
    271c:	b3 94       	inc	r11
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	2e da       	rcall	.-2980   	; 0x1b80 <vTaskSuspendAll>
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	0f 92       	push	r0
    272a:	f8 01       	movw	r30, r16
    272c:	85 8d       	ldd	r24, Z+29	; 0x1d
    272e:	8f 3f       	cpi	r24, 0xFF	; 255
    2730:	09 f4       	brne	.+2      	; 0x2734 <xQueueGenericSend+0xa6>
    2732:	15 8e       	std	Z+29, r1	; 0x1d
    2734:	f8 01       	movw	r30, r16
    2736:	86 8d       	ldd	r24, Z+30	; 0x1e
    2738:	8f 3f       	cpi	r24, 0xFF	; 255
    273a:	09 f4       	brne	.+2      	; 0x273e <xQueueGenericSend+0xb0>
    273c:	16 8e       	std	Z+30, r1	; 0x1e
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	be 01       	movw	r22, r28
    2744:	6c 5f       	subi	r22, 0xFC	; 252
    2746:	7f 4f       	sbci	r23, 0xFF	; 255
    2748:	ce 01       	movw	r24, r28
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	a1 da       	rcall	.-2750   	; 0x1c90 <xTaskCheckForTimeOut>
    274e:	81 11       	cpse	r24, r1
    2750:	19 c0       	rjmp	.+50     	; 0x2784 <xQueueGenericSend+0xf6>
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	0f 92       	push	r0
    2758:	f8 01       	movw	r30, r16
    275a:	92 8d       	ldd	r25, Z+26	; 0x1a
    275c:	0f 90       	pop	r0
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	83 8d       	ldd	r24, Z+27	; 0x1b
    2762:	98 13       	cpse	r25, r24
    2764:	0b c0       	rjmp	.+22     	; 0x277c <xQueueGenericSend+0xee>
    2766:	6c 81       	ldd	r22, Y+4	; 0x04
    2768:	7d 81       	ldd	r23, Y+5	; 0x05
    276a:	c7 01       	movw	r24, r14
    276c:	8b dc       	rcall	.-1770   	; 0x2084 <vTaskPlaceOnEventList>
    276e:	c8 01       	movw	r24, r16
    2770:	01 dd       	rcall	.-1534   	; 0x2174 <prvUnlockQueue>
    2772:	bc de       	rcall	.-648    	; 0x24ec <xTaskResumeAll>
    2774:	81 11       	cpse	r24, r1
    2776:	a4 cf       	rjmp	.-184    	; 0x26c0 <xQueueGenericSend+0x32>
    2778:	5a de       	rcall	.-844    	; 0x242e <vPortYield>
    277a:	a2 cf       	rjmp	.-188    	; 0x26c0 <xQueueGenericSend+0x32>
    277c:	c8 01       	movw	r24, r16
    277e:	fa dc       	rcall	.-1548   	; 0x2174 <prvUnlockQueue>
    2780:	b5 de       	rcall	.-662    	; 0x24ec <xTaskResumeAll>
    2782:	9e cf       	rjmp	.-196    	; 0x26c0 <xQueueGenericSend+0x32>
    2784:	c8 01       	movw	r24, r16
    2786:	f6 dc       	rcall	.-1556   	; 0x2174 <prvUnlockQueue>
    2788:	b1 de       	rcall	.-670    	; 0x24ec <xTaskResumeAll>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	25 96       	adiw	r28, 0x05	; 5
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	1f 91       	pop	r17
    2798:	0f 91       	pop	r16
    279a:	ff 90       	pop	r15
    279c:	ef 90       	pop	r14
    279e:	df 90       	pop	r13
    27a0:	cf 90       	pop	r12
    27a2:	bf 90       	pop	r11
    27a4:	af 90       	pop	r10
    27a6:	08 95       	ret

000027a8 <xQueueGenericReceive>:
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	25 97       	sbiw	r28, 0x05	; 5
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	8c 01       	movw	r16, r24
    27c8:	6b 01       	movw	r12, r22
    27ca:	4c 83       	std	Y+4, r20	; 0x04
    27cc:	5d 83       	std	Y+5, r21	; 0x05
    27ce:	a2 2e       	mov	r10, r18
    27d0:	b1 2c       	mov	r11, r1
    27d2:	7c 01       	movw	r14, r24
    27d4:	81 e1       	ldi	r24, 0x11	; 17
    27d6:	e8 0e       	add	r14, r24
    27d8:	f1 1c       	adc	r15, r1
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	0f 92       	push	r0
    27e0:	f8 01       	movw	r30, r16
    27e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    27e4:	88 23       	and	r24, r24
    27e6:	21 f1       	breq	.+72     	; 0x2830 <xQueueGenericReceive+0x88>
    27e8:	e6 80       	ldd	r14, Z+6	; 0x06
    27ea:	f7 80       	ldd	r15, Z+7	; 0x07
    27ec:	b6 01       	movw	r22, r12
    27ee:	c8 01       	movw	r24, r16
    27f0:	ad d9       	rcall	.-3238   	; 0x1b4c <prvCopyDataFromQueue>
    27f2:	a1 10       	cpse	r10, r1
    27f4:	0e c0       	rjmp	.+28     	; 0x2812 <xQueueGenericReceive+0x6a>
    27f6:	f8 01       	movw	r30, r16
    27f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    27fa:	81 50       	subi	r24, 0x01	; 1
    27fc:	82 8f       	std	Z+26, r24	; 0x1a
    27fe:	80 85       	ldd	r24, Z+8	; 0x08
    2800:	88 23       	and	r24, r24
    2802:	91 f0       	breq	.+36     	; 0x2828 <xQueueGenericReceive+0x80>
    2804:	c8 01       	movw	r24, r16
    2806:	08 96       	adiw	r24, 0x08	; 8
    2808:	71 dc       	rcall	.-1822   	; 0x20ec <xTaskRemoveFromEventList>
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	69 f4       	brne	.+26     	; 0x2828 <xQueueGenericReceive+0x80>
    280e:	0f de       	rcall	.-994    	; 0x242e <vPortYield>
    2810:	0b c0       	rjmp	.+22     	; 0x2828 <xQueueGenericReceive+0x80>
    2812:	f8 01       	movw	r30, r16
    2814:	e6 82       	std	Z+6, r14	; 0x06
    2816:	f7 82       	std	Z+7, r15	; 0x07
    2818:	81 89       	ldd	r24, Z+17	; 0x11
    281a:	88 23       	and	r24, r24
    281c:	29 f0       	breq	.+10     	; 0x2828 <xQueueGenericReceive+0x80>
    281e:	c8 01       	movw	r24, r16
    2820:	41 96       	adiw	r24, 0x11	; 17
    2822:	64 dc       	rcall	.-1848   	; 0x20ec <xTaskRemoveFromEventList>
    2824:	81 11       	cpse	r24, r1
    2826:	03 de       	rcall	.-1018   	; 0x242e <vPortYield>
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	45 c0       	rjmp	.+138    	; 0x28ba <xQueueGenericReceive+0x112>
    2830:	8c 81       	ldd	r24, Y+4	; 0x04
    2832:	9d 81       	ldd	r25, Y+5	; 0x05
    2834:	89 2b       	or	r24, r25
    2836:	21 f4       	brne	.+8      	; 0x2840 <xQueueGenericReceive+0x98>
    2838:	0f 90       	pop	r0
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	3d c0       	rjmp	.+122    	; 0x28ba <xQueueGenericReceive+0x112>
    2840:	b1 10       	cpse	r11, r1
    2842:	05 c0       	rjmp	.+10     	; 0x284e <xQueueGenericReceive+0xa6>
    2844:	ce 01       	movw	r24, r28
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	18 da       	rcall	.-3024   	; 0x1c7a <vTaskSetTimeOutState>
    284a:	bb 24       	eor	r11, r11
    284c:	b3 94       	inc	r11
    284e:	0f 90       	pop	r0
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	96 d9       	rcall	.-3284   	; 0x1b80 <vTaskSuspendAll>
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	0f 92       	push	r0
    285a:	f8 01       	movw	r30, r16
    285c:	85 8d       	ldd	r24, Z+29	; 0x1d
    285e:	8f 3f       	cpi	r24, 0xFF	; 255
    2860:	09 f4       	brne	.+2      	; 0x2864 <xQueueGenericReceive+0xbc>
    2862:	15 8e       	std	Z+29, r1	; 0x1d
    2864:	f8 01       	movw	r30, r16
    2866:	86 8d       	ldd	r24, Z+30	; 0x1e
    2868:	8f 3f       	cpi	r24, 0xFF	; 255
    286a:	09 f4       	brne	.+2      	; 0x286e <xQueueGenericReceive+0xc6>
    286c:	16 8e       	std	Z+30, r1	; 0x1e
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	be 01       	movw	r22, r28
    2874:	6c 5f       	subi	r22, 0xFC	; 252
    2876:	7f 4f       	sbci	r23, 0xFF	; 255
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	09 da       	rcall	.-3054   	; 0x1c90 <xTaskCheckForTimeOut>
    287e:	81 11       	cpse	r24, r1
    2880:	18 c0       	rjmp	.+48     	; 0x28b2 <xQueueGenericReceive+0x10a>
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	0f 92       	push	r0
    2888:	f8 01       	movw	r30, r16
    288a:	82 8d       	ldd	r24, Z+26	; 0x1a
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	81 11       	cpse	r24, r1
    2892:	0b c0       	rjmp	.+22     	; 0x28aa <xQueueGenericReceive+0x102>
    2894:	6c 81       	ldd	r22, Y+4	; 0x04
    2896:	7d 81       	ldd	r23, Y+5	; 0x05
    2898:	c7 01       	movw	r24, r14
    289a:	f4 db       	rcall	.-2072   	; 0x2084 <vTaskPlaceOnEventList>
    289c:	c8 01       	movw	r24, r16
    289e:	6a dc       	rcall	.-1836   	; 0x2174 <prvUnlockQueue>
    28a0:	25 de       	rcall	.-950    	; 0x24ec <xTaskResumeAll>
    28a2:	81 11       	cpse	r24, r1
    28a4:	9a cf       	rjmp	.-204    	; 0x27da <xQueueGenericReceive+0x32>
    28a6:	c3 dd       	rcall	.-1146   	; 0x242e <vPortYield>
    28a8:	98 cf       	rjmp	.-208    	; 0x27da <xQueueGenericReceive+0x32>
    28aa:	c8 01       	movw	r24, r16
    28ac:	63 dc       	rcall	.-1850   	; 0x2174 <prvUnlockQueue>
    28ae:	1e de       	rcall	.-964    	; 0x24ec <xTaskResumeAll>
    28b0:	94 cf       	rjmp	.-216    	; 0x27da <xQueueGenericReceive+0x32>
    28b2:	c8 01       	movw	r24, r16
    28b4:	5f dc       	rcall	.-1858   	; 0x2174 <prvUnlockQueue>
    28b6:	1a de       	rcall	.-972    	; 0x24ec <xTaskResumeAll>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	25 96       	adiw	r28, 0x05	; 5
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	bf 90       	pop	r11
    28d2:	af 90       	pop	r10
    28d4:	08 95       	ret

000028d6 <__vector_14>:
    28d6:	0f 92       	push	r0
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	0f 92       	push	r0
    28de:	1f 92       	push	r1
    28e0:	11 24       	eor	r1, r1
    28e2:	2f 92       	push	r2
    28e4:	3f 92       	push	r3
    28e6:	4f 92       	push	r4
    28e8:	5f 92       	push	r5
    28ea:	6f 92       	push	r6
    28ec:	7f 92       	push	r7
    28ee:	8f 92       	push	r8
    28f0:	9f 92       	push	r9
    28f2:	af 92       	push	r10
    28f4:	bf 92       	push	r11
    28f6:	cf 92       	push	r12
    28f8:	df 92       	push	r13
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	ef 93       	push	r30
    291c:	ff 93       	push	r31
    291e:	a0 91 93 23 	lds	r26, 0x2393	; 0x802393 <pxCurrentTCB>
    2922:	b0 91 94 23 	lds	r27, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2926:	0d b6       	in	r0, 0x3d	; 61
    2928:	0d 92       	st	X+, r0
    292a:	0e b6       	in	r0, 0x3e	; 62
    292c:	0d 92       	st	X+, r0
    292e:	d7 da       	rcall	.-2642   	; 0x1ede <xTaskIncrementTick>
    2930:	81 11       	cpse	r24, r1
    2932:	36 d9       	rcall	.-3476   	; 0x1ba0 <vTaskSwitchContext>
    2934:	a0 91 93 23 	lds	r26, 0x2393	; 0x802393 <pxCurrentTCB>
    2938:	b0 91 94 23 	lds	r27, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    293c:	0d 90       	ld	r0, X+
    293e:	0d be       	out	0x3d, r0	; 61
    2940:	0d 90       	ld	r0, X+
    2942:	0e be       	out	0x3e, r0	; 62
    2944:	ff 91       	pop	r31
    2946:	ef 91       	pop	r30
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	bf 91       	pop	r27
    294e:	af 91       	pop	r26
    2950:	9f 91       	pop	r25
    2952:	8f 91       	pop	r24
    2954:	7f 91       	pop	r23
    2956:	6f 91       	pop	r22
    2958:	5f 91       	pop	r21
    295a:	4f 91       	pop	r20
    295c:	3f 91       	pop	r19
    295e:	2f 91       	pop	r18
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	bf 90       	pop	r11
    296e:	af 90       	pop	r10
    2970:	9f 90       	pop	r9
    2972:	8f 90       	pop	r8
    2974:	7f 90       	pop	r7
    2976:	6f 90       	pop	r6
    2978:	5f 90       	pop	r5
    297a:	4f 90       	pop	r4
    297c:	3f 90       	pop	r3
    297e:	2f 90       	pop	r2
    2980:	1f 90       	pop	r1
    2982:	0f 90       	pop	r0
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	0f 90       	pop	r0
    2988:	18 95       	reti

0000298a <pvPortMalloc>:
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
    2990:	f7 d8       	rcall	.-3602   	; 0x1b80 <vTaskSuspendAll>
    2992:	ce 01       	movw	r24, r28
    2994:	df d4       	rcall	.+2494   	; 0x3354 <malloc>
    2996:	ec 01       	movw	r28, r24
    2998:	a9 dd       	rcall	.-1198   	; 0x24ec <xTaskResumeAll>
    299a:	ce 01       	movw	r24, r28
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <xQueueGenericCreate>:
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	08 2f       	mov	r16, r24
    29ac:	16 2f       	mov	r17, r22
    29ae:	66 23       	and	r22, r22
    29b0:	a9 f0       	breq	.+42     	; 0x29dc <xQueueGenericCreate+0x3a>
    29b2:	86 9f       	mul	r24, r22
    29b4:	c0 01       	movw	r24, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	80 96       	adiw	r24, 0x20	; 32
    29ba:	e7 df       	rcall	.-50     	; 0x298a <pvPortMalloc>
    29bc:	ec 01       	movw	r28, r24
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	21 f4       	brne	.+8      	; 0x29ca <xQueueGenericCreate+0x28>
    29c2:	12 c0       	rjmp	.+36     	; 0x29e8 <xQueueGenericCreate+0x46>
    29c4:	c8 83       	st	Y, r28
    29c6:	d9 83       	std	Y+1, r29	; 0x01
    29c8:	03 c0       	rjmp	.+6      	; 0x29d0 <xQueueGenericCreate+0x2e>
    29ca:	4f 96       	adiw	r24, 0x1f	; 31
    29cc:	88 83       	st	Y, r24
    29ce:	99 83       	std	Y+1, r25	; 0x01
    29d0:	0b 8f       	std	Y+27, r16	; 0x1b
    29d2:	1c 8f       	std	Y+28, r17	; 0x1c
    29d4:	61 e0       	ldi	r22, 0x01	; 1
    29d6:	ce 01       	movw	r24, r28
    29d8:	21 de       	rcall	.-958    	; 0x261c <xQueueGenericReset>
    29da:	06 c0       	rjmp	.+12     	; 0x29e8 <xQueueGenericCreate+0x46>
    29dc:	8f e1       	ldi	r24, 0x1F	; 31
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	d4 df       	rcall	.-88     	; 0x298a <pvPortMalloc>
    29e2:	ec 01       	movw	r28, r24
    29e4:	89 2b       	or	r24, r25
    29e6:	71 f7       	brne	.-36     	; 0x29c4 <xQueueGenericCreate+0x22>
    29e8:	ce 01       	movw	r24, r28
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <prvCheckForValidListAndQueue>:
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	0f 92       	push	r0
    29fa:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <xTimerQueue>
    29fe:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <xTimerQueue+0x1>
    2a02:	89 2b       	or	r24, r25
    2a04:	d1 f4       	brne	.+52     	; 0x2a3a <prvCheckForValidListAndQueue+0x46>
    2a06:	84 e3       	ldi	r24, 0x34	; 52
    2a08:	93 e2       	ldi	r25, 0x23	; 35
    2a0a:	81 d9       	rcall	.-3326   	; 0x1d0e <vListInitialise>
    2a0c:	8b e2       	ldi	r24, 0x2B	; 43
    2a0e:	93 e2       	ldi	r25, 0x23	; 35
    2a10:	7e d9       	rcall	.-3332   	; 0x1d0e <vListInitialise>
    2a12:	84 e3       	ldi	r24, 0x34	; 52
    2a14:	93 e2       	ldi	r25, 0x23	; 35
    2a16:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <pxCurrentTimerList>
    2a1a:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <pxCurrentTimerList+0x1>
    2a1e:	8b e2       	ldi	r24, 0x2B	; 43
    2a20:	93 e2       	ldi	r25, 0x23	; 35
    2a22:	80 93 27 23 	sts	0x2327, r24	; 0x802327 <pxOverflowTimerList>
    2a26:	90 93 28 23 	sts	0x2328, r25	; 0x802328 <pxOverflowTimerList+0x1>
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	65 e0       	ldi	r22, 0x05	; 5
    2a2e:	8a e0       	ldi	r24, 0x0A	; 10
    2a30:	b8 df       	rcall	.-144    	; 0x29a2 <xQueueGenericCreate>
    2a32:	80 93 25 23 	sts	0x2325, r24	; 0x802325 <xTimerQueue>
    2a36:	90 93 26 23 	sts	0x2326, r25	; 0x802326 <xTimerQueue+0x1>
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	08 95       	ret

00002a40 <vPortFree>:
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	29 f0       	breq	.+10     	; 0x2a52 <vPortFree+0x12>
    2a48:	ec 01       	movw	r28, r24
    2a4a:	9a d8       	rcall	.-3788   	; 0x1b80 <vTaskSuspendAll>
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	1a d5       	rcall	.+2612   	; 0x3484 <free>
    2a50:	4d dd       	rcall	.-1382   	; 0x24ec <xTaskResumeAll>
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <xTaskGenericCreate>:
    2a58:	4f 92       	push	r4
    2a5a:	5f 92       	push	r5
    2a5c:	6f 92       	push	r6
    2a5e:	7f 92       	push	r7
    2a60:	8f 92       	push	r8
    2a62:	9f 92       	push	r9
    2a64:	af 92       	push	r10
    2a66:	bf 92       	push	r11
    2a68:	cf 92       	push	r12
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	4c 01       	movw	r8, r24
    2a78:	eb 01       	movw	r28, r22
    2a7a:	5a 01       	movw	r10, r20
    2a7c:	29 01       	movw	r4, r18
    2a7e:	c1 14       	cp	r12, r1
    2a80:	d1 04       	cpc	r13, r1
    2a82:	31 f4       	brne	.+12     	; 0x2a90 <xTaskGenericCreate+0x38>
    2a84:	ca 01       	movw	r24, r20
    2a86:	81 df       	rcall	.-254    	; 0x298a <pvPortMalloc>
    2a88:	6c 01       	movw	r12, r24
    2a8a:	89 2b       	or	r24, r25
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <xTaskGenericCreate+0x38>
    2a8e:	c7 c0       	rjmp	.+398    	; 0x2c1e <xTaskGenericCreate+0x1c6>
    2a90:	86 e2       	ldi	r24, 0x26	; 38
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	7a df       	rcall	.-268    	; 0x298a <pvPortMalloc>
    2a96:	3c 01       	movw	r6, r24
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	69 f0       	breq	.+26     	; 0x2ab6 <xTaskGenericCreate+0x5e>
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	c7 8a       	std	Z+23, r12	; 0x17
    2aa0:	d0 8e       	std	Z+24, r13	; 0x18
    2aa2:	c5 01       	movw	r24, r10
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	8c 0d       	add	r24, r12
    2aa8:	9d 1d       	adc	r25, r13
    2aaa:	28 81       	ld	r18, Y
    2aac:	21 8f       	std	Z+25, r18	; 0x19
    2aae:	28 81       	ld	r18, Y
    2ab0:	21 11       	cpse	r18, r1
    2ab2:	04 c0       	rjmp	.+8      	; 0x2abc <xTaskGenericCreate+0x64>
    2ab4:	13 c0       	rjmp	.+38     	; 0x2adc <xTaskGenericCreate+0x84>
    2ab6:	c6 01       	movw	r24, r12
    2ab8:	c3 df       	rcall	.-122    	; 0x2a40 <vPortFree>
    2aba:	b1 c0       	rjmp	.+354    	; 0x2c1e <xTaskGenericCreate+0x1c6>
    2abc:	d3 01       	movw	r26, r6
    2abe:	5a 96       	adiw	r26, 0x1a	; 26
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	31 96       	adiw	r30, 0x01	; 1
    2ac4:	ae 01       	movw	r20, r28
    2ac6:	48 5f       	subi	r20, 0xF8	; 248
    2ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aca:	ef 01       	movw	r28, r30
    2acc:	21 91       	ld	r18, Z+
    2ace:	2d 93       	st	X+, r18
    2ad0:	28 81       	ld	r18, Y
    2ad2:	22 23       	and	r18, r18
    2ad4:	19 f0       	breq	.+6      	; 0x2adc <xTaskGenericCreate+0x84>
    2ad6:	4e 17       	cp	r20, r30
    2ad8:	5f 07       	cpc	r21, r31
    2ada:	b9 f7       	brne	.-18     	; 0x2aca <xTaskGenericCreate+0x72>
    2adc:	f3 01       	movw	r30, r6
    2ade:	10 a2       	std	Z+32, r1	; 0x20
    2ae0:	40 2f       	mov	r20, r16
    2ae2:	05 30       	cpi	r16, 0x05	; 5
    2ae4:	08 f0       	brcs	.+2      	; 0x2ae8 <xTaskGenericCreate+0x90>
    2ae6:	44 e0       	ldi	r20, 0x04	; 4
    2ae8:	f3 01       	movw	r30, r6
    2aea:	46 8b       	std	Z+22, r20	; 0x16
    2aec:	12 86       	std	Z+10, r1	; 0x0a
    2aee:	13 86       	std	Z+11, r1	; 0x0b
    2af0:	14 8a       	std	Z+20, r1	; 0x14
    2af2:	15 8a       	std	Z+21, r1	; 0x15
    2af4:	60 86       	std	Z+8, r6	; 0x08
    2af6:	71 86       	std	Z+9, r7	; 0x09
    2af8:	25 e0       	ldi	r18, 0x05	; 5
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	24 1b       	sub	r18, r20
    2afe:	31 09       	sbc	r19, r1
    2b00:	24 87       	std	Z+12, r18	; 0x0c
    2b02:	35 87       	std	Z+13, r19	; 0x0d
    2b04:	62 8a       	std	Z+18, r6	; 0x12
    2b06:	73 8a       	std	Z+19, r7	; 0x13
    2b08:	11 a2       	std	Z+33, r1	; 0x21
    2b0a:	12 a2       	std	Z+34, r1	; 0x22
    2b0c:	13 a2       	std	Z+35, r1	; 0x23
    2b0e:	14 a2       	std	Z+36, r1	; 0x24
    2b10:	15 a2       	std	Z+37, r1	; 0x25
    2b12:	a2 01       	movw	r20, r4
    2b14:	b4 01       	movw	r22, r8
    2b16:	cf db       	rcall	.-2146   	; 0x22b6 <pxPortInitialiseStack>
    2b18:	f3 01       	movw	r30, r6
    2b1a:	80 83       	st	Z, r24
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	e1 14       	cp	r14, r1
    2b20:	f1 04       	cpc	r15, r1
    2b22:	19 f0       	breq	.+6      	; 0x2b2a <xTaskGenericCreate+0xd2>
    2b24:	f7 01       	movw	r30, r14
    2b26:	60 82       	st	Z, r6
    2b28:	71 82       	std	Z+1, r7	; 0x01
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	0f 92       	push	r0
    2b30:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <uxCurrentNumberOfTasks>
    2b34:	8f 5f       	subi	r24, 0xFF	; 255
    2b36:	80 93 46 23 	sts	0x2346, r24	; 0x802346 <uxCurrentNumberOfTasks>
    2b3a:	80 91 93 23 	lds	r24, 0x2393	; 0x802393 <pxCurrentTCB>
    2b3e:	90 91 94 23 	lds	r25, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2b42:	89 2b       	or	r24, r25
    2b44:	61 f5       	brne	.+88     	; 0x2b9e <xTaskGenericCreate+0x146>
    2b46:	60 92 93 23 	sts	0x2393, r6	; 0x802393 <pxCurrentTCB>
    2b4a:	70 92 94 23 	sts	0x2394, r7	; 0x802394 <pxCurrentTCB+0x1>
    2b4e:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <uxCurrentNumberOfTasks>
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	99 f5       	brne	.+102    	; 0x2bbc <xTaskGenericCreate+0x164>
    2b56:	c6 e6       	ldi	r28, 0x66	; 102
    2b58:	d3 e2       	ldi	r29, 0x23	; 35
    2b5a:	0f 2e       	mov	r0, r31
    2b5c:	f3 e9       	ldi	r31, 0x93	; 147
    2b5e:	ef 2e       	mov	r14, r31
    2b60:	f3 e2       	ldi	r31, 0x23	; 35
    2b62:	ff 2e       	mov	r15, r31
    2b64:	f0 2d       	mov	r31, r0
    2b66:	ce 01       	movw	r24, r28
    2b68:	d2 d8       	rcall	.-3676   	; 0x1d0e <vListInitialise>
    2b6a:	29 96       	adiw	r28, 0x09	; 9
    2b6c:	ce 15       	cp	r28, r14
    2b6e:	df 05       	cpc	r29, r15
    2b70:	d1 f7       	brne	.-12     	; 0x2b66 <xTaskGenericCreate+0x10e>
    2b72:	8d e5       	ldi	r24, 0x5D	; 93
    2b74:	93 e2       	ldi	r25, 0x23	; 35
    2b76:	cb d8       	rcall	.-3690   	; 0x1d0e <vListInitialise>
    2b78:	84 e5       	ldi	r24, 0x54	; 84
    2b7a:	93 e2       	ldi	r25, 0x23	; 35
    2b7c:	c8 d8       	rcall	.-3696   	; 0x1d0e <vListInitialise>
    2b7e:	87 e4       	ldi	r24, 0x47	; 71
    2b80:	93 e2       	ldi	r25, 0x23	; 35
    2b82:	c5 d8       	rcall	.-3702   	; 0x1d0e <vListInitialise>
    2b84:	8d e5       	ldi	r24, 0x5D	; 93
    2b86:	93 e2       	ldi	r25, 0x23	; 35
    2b88:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <pxDelayedTaskList>
    2b8c:	90 93 53 23 	sts	0x2353, r25	; 0x802353 <pxDelayedTaskList+0x1>
    2b90:	84 e5       	ldi	r24, 0x54	; 84
    2b92:	93 e2       	ldi	r25, 0x23	; 35
    2b94:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <pxOverflowDelayedTaskList>
    2b98:	90 93 51 23 	sts	0x2351, r25	; 0x802351 <pxOverflowDelayedTaskList+0x1>
    2b9c:	0f c0       	rjmp	.+30     	; 0x2bbc <xTaskGenericCreate+0x164>
    2b9e:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <xSchedulerRunning>
    2ba2:	81 11       	cpse	r24, r1
    2ba4:	0b c0       	rjmp	.+22     	; 0x2bbc <xTaskGenericCreate+0x164>
    2ba6:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    2baa:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2bae:	86 89       	ldd	r24, Z+22	; 0x16
    2bb0:	08 17       	cp	r16, r24
    2bb2:	20 f0       	brcs	.+8      	; 0x2bbc <xTaskGenericCreate+0x164>
    2bb4:	60 92 93 23 	sts	0x2393, r6	; 0x802393 <pxCurrentTCB>
    2bb8:	70 92 94 23 	sts	0x2394, r7	; 0x802394 <pxCurrentTCB+0x1>
    2bbc:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <uxTaskNumber>
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	80 93 3e 23 	sts	0x233E, r24	; 0x80233e <uxTaskNumber>
    2bc6:	f3 01       	movw	r30, r6
    2bc8:	86 89       	ldd	r24, Z+22	; 0x16
    2bca:	90 91 43 23 	lds	r25, 0x2343	; 0x802343 <uxTopReadyPriority>
    2bce:	98 17       	cp	r25, r24
    2bd0:	10 f4       	brcc	.+4      	; 0x2bd6 <xTaskGenericCreate+0x17e>
    2bd2:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <uxTopReadyPriority>
    2bd6:	b3 01       	movw	r22, r6
    2bd8:	6e 5f       	subi	r22, 0xFE	; 254
    2bda:	7f 4f       	sbci	r23, 0xFF	; 255
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 01       	movw	r18, r24
    2be0:	22 0f       	add	r18, r18
    2be2:	33 1f       	adc	r19, r19
    2be4:	22 0f       	add	r18, r18
    2be6:	33 1f       	adc	r19, r19
    2be8:	22 0f       	add	r18, r18
    2bea:	33 1f       	adc	r19, r19
    2bec:	82 0f       	add	r24, r18
    2bee:	93 1f       	adc	r25, r19
    2bf0:	8a 59       	subi	r24, 0x9A	; 154
    2bf2:	9c 4d       	sbci	r25, 0xDC	; 220
    2bf4:	9a d8       	rcall	.-3788   	; 0x1d2a <vListInsertEnd>
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <xSchedulerRunning>
    2bfe:	88 23       	and	r24, r24
    2c00:	51 f0       	breq	.+20     	; 0x2c16 <xTaskGenericCreate+0x1be>
    2c02:	e0 91 93 23 	lds	r30, 0x2393	; 0x802393 <pxCurrentTCB>
    2c06:	f0 91 94 23 	lds	r31, 0x2394	; 0x802394 <pxCurrentTCB+0x1>
    2c0a:	86 89       	ldd	r24, Z+22	; 0x16
    2c0c:	80 17       	cp	r24, r16
    2c0e:	28 f4       	brcc	.+10     	; 0x2c1a <xTaskGenericCreate+0x1c2>
    2c10:	0e dc       	rcall	.-2020   	; 0x242e <vPortYield>
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <xTaskGenericCreate+0x1c8>
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <xTaskGenericCreate+0x1c8>
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <xTaskGenericCreate+0x1c8>
    2c1e:	8f ef       	ldi	r24, 0xFF	; 255
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	bf 90       	pop	r11
    2c30:	af 90       	pop	r10
    2c32:	9f 90       	pop	r9
    2c34:	8f 90       	pop	r8
    2c36:	7f 90       	pop	r7
    2c38:	6f 90       	pop	r6
    2c3a:	5f 90       	pop	r5
    2c3c:	4f 90       	pop	r4
    2c3e:	08 95       	ret

00002c40 <xTimerCreateTimerTask>:
    2c40:	af 92       	push	r10
    2c42:	bf 92       	push	r11
    2c44:	cf 92       	push	r12
    2c46:	df 92       	push	r13
    2c48:	ef 92       	push	r14
    2c4a:	ff 92       	push	r15
    2c4c:	0f 93       	push	r16
    2c4e:	d2 de       	rcall	.-604    	; 0x29f4 <prvCheckForValidListAndQueue>
    2c50:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <xTimerQueue>
    2c54:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <xTimerQueue+0x1>
    2c58:	89 2b       	or	r24, r25
    2c5a:	89 f0       	breq	.+34     	; 0x2c7e <xTimerCreateTimerTask+0x3e>
    2c5c:	a1 2c       	mov	r10, r1
    2c5e:	b1 2c       	mov	r11, r1
    2c60:	c1 2c       	mov	r12, r1
    2c62:	d1 2c       	mov	r13, r1
    2c64:	e1 2c       	mov	r14, r1
    2c66:	f1 2c       	mov	r15, r1
    2c68:	03 e0       	ldi	r16, 0x03	; 3
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	45 e5       	ldi	r20, 0x55	; 85
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	6f e0       	ldi	r22, 0x0F	; 15
    2c74:	70 e2       	ldi	r23, 0x20	; 32
    2c76:	84 e2       	ldi	r24, 0x24	; 36
    2c78:	97 e1       	ldi	r25, 0x17	; 23
    2c7a:	ee de       	rcall	.-548    	; 0x2a58 <xTaskGenericCreate>
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <xTimerCreateTimerTask+0x40>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	0f 91       	pop	r16
    2c82:	ff 90       	pop	r15
    2c84:	ef 90       	pop	r14
    2c86:	df 90       	pop	r13
    2c88:	cf 90       	pop	r12
    2c8a:	bf 90       	pop	r11
    2c8c:	af 90       	pop	r10
    2c8e:	08 95       	ret

00002c90 <vTaskStartScheduler>:
    2c90:	af 92       	push	r10
    2c92:	bf 92       	push	r11
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ef 92       	push	r14
    2c9a:	ff 92       	push	r15
    2c9c:	0f 93       	push	r16
    2c9e:	a1 2c       	mov	r10, r1
    2ca0:	b1 2c       	mov	r11, r1
    2ca2:	c1 2c       	mov	r12, r1
    2ca4:	d1 2c       	mov	r13, r1
    2ca6:	e1 2c       	mov	r14, r1
    2ca8:	f1 2c       	mov	r15, r1
    2caa:	00 e0       	ldi	r16, 0x00	; 0
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	45 e5       	ldi	r20, 0x55	; 85
    2cb2:	50 e0       	ldi	r21, 0x00	; 0
    2cb4:	67 e1       	ldi	r22, 0x17	; 23
    2cb6:	70 e2       	ldi	r23, 0x20	; 32
    2cb8:	8f e6       	ldi	r24, 0x6F	; 111
    2cba:	92 e1       	ldi	r25, 0x12	; 18
    2cbc:	cd de       	rcall	.-614    	; 0x2a58 <xTaskGenericCreate>
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	59 f4       	brne	.+22     	; 0x2cd8 <vTaskStartScheduler+0x48>
    2cc2:	be df       	rcall	.-132    	; 0x2c40 <xTimerCreateTimerTask>
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	41 f4       	brne	.+16     	; 0x2cd8 <vTaskStartScheduler+0x48>
    2cc8:	f8 94       	cli
    2cca:	80 93 42 23 	sts	0x2342, r24	; 0x802342 <xSchedulerRunning>
    2cce:	10 92 44 23 	sts	0x2344, r1	; 0x802344 <xTickCount>
    2cd2:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <xTickCount+0x1>
    2cd6:	66 db       	rcall	.-2356   	; 0x23a4 <xPortStartScheduler>
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	bf 90       	pop	r11
    2ce4:	af 90       	pop	r10
    2ce6:	08 95       	ret

00002ce8 <xTimerGenericCommand>:
    2ce8:	ef 92       	push	r14
    2cea:	ff 92       	push	r15
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	25 97       	sbiw	r28, 0x05	; 5
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	e0 90 25 23 	lds	r14, 0x2325	; 0x802325 <xTimerQueue>
    2d02:	f0 90 26 23 	lds	r15, 0x2326	; 0x802326 <xTimerQueue+0x1>
    2d06:	e1 14       	cp	r14, r1
    2d08:	f1 04       	cpc	r15, r1
    2d0a:	29 f1       	breq	.+74     	; 0x2d56 <xTimerGenericCommand+0x6e>
    2d0c:	f9 01       	movw	r30, r18
    2d0e:	69 83       	std	Y+1, r22	; 0x01
    2d10:	4a 83       	std	Y+2, r20	; 0x02
    2d12:	5b 83       	std	Y+3, r21	; 0x03
    2d14:	8c 83       	std	Y+4, r24	; 0x04
    2d16:	9d 83       	std	Y+5, r25	; 0x05
    2d18:	66 30       	cpi	r22, 0x06	; 6
    2d1a:	ac f4       	brge	.+42     	; 0x2d46 <xTimerGenericCommand+0x5e>
    2d1c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskGetSchedulerState>
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	41 f4       	brne	.+16     	; 0x2d34 <xTimerGenericCommand+0x4c>
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	a8 01       	movw	r20, r16
    2d28:	be 01       	movw	r22, r28
    2d2a:	6f 5f       	subi	r22, 0xFF	; 255
    2d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2e:	c7 01       	movw	r24, r14
    2d30:	ae dc       	rcall	.-1700   	; 0x268e <xQueueGenericSend>
    2d32:	12 c0       	rjmp	.+36     	; 0x2d58 <xTimerGenericCommand+0x70>
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	be 01       	movw	r22, r28
    2d3c:	6f 5f       	subi	r22, 0xFF	; 255
    2d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d40:	c7 01       	movw	r24, r14
    2d42:	a5 dc       	rcall	.-1718   	; 0x268e <xQueueGenericSend>
    2d44:	09 c0       	rjmp	.+18     	; 0x2d58 <xTimerGenericCommand+0x70>
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	af 01       	movw	r20, r30
    2d4a:	be 01       	movw	r22, r28
    2d4c:	6f 5f       	subi	r22, 0xFF	; 255
    2d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d50:	c7 01       	movw	r24, r14
    2d52:	7b da       	rcall	.-2826   	; 0x224a <xQueueGenericSendFromISR>
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <xTimerGenericCommand+0x70>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	25 96       	adiw	r28, 0x05	; 5
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	ff 90       	pop	r15
    2d68:	ef 90       	pop	r14
    2d6a:	08 95       	ret

00002d6c <prvSampleTimeNow>:
    2d6c:	af 92       	push	r10
    2d6e:	bf 92       	push	r11
    2d70:	cf 92       	push	r12
    2d72:	df 92       	push	r13
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	6c 01       	movw	r12, r24
    2d82:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <xTaskGetTickCount>
    2d86:	7c 01       	movw	r14, r24
    2d88:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <xLastTime.6906>
    2d8c:	90 91 a4 22 	lds	r25, 0x22A4	; 0x8022a4 <xLastTime.6906+0x1>
    2d90:	e8 16       	cp	r14, r24
    2d92:	f9 06       	cpc	r15, r25
    2d94:	08 f0       	brcs	.+2      	; 0x2d98 <prvSampleTimeNow+0x2c>
    2d96:	46 c0       	rjmp	.+140    	; 0x2e24 <prvSampleTimeNow+0xb8>
    2d98:	2e c0       	rjmp	.+92     	; 0x2df6 <prvSampleTimeNow+0x8a>
    2d9a:	05 80       	ldd	r0, Z+5	; 0x05
    2d9c:	f6 81       	ldd	r31, Z+6	; 0x06
    2d9e:	e0 2d       	mov	r30, r0
    2da0:	a0 80       	ld	r10, Z
    2da2:	b1 80       	ldd	r11, Z+1	; 0x01
    2da4:	c6 81       	ldd	r28, Z+6	; 0x06
    2da6:	d7 81       	ldd	r29, Z+7	; 0x07
    2da8:	8e 01       	movw	r16, r28
    2daa:	0e 5f       	subi	r16, 0xFE	; 254
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	c8 01       	movw	r24, r16
    2db0:	70 d8       	rcall	.-3872   	; 0x1e92 <uxListRemove>
    2db2:	e9 89       	ldd	r30, Y+17	; 0x11
    2db4:	fa 89       	ldd	r31, Y+18	; 0x12
    2db6:	ce 01       	movw	r24, r28
    2db8:	19 95       	eicall
    2dba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	d9 f4       	brne	.+54     	; 0x2df6 <prvSampleTimeNow+0x8a>
    2dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dc4:	8a 0d       	add	r24, r10
    2dc6:	9b 1d       	adc	r25, r11
    2dc8:	a8 16       	cp	r10, r24
    2dca:	b9 06       	cpc	r11, r25
    2dcc:	60 f4       	brcc	.+24     	; 0x2de6 <prvSampleTimeNow+0x7a>
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	9b 83       	std	Y+3, r25	; 0x03
    2dd2:	c8 87       	std	Y+8, r28	; 0x08
    2dd4:	d9 87       	std	Y+9, r29	; 0x09
    2dd6:	b8 01       	movw	r22, r16
    2dd8:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <pxCurrentTimerList>
    2ddc:	90 91 2a 23 	lds	r25, 0x232A	; 0x80232a <pxCurrentTimerList+0x1>
    2de0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <vListInsert>
    2de4:	08 c0       	rjmp	.+16     	; 0x2df6 <prvSampleTimeNow+0x8a>
    2de6:	00 e0       	ldi	r16, 0x00	; 0
    2de8:	10 e0       	ldi	r17, 0x00	; 0
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	a5 01       	movw	r20, r10
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	ce 01       	movw	r24, r28
    2df4:	79 df       	rcall	.-270    	; 0x2ce8 <xTimerGenericCommand>
    2df6:	e0 91 29 23 	lds	r30, 0x2329	; 0x802329 <pxCurrentTimerList>
    2dfa:	f0 91 2a 23 	lds	r31, 0x232A	; 0x80232a <pxCurrentTimerList+0x1>
    2dfe:	80 81       	ld	r24, Z
    2e00:	81 11       	cpse	r24, r1
    2e02:	cb cf       	rjmp	.-106    	; 0x2d9a <prvSampleTimeNow+0x2e>
    2e04:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <pxOverflowTimerList>
    2e08:	90 91 28 23 	lds	r25, 0x2328	; 0x802328 <pxOverflowTimerList+0x1>
    2e0c:	80 93 29 23 	sts	0x2329, r24	; 0x802329 <pxCurrentTimerList>
    2e10:	90 93 2a 23 	sts	0x232A, r25	; 0x80232a <pxCurrentTimerList+0x1>
    2e14:	e0 93 27 23 	sts	0x2327, r30	; 0x802327 <pxOverflowTimerList>
    2e18:	f0 93 28 23 	sts	0x2328, r31	; 0x802328 <pxOverflowTimerList+0x1>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	f6 01       	movw	r30, r12
    2e20:	80 83       	st	Z, r24
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <prvSampleTimeNow+0xbc>
    2e24:	f6 01       	movw	r30, r12
    2e26:	10 82       	st	Z, r1
    2e28:	e0 92 a3 22 	sts	0x22A3, r14	; 0x8022a3 <xLastTime.6906>
    2e2c:	f0 92 a4 22 	sts	0x22A4, r15	; 0x8022a4 <xLastTime.6906+0x1>
    2e30:	c7 01       	movw	r24, r14
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	1f 91       	pop	r17
    2e38:	0f 91       	pop	r16
    2e3a:	ff 90       	pop	r15
    2e3c:	ef 90       	pop	r14
    2e3e:	df 90       	pop	r13
    2e40:	cf 90       	pop	r12
    2e42:	bf 90       	pop	r11
    2e44:	af 90       	pop	r10
    2e46:	08 95       	ret

00002e48 <prvTimerTask>:
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <prvTimerTask+0x6>
    2e4e:	00 d0       	rcall	.+0      	; 0x2e50 <prvTimerTask+0x8>
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	ce 01       	movw	r24, r28
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	5c 01       	movw	r10, r24
    2e5a:	e8 2e       	mov	r14, r24
    2e5c:	fb 2c       	mov	r15, r11
    2e5e:	e0 91 29 23 	lds	r30, 0x2329	; 0x802329 <pxCurrentTimerList>
    2e62:	f0 91 2a 23 	lds	r31, 0x232A	; 0x80232a <pxCurrentTimerList+0x1>
    2e66:	80 81       	ld	r24, Z
    2e68:	88 23       	and	r24, r24
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <prvTimerTask+0x26>
    2e6c:	b9 c0       	rjmp	.+370    	; 0x2fe0 <prvTimerTask+0x198>
    2e6e:	05 80       	ldd	r0, Z+5	; 0x05
    2e70:	f6 81       	ldd	r31, Z+6	; 0x06
    2e72:	e0 2d       	mov	r30, r0
    2e74:	c0 80       	ld	r12, Z
    2e76:	d1 80       	ldd	r13, Z+1	; 0x01
    2e78:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vTaskSuspendAll>
    2e7c:	c5 01       	movw	r24, r10
    2e7e:	76 df       	rcall	.-276    	; 0x2d6c <prvSampleTimeNow>
    2e80:	8c 01       	movw	r16, r24
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	81 11       	cpse	r24, r1
    2e86:	43 c0       	rjmp	.+134    	; 0x2f0e <prvTimerTask+0xc6>
    2e88:	0c 15       	cp	r16, r12
    2e8a:	1d 05       	cpc	r17, r13
    2e8c:	98 f1       	brcs	.+102    	; 0x2ef4 <prvTimerTask+0xac>
    2e8e:	2e db       	rcall	.-2468   	; 0x24ec <xTaskResumeAll>
    2e90:	e0 91 29 23 	lds	r30, 0x2329	; 0x802329 <pxCurrentTimerList>
    2e94:	f0 91 2a 23 	lds	r31, 0x232A	; 0x80232a <pxCurrentTimerList+0x1>
    2e98:	05 80       	ldd	r0, Z+5	; 0x05
    2e9a:	f6 81       	ldd	r31, Z+6	; 0x06
    2e9c:	e0 2d       	mov	r30, r0
    2e9e:	86 80       	ldd	r8, Z+6	; 0x06
    2ea0:	97 80       	ldd	r9, Z+7	; 0x07
    2ea2:	c4 01       	movw	r24, r8
    2ea4:	02 96       	adiw	r24, 0x02	; 2
    2ea6:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <uxListRemove>
    2eaa:	d4 01       	movw	r26, r8
    2eac:	1e 96       	adiw	r26, 0x0e	; 14
    2eae:	8c 91       	ld	r24, X
    2eb0:	1e 97       	sbiw	r26, 0x0e	; 14
    2eb2:	81 30       	cpi	r24, 0x01	; 1
    2eb4:	a9 f4       	brne	.+42     	; 0x2ee0 <prvTimerTask+0x98>
    2eb6:	1c 96       	adiw	r26, 0x0c	; 12
    2eb8:	6d 91       	ld	r22, X+
    2eba:	7c 91       	ld	r23, X
    2ebc:	1d 97       	sbiw	r26, 0x0d	; 13
    2ebe:	6c 0d       	add	r22, r12
    2ec0:	7d 1d       	adc	r23, r13
    2ec2:	96 01       	movw	r18, r12
    2ec4:	a8 01       	movw	r20, r16
    2ec6:	c4 01       	movw	r24, r8
    2ec8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <prvInsertTimerInActiveList>
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	41 f4       	brne	.+16     	; 0x2ee0 <prvTimerTask+0x98>
    2ed0:	00 e0       	ldi	r16, 0x00	; 0
    2ed2:	10 e0       	ldi	r17, 0x00	; 0
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	a6 01       	movw	r20, r12
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	c4 01       	movw	r24, r8
    2ede:	04 df       	rcall	.-504    	; 0x2ce8 <xTimerGenericCommand>
    2ee0:	d4 01       	movw	r26, r8
    2ee2:	51 96       	adiw	r26, 0x11	; 17
    2ee4:	ed 91       	ld	r30, X+
    2ee6:	fc 91       	ld	r31, X
    2ee8:	52 97       	sbiw	r26, 0x12	; 18
    2eea:	c4 01       	movw	r24, r8
    2eec:	19 95       	eicall
    2eee:	6b c0       	rjmp	.+214    	; 0x2fc6 <prvTimerTask+0x17e>
    2ef0:	c1 2c       	mov	r12, r1
    2ef2:	d1 2c       	mov	r13, r1
    2ef4:	b6 01       	movw	r22, r12
    2ef6:	60 1b       	sub	r22, r16
    2ef8:	71 0b       	sbc	r23, r17
    2efa:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <xTimerQueue>
    2efe:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <xTimerQueue+0x1>
    2f02:	88 d9       	rcall	.-3312   	; 0x2214 <vQueueWaitForMessageRestricted>
    2f04:	f3 da       	rcall	.-2586   	; 0x24ec <xTaskResumeAll>
    2f06:	81 11       	cpse	r24, r1
    2f08:	5e c0       	rjmp	.+188    	; 0x2fc6 <prvTimerTask+0x17e>
    2f0a:	91 da       	rcall	.-2782   	; 0x242e <vPortYield>
    2f0c:	5c c0       	rjmp	.+184    	; 0x2fc6 <prvTimerTask+0x17e>
    2f0e:	ee da       	rcall	.-2596   	; 0x24ec <xTaskResumeAll>
    2f10:	5a c0       	rjmp	.+180    	; 0x2fc6 <prvTimerTask+0x17e>
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	88 23       	and	r24, r24
    2f16:	0c f4       	brge	.+2      	; 0x2f1a <prvTimerTask+0xd2>
    2f18:	56 c0       	rjmp	.+172    	; 0x2fc6 <prvTimerTask+0x17e>
    2f1a:	cc 80       	ldd	r12, Y+4	; 0x04
    2f1c:	dd 80       	ldd	r13, Y+5	; 0x05
    2f1e:	f6 01       	movw	r30, r12
    2f20:	82 85       	ldd	r24, Z+10	; 0x0a
    2f22:	93 85       	ldd	r25, Z+11	; 0x0b
    2f24:	89 2b       	or	r24, r25
    2f26:	21 f0       	breq	.+8      	; 0x2f30 <prvTimerTask+0xe8>
    2f28:	c6 01       	movw	r24, r12
    2f2a:	02 96       	adiw	r24, 0x02	; 2
    2f2c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <uxListRemove>
    2f30:	ce 01       	movw	r24, r28
    2f32:	06 96       	adiw	r24, 0x06	; 6
    2f34:	1b df       	rcall	.-458    	; 0x2d6c <prvSampleTimeNow>
    2f36:	ac 01       	movw	r20, r24
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	08 2e       	mov	r0, r24
    2f3c:	00 0c       	add	r0, r0
    2f3e:	99 0b       	sbc	r25, r25
    2f40:	aa 0b       	sbc	r26, r26
    2f42:	bb 0b       	sbc	r27, r27
    2f44:	8a 30       	cpi	r24, 0x0A	; 10
    2f46:	91 05       	cpc	r25, r1
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <prvTimerTask+0x104>
    2f4a:	3d c0       	rjmp	.+122    	; 0x2fc6 <prvTimerTask+0x17e>
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	88 27       	eor	r24, r24
    2f50:	e2 50       	subi	r30, 0x02	; 2
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	8f 4f       	sbci	r24, 0xFF	; 255
    2f56:	e7 c1       	rjmp	.+974    	; 0x3326 <__tablejump2__>
    2f58:	2a 81       	ldd	r18, Y+2	; 0x02
    2f5a:	3b 81       	ldd	r19, Y+3	; 0x03
    2f5c:	d6 01       	movw	r26, r12
    2f5e:	1c 96       	adiw	r26, 0x0c	; 12
    2f60:	6d 91       	ld	r22, X+
    2f62:	7c 91       	ld	r23, X
    2f64:	1d 97       	sbiw	r26, 0x0d	; 13
    2f66:	62 0f       	add	r22, r18
    2f68:	73 1f       	adc	r23, r19
    2f6a:	c6 01       	movw	r24, r12
    2f6c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <prvInsertTimerInActiveList>
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	49 f5       	brne	.+82     	; 0x2fc6 <prvTimerTask+0x17e>
    2f74:	d6 01       	movw	r26, r12
    2f76:	51 96       	adiw	r26, 0x11	; 17
    2f78:	ed 91       	ld	r30, X+
    2f7a:	fc 91       	ld	r31, X
    2f7c:	52 97       	sbiw	r26, 0x12	; 18
    2f7e:	c6 01       	movw	r24, r12
    2f80:	19 95       	eicall
    2f82:	f6 01       	movw	r30, r12
    2f84:	86 85       	ldd	r24, Z+14	; 0x0e
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	f1 f4       	brne	.+60     	; 0x2fc6 <prvTimerTask+0x17e>
    2f8a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f8c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f8e:	84 85       	ldd	r24, Z+12	; 0x0c
    2f90:	95 85       	ldd	r25, Z+13	; 0x0d
    2f92:	48 0f       	add	r20, r24
    2f94:	59 1f       	adc	r21, r25
    2f96:	00 e0       	ldi	r16, 0x00	; 0
    2f98:	10 e0       	ldi	r17, 0x00	; 0
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	c6 01       	movw	r24, r12
    2fa2:	a2 de       	rcall	.-700    	; 0x2ce8 <xTimerGenericCommand>
    2fa4:	10 c0       	rjmp	.+32     	; 0x2fc6 <prvTimerTask+0x17e>
    2fa6:	6a 81       	ldd	r22, Y+2	; 0x02
    2fa8:	7b 81       	ldd	r23, Y+3	; 0x03
    2faa:	d6 01       	movw	r26, r12
    2fac:	1c 96       	adiw	r26, 0x0c	; 12
    2fae:	6d 93       	st	X+, r22
    2fb0:	7c 93       	st	X, r23
    2fb2:	1d 97       	sbiw	r26, 0x0d	; 13
    2fb4:	64 0f       	add	r22, r20
    2fb6:	75 1f       	adc	r23, r21
    2fb8:	9a 01       	movw	r18, r20
    2fba:	c6 01       	movw	r24, r12
    2fbc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <prvInsertTimerInActiveList>
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <prvTimerTask+0x17e>
    2fc2:	c6 01       	movw	r24, r12
    2fc4:	3d dd       	rcall	.-1414   	; 0x2a40 <vPortFree>
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	6e 2d       	mov	r22, r14
    2fce:	7f 2d       	mov	r23, r15
    2fd0:	80 91 25 23 	lds	r24, 0x2325	; 0x802325 <xTimerQueue>
    2fd4:	90 91 26 23 	lds	r25, 0x2326	; 0x802326 <xTimerQueue+0x1>
    2fd8:	e7 db       	rcall	.-2098   	; 0x27a8 <xQueueGenericReceive>
    2fda:	81 11       	cpse	r24, r1
    2fdc:	9a cf       	rjmp	.-204    	; 0x2f12 <prvTimerTask+0xca>
    2fde:	3f cf       	rjmp	.-386    	; 0x2e5e <prvTimerTask+0x16>
    2fe0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <vTaskSuspendAll>
    2fe4:	c5 01       	movw	r24, r10
    2fe6:	c2 de       	rcall	.-636    	; 0x2d6c <prvSampleTimeNow>
    2fe8:	8c 01       	movw	r16, r24
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	88 23       	and	r24, r24
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <prvTimerTask+0x1aa>
    2ff0:	7f cf       	rjmp	.-258    	; 0x2ef0 <prvTimerTask+0xa8>
    2ff2:	8d cf       	rjmp	.-230    	; 0x2f0e <prvTimerTask+0xc6>

00002ff4 <PWM_Init>:
    2ff4:	e0 e4       	ldi	r30, 0x40	; 64
    2ff6:	f6 e0       	ldi	r31, 0x06	; 6
    2ff8:	80 81       	ld	r24, Z
    2ffa:	81 60       	ori	r24, 0x01	; 1
    2ffc:	80 83       	st	Z, r24
    2ffe:	e0 e0       	ldi	r30, 0x00	; 0
    3000:	f8 e0       	ldi	r31, 0x08	; 8
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	80 83       	st	Z, r24
    3006:	86 e1       	ldi	r24, 0x16	; 22
    3008:	81 83       	std	Z+1, r24	; 0x01
    300a:	88 ee       	ldi	r24, 0xE8	; 232
    300c:	93 e0       	ldi	r25, 0x03	; 3
    300e:	86 a3       	std	Z+38, r24	; 0x26
    3010:	97 a3       	std	Z+39, r25	; 0x27
    3012:	10 a6       	std	Z+40, r1	; 0x28
    3014:	11 a6       	std	Z+41, r1	; 0x29
    3016:	08 95       	ret

00003018 <ADC_Init>:
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	2b 97       	sbiw	r28, 0x0b	; 11
    3022:	cd bf       	out	0x3d, r28	; 61
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	be 01       	movw	r22, r28
    3028:	6f 5f       	subi	r22, 0xFF	; 255
    302a:	7f 4f       	sbci	r23, 0xFF	; 255
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	92 e0       	ldi	r25, 0x02	; 2
    3030:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <adc_read_configuration>
    3034:	ae 01       	movw	r20, r28
    3036:	48 5f       	subi	r20, 0xF8	; 248
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	92 e0       	ldi	r25, 0x02	; 2
    3040:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <adcch_read_configuration>
    3044:	9a 81       	ldd	r25, Y+2	; 0x02
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	8f 78       	andi	r24, 0x8F	; 143
    304a:	80 61       	ori	r24, 0x10	; 16
    304c:	8b 83       	std	Y+3, r24	; 0x03
    304e:	82 e0       	ldi	r24, 0x02	; 2
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	89 2f       	mov	r24, r25
    3054:	81 7e       	andi	r24, 0xE1	; 225
    3056:	8a 83       	std	Y+2, r24	; 0x02
    3058:	1c 82       	std	Y+4, r1	; 0x04
    305a:	be 01       	movw	r22, r28
    305c:	6f 5f       	subi	r22, 0xFF	; 255
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	92 e0       	ldi	r25, 0x02	; 2
    3064:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <adc_write_configuration>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	88 87       	std	Y+8, r24	; 0x08
    306c:	19 86       	std	Y+9, r1	; 0x09
    306e:	ae 01       	movw	r20, r28
    3070:	48 5f       	subi	r20, 0xF8	; 248
    3072:	5f 4f       	sbci	r21, 0xFF	; 255
    3074:	61 e0       	ldi	r22, 0x01	; 1
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	92 e0       	ldi	r25, 0x02	; 2
    307a:	0e 94 91 0a 	call	0x1522	; 0x1522 <adcch_write_configuration>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	92 e0       	ldi	r25, 0x02	; 2
    3082:	0e 94 36 08 	call	0x106c	; 0x106c <adc_enable>
    3086:	2b 96       	adiw	r28, 0x0b	; 11
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	08 95       	ret

00003092 <ADC_Read>:
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	1f 92       	push	r1
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	8f b7       	in	r24, 0x3f	; 63
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	f8 94       	cli
    30a2:	99 81       	ldd	r25, Y+1	; 0x01
    30a4:	e0 e0       	ldi	r30, 0x00	; 0
    30a6:	f2 e0       	ldi	r31, 0x02	; 2
    30a8:	80 81       	ld	r24, Z
    30aa:	84 60       	ori	r24, 0x04	; 4
    30ac:	80 83       	st	Z, r24
    30ae:	9f bf       	out	0x3f, r25	; 63
    30b0:	86 81       	ldd	r24, Z+6	; 0x06
    30b2:	80 ff       	sbrs	r24, 0
    30b4:	fd cf       	rjmp	.-6      	; 0x30b0 <ADC_Read+0x1e>
    30b6:	e0 e0       	ldi	r30, 0x00	; 0
    30b8:	f2 e0       	ldi	r31, 0x02	; 2
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	86 83       	std	Z+6, r24	; 0x06
    30be:	84 a1       	ldd	r24, Z+36	; 0x24
    30c0:	95 a1       	ldd	r25, Z+37	; 0x25
    30c2:	0f 90       	pop	r0
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	08 95       	ret

000030ca <vSendLdrData>:
    30ca:	0c e1       	ldi	r16, 0x1C	; 28
    30cc:	10 e2       	ldi	r17, 0x20	; 32
    30ce:	68 94       	set
    30d0:	ff 24       	eor	r15, r15
    30d2:	f7 f8       	bld	r15, 7
    30d4:	c5 ea       	ldi	r28, 0xA5	; 165
    30d6:	d2 e2       	ldi	r29, 0x22	; 34
    30d8:	dc df       	rcall	.-72     	; 0x3092 <ADC_Read>
    30da:	9f 93       	push	r25
    30dc:	8f 93       	push	r24
    30de:	1f 93       	push	r17
    30e0:	0f 93       	push	r16
    30e2:	1f 92       	push	r1
    30e4:	ff 92       	push	r15
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	5e d2       	rcall	.+1212   	; 0x35a8 <snprintf>
    30ec:	ce 01       	movw	r24, r28
    30ee:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <usart_sendString>
    30f2:	8a ef       	ldi	r24, 0xFA	; 250
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	77 da       	rcall	.-2834   	; 0x25e6 <vTaskDelay>
    30f8:	8d b7       	in	r24, 0x3d	; 61
    30fa:	9e b7       	in	r25, 0x3e	; 62
    30fc:	08 96       	adiw	r24, 0x08	; 8
    30fe:	8d bf       	out	0x3d, r24	; 61
    3100:	9e bf       	out	0x3e, r25	; 62
    3102:	ea cf       	rjmp	.-44     	; 0x30d8 <vSendLdrData+0xe>

00003104 <PIR_Read>:
}

// Membaca status sensor PIR
bool PIR_Read(void) {
	return (PORTC.IN & PIR_SENSOR_PIN) ? 1 : 0;  // 1 jika ada gerakan, 0 jika tidak ada
    3104:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
}
    3108:	86 95       	lsr	r24
    310a:	81 70       	andi	r24, 0x01	; 1
    310c:	08 95       	ret

0000310e <vSendPirData>:
static portTASK_FUNCTION(vSendPirData, t_) {
    bool pir_sensor_active;

    while (1) {
        // Baca status sensor PIR
        pir_sensor_active = PIR_Read();
    310e:	fa df       	rcall	.-12     	; 0x3104 <PIR_Read>

        // Kirim status PIR via USART
        if (pir_sensor_active) {
    3110:	88 23       	and	r24, r24
    3112:	29 f0       	breq	.+10     	; 0x311e <vSendPirData+0x10>
            usart_sendString("PIR: Active\r\n");
    3114:	8c e2       	ldi	r24, 0x2C	; 44
    3116:	90 e2       	ldi	r25, 0x20	; 32
    3118:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <usart_sendString>
    311c:	04 c0       	rjmp	.+8      	; 0x3126 <vSendPirData+0x18>
        } else {
            usart_sendString("PIR: Inactive\r\n");
    311e:	8a e3       	ldi	r24, 0x3A	; 58
    3120:	90 e2       	ldi	r25, 0x20	; 32
    3122:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <usart_sendString>
        }

        // Delay task untuk mengurangi beban USART
        vTaskDelay(500 / portTICK_PERIOD_MS);
    3126:	8a ef       	ldi	r24, 0xFA	; 250
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	5d da       	rcall	.-2886   	; 0x25e6 <vTaskDelay>
    }
    312c:	f0 cf       	rjmp	.-32     	; 0x310e <vSendPirData>

0000312e <display_pir_value>:
	return (PORTC.IN & PIR_SENSOR_PIN) ? 1 : 0;  // 1 jika ada gerakan, 0 jika tidak ada
}

// Fungsi untuk menampilkan status sensor PIR
void display_pir_value(bool pir_sensor_active) {
	if (pir_sensor_active) {
    312e:	88 23       	and	r24, r24
    3130:	49 f0       	breq	.+18     	; 0x3144 <display_pir_value+0x16>
		gfx_mono_draw_string("PIR: Active  ", 0, 16, &sysfont);
    3132:	26 e0       	ldi	r18, 0x06	; 6
    3134:	30 e2       	ldi	r19, 0x20	; 32
    3136:	40 e1       	ldi	r20, 0x10	; 16
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	8a e4       	ldi	r24, 0x4A	; 74
    313c:	90 e2       	ldi	r25, 0x20	; 32
    313e:	0c 94 98 06 	jmp	0xd30	; 0xd30 <gfx_mono_draw_string>
    3142:	08 95       	ret
		} else {
		gfx_mono_draw_string("PIR: Inactive", 0, 16, &sysfont);
    3144:	26 e0       	ldi	r18, 0x06	; 6
    3146:	30 e2       	ldi	r19, 0x20	; 32
    3148:	40 e1       	ldi	r20, 0x10	; 16
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	88 e5       	ldi	r24, 0x58	; 88
    314e:	90 e2       	ldi	r25, 0x20	; 32
    3150:	0c 94 98 06 	jmp	0xd30	; 0xd30 <gfx_mono_draw_string>
    3154:	08 95       	ret

00003156 <vMotionDetection>:

void led_control(bool state) {
	if (state) {
		PORTC.OUTSET = PIN3_bm; // Turn on the LED
		} else {
		PORTC.OUTCLR = PIN3_bm; // Turn off the LED
    3156:	00 e4       	ldi	r16, 0x40	; 64
    3158:	16 e0       	ldi	r17, 0x06	; 6
    315a:	c8 e0       	ldi	r28, 0x08	; 8
			display_pir_value(true);
			led_control(true);
			} else {
			if (prev_led_state) {
				// Turn off PWM when no motion
				TCC0.CCA = 0;
    315c:	e1 2c       	mov	r14, r1
    315e:	68 94       	set
    3160:	ff 24       	eor	r15, r15
    3162:	f3 f8       	bld	r15, 3
	bool pir_sensor_active;
	static bool prev_led_state = false;

	while (1) {
		// Baca status sensor PIR
		pir_sensor_active = PIR_Read();
    3164:	cf df       	rcall	.-98     	; 0x3104 <PIR_Read>

		if (pir_sensor_active) {
    3166:	88 23       	and	r24, r24
    3168:	69 f0       	breq	.+26     	; 0x3184 <vMotionDetection+0x2e>
			if (!prev_led_state) {
    316a:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <prev_led_state.7027>
    316e:	81 11       	cpse	r24, r1
				// Turn on PWM when motion is first detected
				PWM_Init();  // Reinitialize PWM
    3170:	04 c0       	rjmp	.+8      	; 0x317a <vMotionDetection+0x24>
    3172:	40 df       	rcall	.-384    	; 0x2ff4 <PWM_Init>
				prev_led_state = true;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <prev_led_state.7027>
			}
			display_pir_value(true);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	d8 df       	rcall	.-80     	; 0x312e <display_pir_value>
	PORTC.DIRSET = PIN3_bm; // Set PC3 as output
}

void led_control(bool state) {
	if (state) {
		PORTC.OUTSET = PIN3_bm; // Turn on the LED
    317e:	f8 01       	movw	r30, r16
    3180:	c5 83       	std	Z+5, r28	; 0x05
    3182:	0d c0       	rjmp	.+26     	; 0x319e <vMotionDetection+0x48>
				prev_led_state = true;
			}
			display_pir_value(true);
			led_control(true);
			} else {
			if (prev_led_state) {
    3184:	80 91 a2 22 	lds	r24, 0x22A2	; 0x8022a2 <prev_led_state.7027>
    3188:	88 23       	and	r24, r24
    318a:	29 f0       	breq	.+10     	; 0x3196 <vMotionDetection+0x40>
				// Turn off PWM when no motion
				TCC0.CCA = 0;
    318c:	f7 01       	movw	r30, r14
    318e:	10 a6       	std	Z+40, r1	; 0x28
    3190:	11 a6       	std	Z+41, r1	; 0x29
				prev_led_state = false;
    3192:	10 92 a2 22 	sts	0x22A2, r1	; 0x8022a2 <prev_led_state.7027>
			}
			display_pir_value(false);
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	ca df       	rcall	.-108    	; 0x312e <display_pir_value>

void led_control(bool state) {
	if (state) {
		PORTC.OUTSET = PIN3_bm; // Turn on the LED
		} else {
		PORTC.OUTCLR = PIN3_bm; // Turn off the LED
    319a:	f8 01       	movw	r30, r16
			}
			display_pir_value(false);
			led_control(false);
		}

		vTaskDelay(500 / portTICK_PERIOD_MS);
    319c:	c6 83       	std	Z+6, r28	; 0x06
    319e:	8a ef       	ldi	r24, 0xFA	; 250
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	21 da       	rcall	.-3006   	; 0x25e6 <vTaskDelay>
	}
    31a4:	df cf       	rjmp	.-66     	; 0x3164 <vMotionDetection+0xe>

000031a6 <display_ldr_value>:
	}
}

// Fungsi untuk menampilkan nilai LDR dan PWM
void display_ldr_value(uint16_t ldr_value, uint16_t pwm_value) {
	snprintf(strbuf, sizeof(strbuf), "LDR: %4d PWM: %4d", ldr_value, pwm_value);
    31a6:	7f 93       	push	r23
    31a8:	6f 93       	push	r22
    31aa:	9f 93       	push	r25
    31ac:	8f 93       	push	r24
    31ae:	86 e6       	ldi	r24, 0x66	; 102
    31b0:	90 e2       	ldi	r25, 0x20	; 32
    31b2:	9f 93       	push	r25
    31b4:	8f 93       	push	r24
    31b6:	1f 92       	push	r1
    31b8:	80 e8       	ldi	r24, 0x80	; 128
    31ba:	8f 93       	push	r24
    31bc:	85 ea       	ldi	r24, 0xA5	; 165
    31be:	92 e2       	ldi	r25, 0x22	; 34
    31c0:	9f 93       	push	r25
    31c2:	8f 93       	push	r24
    31c4:	f1 d1       	rcall	.+994    	; 0x35a8 <snprintf>
	gfx_mono_draw_string(strbuf, 0, 0, &sysfont);
    31c6:	26 e0       	ldi	r18, 0x06	; 6
    31c8:	30 e2       	ldi	r19, 0x20	; 32
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	85 ea       	ldi	r24, 0xA5	; 165
    31d0:	92 e2       	ldi	r25, 0x22	; 34
    31d2:	0e 94 98 06 	call	0xd30	; 0xd30 <gfx_mono_draw_string>
}
    31d6:	8d b7       	in	r24, 0x3d	; 61
    31d8:	9e b7       	in	r25, 0x3e	; 62
    31da:	0a 96       	adiw	r24, 0x0a	; 10
    31dc:	8d bf       	out	0x3d, r24	; 61
    31de:	9e bf       	out	0x3e, r25	; 62
    31e0:	08 95       	ret

000031e2 <vReadLdr>:
		// Baca nilai ADC dari LDR
		ldr_value = ADC_Read();

		// Convert LDR value to PWM value (0-1000)
		if (ldr_value > 3500) {
			pwm_value = 1000;  // Maximum brightness
    31e2:	08 ee       	ldi	r16, 0xE8	; 232
    31e4:	13 e0       	ldi	r17, 0x03	; 3
			} else if (ldr_value < 1000) {
			pwm_value = 0;     // Minimum brightness
			} else {
			// Map LDR value to 8 discrete steps
			uint8_t step = (ldr_value - 1000) / 312;  // Divide range into 8 steps
			pwm_value = step * 125;  // Each step increases PWM by 125
    31e6:	0f 2e       	mov	r0, r31
    31e8:	fd e7       	ldi	r31, 0x7D	; 125
    31ea:	ff 2e       	mov	r15, r31
    31ec:	f0 2d       	mov	r31, r0
		}

		// Atur duty cycle PWM
		TCC0.CCA = pwm_value;
    31ee:	c0 e0       	ldi	r28, 0x00	; 0
    31f0:	d8 e0       	ldi	r29, 0x08	; 8
	uint16_t ldr_value;
	uint16_t pwm_value;

	while (1) {
		// Baca nilai ADC dari LDR
		ldr_value = ADC_Read();
    31f2:	4f df       	rcall	.-354    	; 0x3092 <ADC_Read>
    31f4:	ac 01       	movw	r20, r24

		// Convert LDR value to PWM value (0-1000)
		if (ldr_value > 3500) {
    31f6:	4d 3a       	cpi	r20, 0xAD	; 173
    31f8:	8d e0       	ldi	r24, 0x0D	; 13
    31fa:	58 07       	cpc	r21, r24
    31fc:	c0 f4       	brcc	.+48     	; 0x322e <vReadLdr+0x4c>
			pwm_value = 1000;  // Maximum brightness
			} else if (ldr_value < 1000) {
    31fe:	48 3e       	cpi	r20, 0xE8	; 232
    3200:	83 e0       	ldi	r24, 0x03	; 3
    3202:	58 07       	cpc	r21, r24
    3204:	b8 f0       	brcs	.+46     	; 0x3234 <vReadLdr+0x52>
			pwm_value = 0;     // Minimum brightness
			} else {
			// Map LDR value to 8 discrete steps
			uint8_t step = (ldr_value - 1000) / 312;  // Divide range into 8 steps
			pwm_value = step * 125;  // Each step increases PWM by 125
    3206:	9a 01       	movw	r18, r20
    3208:	28 5e       	subi	r18, 0xE8	; 232
    320a:	33 40       	sbci	r19, 0x03	; 3
    320c:	36 95       	lsr	r19
    320e:	27 95       	ror	r18
    3210:	36 95       	lsr	r19
    3212:	27 95       	ror	r18
    3214:	36 95       	lsr	r19
    3216:	27 95       	ror	r18
    3218:	a1 e2       	ldi	r26, 0x21	; 33
    321a:	bd e0       	ldi	r27, 0x0D	; 13
    321c:	8c d0       	rcall	.+280    	; 0x3336 <__umulhisi3>
    321e:	96 95       	lsr	r25
    3220:	87 95       	ror	r24
    3222:	f8 9e       	mul	r15, r24
    3224:	b0 01       	movw	r22, r0
    3226:	f9 9e       	mul	r15, r25
    3228:	70 0d       	add	r23, r0
    322a:	11 24       	eor	r1, r1
    322c:	05 c0       	rjmp	.+10     	; 0x3238 <vReadLdr+0x56>
		// Baca nilai ADC dari LDR
		ldr_value = ADC_Read();

		// Convert LDR value to PWM value (0-1000)
		if (ldr_value > 3500) {
			pwm_value = 1000;  // Maximum brightness
    322e:	60 2f       	mov	r22, r16
    3230:	71 2f       	mov	r23, r17
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <vReadLdr+0x56>
			} else if (ldr_value < 1000) {
			pwm_value = 0;     // Minimum brightness
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	70 e0       	ldi	r23, 0x00	; 0
			uint8_t step = (ldr_value - 1000) / 312;  // Divide range into 8 steps
			pwm_value = step * 125;  // Each step increases PWM by 125
		}

		// Atur duty cycle PWM
		TCC0.CCA = pwm_value;
    3238:	68 a7       	std	Y+40, r22	; 0x28

		// Tampilkan nilai LDR dan PWM
		display_ldr_value(ldr_value, pwm_value);
    323a:	79 a7       	std	Y+41, r23	; 0x29
    323c:	ca 01       	movw	r24, r20

		vTaskDelay(100 / portTICK_PERIOD_MS);
    323e:	b3 df       	rcall	.-154    	; 0x31a6 <display_ldr_value>
    3240:	82 e3       	ldi	r24, 0x32	; 50
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	d0 d9       	rcall	.-3168   	; 0x25e6 <vTaskDelay>
	}
    3246:	d5 cf       	rjmp	.-86     	; 0x31f2 <vReadLdr+0x10>

00003248 <main>:
    }
}

int main(void) {
    /* Initialize system and peripherals */
    sysclk_init();
    3248:	0e 94 42 04 	call	0x884	; 0x884 <sysclk_init>
    board_init();
    324c:	0e 94 5d 07 	call	0xeba	; 0xeba <board_init>
    gfx_mono_init();
    3250:	0e 94 24 05 	call	0xa48	; 0xa48 <gfx_mono_st7565r_init>
    3254:	80 e1       	ldi	r24, 0x10	; 16
    3256:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>

// Inisialisasi USART di PORTC (TX=PC3, RX=PC2)
static void usart_init(void)
{
	// TX pin (PC3)
	PORTC.DIRSET = PIN3_bm;
    325a:	c0 e4       	ldi	r28, 0x40	; 64
    325c:	d6 e0       	ldi	r29, 0x06	; 6
    325e:	18 e0       	ldi	r17, 0x08	; 8
    3260:	19 83       	std	Y+1, r17	; 0x01
	PORTC.OUTSET = PIN3_bm;  // idle TX = HIGH
    3262:	1d 83       	std	Y+5, r17	; 0x05

	// RX pin (PC2)
	PORTC.DIRCLR = PIN2_bm;
    3264:	84 e0       	ldi	r24, 0x04	; 4
    3266:	8a 83       	std	Y+2, r24	; 0x02

	// Nonaktifkan interrupt
	USARTC0.CTRLA = 0;
    3268:	e0 ea       	ldi	r30, 0xA0	; 160
    326a:	f8 e0       	ldi	r31, 0x08	; 8
    326c:	13 82       	std	Z+3, r1	; 0x03
	// Mode: 8 bit, no parity, 1 stop bit
	USARTC0.CTRLC = USART_CHSIZE_8BIT_gc;
    326e:	83 e0       	ldi	r24, 0x03	; 3
    3270:	85 83       	std	Z+5, r24	; 0x05

	// Baud rate register
	USARTC0.BAUDCTRLA = USARTC0_BAUDCTRLA_VAL;
    3272:	8c e0       	ldi	r24, 0x0C	; 12
    3274:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = USARTC0_BAUDCTRLB_VAL;
    3276:	17 82       	std	Z+7, r1	; 0x07

	// Enable TX dan RX
	USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
    3278:	88 e1       	ldi	r24, 0x18	; 24
    327a:	84 83       	std	Z+4, r24	; 0x04

    // Inisialisasi USART
    usart_init();

    // Initialize ADC (LDR) dan PIR sensor
    ADC_Init();
    327c:	cd de       	rcall	.-614    	; 0x3018 <ADC_Init>
	return adc_get_result(&ADCA, ADC_CH0);
}

// Inisialisasi sensor PIR
void PIR_Init(void) {
	PORTC.DIRCLR = PIR_SENSOR_PIN; // Set pin PIR sebagai input
    327e:	82 e0       	ldi	r24, 0x02	; 2
    3280:	8a 83       	std	Y+2, r24	; 0x02

    // Initialize ADC (LDR) dan PIR sensor
    ADC_Init();
    PIR_Init();
    led_init();
    PWM_Init();
    3282:	19 83       	std	Y+1, r17	; 0x01
    3284:	b7 de       	rcall	.-658    	; 0x2ff4 <PWM_Init>

    // Create tasks
    xTaskCreate(vReadLdr, "LDR Task", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);
    3286:	a1 2c       	mov	r10, r1
    3288:	b1 2c       	mov	r11, r1
    328a:	c1 2c       	mov	r12, r1
    328c:	d1 2c       	mov	r13, r1
    328e:	e1 2c       	mov	r14, r1
    3290:	f1 2c       	mov	r15, r1
    3292:	02 e0       	ldi	r16, 0x02	; 2
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	48 ee       	ldi	r20, 0xE8	; 232
    329a:	53 e0       	ldi	r21, 0x03	; 3
    329c:	68 e7       	ldi	r22, 0x78	; 120
    329e:	70 e2       	ldi	r23, 0x20	; 32
    32a0:	81 ef       	ldi	r24, 0xF1	; 241
    32a2:	98 e1       	ldi	r25, 0x18	; 24
    32a4:	d9 db       	rcall	.-2126   	; 0x2a58 <xTaskGenericCreate>
    xTaskCreate(vMotionDetection, "PIR Task", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);
    32a6:	01 e0       	ldi	r16, 0x01	; 1
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	48 ee       	ldi	r20, 0xE8	; 232
    32ae:	53 e0       	ldi	r21, 0x03	; 3
    32b0:	61 e8       	ldi	r22, 0x81	; 129
    32b2:	70 e2       	ldi	r23, 0x20	; 32
    32b4:	8b ea       	ldi	r24, 0xAB	; 171
    32b6:	98 e1       	ldi	r25, 0x18	; 24
    32b8:	cf db       	rcall	.-2146   	; 0x2a58 <xTaskGenericCreate>
    xTaskCreate(vSendLdrData, "LDR USART", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	48 ee       	ldi	r20, 0xE8	; 232
    32c0:	53 e0       	ldi	r21, 0x03	; 3
    32c2:	6a e8       	ldi	r22, 0x8A	; 138
    32c4:	70 e2       	ldi	r23, 0x20	; 32
    32c6:	85 e6       	ldi	r24, 0x65	; 101
    32c8:	98 e1       	ldi	r25, 0x18	; 24
    32ca:	c6 db       	rcall	.-2164   	; 0x2a58 <xTaskGenericCreate>
    xTaskCreate(vSendPirData, "PIR USART", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	48 ee       	ldi	r20, 0xE8	; 232
    32d2:	53 e0       	ldi	r21, 0x03	; 3
    32d4:	64 e9       	ldi	r22, 0x94	; 148
    32d6:	70 e2       	ldi	r23, 0x20	; 32
    32d8:	87 e8       	ldi	r24, 0x87	; 135
    32da:	98 e1       	ldi	r25, 0x18	; 24

    // Start the scheduler
    vTaskStartScheduler();
    32dc:	bd db       	rcall	.-2182   	; 0x2a58 <xTaskGenericCreate>
    32de:	d8 dc       	rcall	.-1616   	; 0x2c90 <vTaskStartScheduler>
    32e0:	ff cf       	rjmp	.-2      	; 0x32e0 <main+0x98>

000032e2 <__udivmodsi4>:
    32e2:	a1 e2       	ldi	r26, 0x21	; 33
    32e4:	1a 2e       	mov	r1, r26
    32e6:	aa 1b       	sub	r26, r26
    32e8:	bb 1b       	sub	r27, r27
    32ea:	fd 01       	movw	r30, r26
    32ec:	0d c0       	rjmp	.+26     	; 0x3308 <__udivmodsi4_ep>

000032ee <__udivmodsi4_loop>:
    32ee:	aa 1f       	adc	r26, r26
    32f0:	bb 1f       	adc	r27, r27
    32f2:	ee 1f       	adc	r30, r30
    32f4:	ff 1f       	adc	r31, r31
    32f6:	a2 17       	cp	r26, r18
    32f8:	b3 07       	cpc	r27, r19
    32fa:	e4 07       	cpc	r30, r20
    32fc:	f5 07       	cpc	r31, r21
    32fe:	20 f0       	brcs	.+8      	; 0x3308 <__udivmodsi4_ep>
    3300:	a2 1b       	sub	r26, r18
    3302:	b3 0b       	sbc	r27, r19
    3304:	e4 0b       	sbc	r30, r20
    3306:	f5 0b       	sbc	r31, r21

00003308 <__udivmodsi4_ep>:
    3308:	66 1f       	adc	r22, r22
    330a:	77 1f       	adc	r23, r23
    330c:	88 1f       	adc	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	1a 94       	dec	r1
    3312:	69 f7       	brne	.-38     	; 0x32ee <__udivmodsi4_loop>
    3314:	60 95       	com	r22
    3316:	70 95       	com	r23
    3318:	80 95       	com	r24
    331a:	90 95       	com	r25
    331c:	9b 01       	movw	r18, r22
    331e:	ac 01       	movw	r20, r24
    3320:	bd 01       	movw	r22, r26
    3322:	cf 01       	movw	r24, r30
    3324:	08 95       	ret

00003326 <__tablejump2__>:
    3326:	ee 0f       	add	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	88 1f       	adc	r24, r24
    332c:	8b bf       	out	0x3b, r24	; 59
    332e:	07 90       	elpm	r0, Z+
    3330:	f6 91       	elpm	r31, Z
    3332:	e0 2d       	mov	r30, r0
    3334:	19 94       	eijmp

00003336 <__umulhisi3>:
    3336:	a2 9f       	mul	r26, r18
    3338:	b0 01       	movw	r22, r0
    333a:	b3 9f       	mul	r27, r19
    333c:	c0 01       	movw	r24, r0
    333e:	a3 9f       	mul	r26, r19
    3340:	70 0d       	add	r23, r0
    3342:	81 1d       	adc	r24, r1
    3344:	11 24       	eor	r1, r1
    3346:	91 1d       	adc	r25, r1
    3348:	b2 9f       	mul	r27, r18
    334a:	70 0d       	add	r23, r0
    334c:	81 1d       	adc	r24, r1
    334e:	11 24       	eor	r1, r1
    3350:	91 1d       	adc	r25, r1
    3352:	08 95       	ret

00003354 <malloc>:
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	82 30       	cpi	r24, 0x02	; 2
    335e:	91 05       	cpc	r25, r1
    3360:	10 f4       	brcc	.+4      	; 0x3366 <malloc+0x12>
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	e0 91 a1 23 	lds	r30, 0x23A1	; 0x8023a1 <__flp>
    336a:	f0 91 a2 23 	lds	r31, 0x23A2	; 0x8023a2 <__flp+0x1>
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	30 97       	sbiw	r30, 0x00	; 0
    3378:	19 f1       	breq	.+70     	; 0x33c0 <malloc+0x6c>
    337a:	40 81       	ld	r20, Z
    337c:	51 81       	ldd	r21, Z+1	; 0x01
    337e:	02 81       	ldd	r16, Z+2	; 0x02
    3380:	13 81       	ldd	r17, Z+3	; 0x03
    3382:	48 17       	cp	r20, r24
    3384:	59 07       	cpc	r21, r25
    3386:	c8 f0       	brcs	.+50     	; 0x33ba <malloc+0x66>
    3388:	84 17       	cp	r24, r20
    338a:	95 07       	cpc	r25, r21
    338c:	69 f4       	brne	.+26     	; 0x33a8 <malloc+0x54>
    338e:	10 97       	sbiw	r26, 0x00	; 0
    3390:	31 f0       	breq	.+12     	; 0x339e <malloc+0x4a>
    3392:	12 96       	adiw	r26, 0x02	; 2
    3394:	0c 93       	st	X, r16
    3396:	12 97       	sbiw	r26, 0x02	; 2
    3398:	13 96       	adiw	r26, 0x03	; 3
    339a:	1c 93       	st	X, r17
    339c:	27 c0       	rjmp	.+78     	; 0x33ec <malloc+0x98>
    339e:	00 93 a1 23 	sts	0x23A1, r16	; 0x8023a1 <__flp>
    33a2:	10 93 a2 23 	sts	0x23A2, r17	; 0x8023a2 <__flp+0x1>
    33a6:	22 c0       	rjmp	.+68     	; 0x33ec <malloc+0x98>
    33a8:	21 15       	cp	r18, r1
    33aa:	31 05       	cpc	r19, r1
    33ac:	19 f0       	breq	.+6      	; 0x33b4 <malloc+0x60>
    33ae:	42 17       	cp	r20, r18
    33b0:	53 07       	cpc	r21, r19
    33b2:	18 f4       	brcc	.+6      	; 0x33ba <malloc+0x66>
    33b4:	9a 01       	movw	r18, r20
    33b6:	bd 01       	movw	r22, r26
    33b8:	ef 01       	movw	r28, r30
    33ba:	df 01       	movw	r26, r30
    33bc:	f8 01       	movw	r30, r16
    33be:	db cf       	rjmp	.-74     	; 0x3376 <malloc+0x22>
    33c0:	21 15       	cp	r18, r1
    33c2:	31 05       	cpc	r19, r1
    33c4:	f9 f0       	breq	.+62     	; 0x3404 <malloc+0xb0>
    33c6:	28 1b       	sub	r18, r24
    33c8:	39 0b       	sbc	r19, r25
    33ca:	24 30       	cpi	r18, 0x04	; 4
    33cc:	31 05       	cpc	r19, r1
    33ce:	80 f4       	brcc	.+32     	; 0x33f0 <malloc+0x9c>
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	9b 81       	ldd	r25, Y+3	; 0x03
    33d4:	61 15       	cp	r22, r1
    33d6:	71 05       	cpc	r23, r1
    33d8:	21 f0       	breq	.+8      	; 0x33e2 <malloc+0x8e>
    33da:	fb 01       	movw	r30, r22
    33dc:	82 83       	std	Z+2, r24	; 0x02
    33de:	93 83       	std	Z+3, r25	; 0x03
    33e0:	04 c0       	rjmp	.+8      	; 0x33ea <malloc+0x96>
    33e2:	80 93 a1 23 	sts	0x23A1, r24	; 0x8023a1 <__flp>
    33e6:	90 93 a2 23 	sts	0x23A2, r25	; 0x8023a2 <__flp+0x1>
    33ea:	fe 01       	movw	r30, r28
    33ec:	32 96       	adiw	r30, 0x02	; 2
    33ee:	44 c0       	rjmp	.+136    	; 0x3478 <malloc+0x124>
    33f0:	fe 01       	movw	r30, r28
    33f2:	e2 0f       	add	r30, r18
    33f4:	f3 1f       	adc	r31, r19
    33f6:	81 93       	st	Z+, r24
    33f8:	91 93       	st	Z+, r25
    33fa:	22 50       	subi	r18, 0x02	; 2
    33fc:	31 09       	sbc	r19, r1
    33fe:	28 83       	st	Y, r18
    3400:	39 83       	std	Y+1, r19	; 0x01
    3402:	3a c0       	rjmp	.+116    	; 0x3478 <malloc+0x124>
    3404:	20 91 9f 23 	lds	r18, 0x239F	; 0x80239f <__brkval>
    3408:	30 91 a0 23 	lds	r19, 0x23A0	; 0x8023a0 <__brkval+0x1>
    340c:	23 2b       	or	r18, r19
    340e:	41 f4       	brne	.+16     	; 0x3420 <malloc+0xcc>
    3410:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3414:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3418:	20 93 9f 23 	sts	0x239F, r18	; 0x80239f <__brkval>
    341c:	30 93 a0 23 	sts	0x23A0, r19	; 0x8023a0 <__brkval+0x1>
    3420:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    3424:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    3428:	21 15       	cp	r18, r1
    342a:	31 05       	cpc	r19, r1
    342c:	41 f4       	brne	.+16     	; 0x343e <malloc+0xea>
    342e:	2d b7       	in	r18, 0x3d	; 61
    3430:	3e b7       	in	r19, 0x3e	; 62
    3432:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3436:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    343a:	24 1b       	sub	r18, r20
    343c:	35 0b       	sbc	r19, r21
    343e:	e0 91 9f 23 	lds	r30, 0x239F	; 0x80239f <__brkval>
    3442:	f0 91 a0 23 	lds	r31, 0x23A0	; 0x8023a0 <__brkval+0x1>
    3446:	e2 17       	cp	r30, r18
    3448:	f3 07       	cpc	r31, r19
    344a:	a0 f4       	brcc	.+40     	; 0x3474 <malloc+0x120>
    344c:	2e 1b       	sub	r18, r30
    344e:	3f 0b       	sbc	r19, r31
    3450:	28 17       	cp	r18, r24
    3452:	39 07       	cpc	r19, r25
    3454:	78 f0       	brcs	.+30     	; 0x3474 <malloc+0x120>
    3456:	ac 01       	movw	r20, r24
    3458:	4e 5f       	subi	r20, 0xFE	; 254
    345a:	5f 4f       	sbci	r21, 0xFF	; 255
    345c:	24 17       	cp	r18, r20
    345e:	35 07       	cpc	r19, r21
    3460:	48 f0       	brcs	.+18     	; 0x3474 <malloc+0x120>
    3462:	4e 0f       	add	r20, r30
    3464:	5f 1f       	adc	r21, r31
    3466:	40 93 9f 23 	sts	0x239F, r20	; 0x80239f <__brkval>
    346a:	50 93 a0 23 	sts	0x23A0, r21	; 0x8023a0 <__brkval+0x1>
    346e:	81 93       	st	Z+, r24
    3470:	91 93       	st	Z+, r25
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <malloc+0x124>
    3474:	e0 e0       	ldi	r30, 0x00	; 0
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	cf 01       	movw	r24, r30
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	08 95       	ret

00003484 <free>:
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	00 97       	sbiw	r24, 0x00	; 0
    348a:	09 f4       	brne	.+2      	; 0x348e <free+0xa>
    348c:	81 c0       	rjmp	.+258    	; 0x3590 <free+0x10c>
    348e:	fc 01       	movw	r30, r24
    3490:	32 97       	sbiw	r30, 0x02	; 2
    3492:	12 82       	std	Z+2, r1	; 0x02
    3494:	13 82       	std	Z+3, r1	; 0x03
    3496:	a0 91 a1 23 	lds	r26, 0x23A1	; 0x8023a1 <__flp>
    349a:	b0 91 a2 23 	lds	r27, 0x23A2	; 0x8023a2 <__flp+0x1>
    349e:	10 97       	sbiw	r26, 0x00	; 0
    34a0:	81 f4       	brne	.+32     	; 0x34c2 <free+0x3e>
    34a2:	20 81       	ld	r18, Z
    34a4:	31 81       	ldd	r19, Z+1	; 0x01
    34a6:	82 0f       	add	r24, r18
    34a8:	93 1f       	adc	r25, r19
    34aa:	20 91 9f 23 	lds	r18, 0x239F	; 0x80239f <__brkval>
    34ae:	30 91 a0 23 	lds	r19, 0x23A0	; 0x8023a0 <__brkval+0x1>
    34b2:	28 17       	cp	r18, r24
    34b4:	39 07       	cpc	r19, r25
    34b6:	51 f5       	brne	.+84     	; 0x350c <free+0x88>
    34b8:	e0 93 9f 23 	sts	0x239F, r30	; 0x80239f <__brkval>
    34bc:	f0 93 a0 23 	sts	0x23A0, r31	; 0x8023a0 <__brkval+0x1>
    34c0:	67 c0       	rjmp	.+206    	; 0x3590 <free+0x10c>
    34c2:	ed 01       	movw	r28, r26
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	ce 17       	cp	r28, r30
    34ca:	df 07       	cpc	r29, r31
    34cc:	40 f4       	brcc	.+16     	; 0x34de <free+0x5a>
    34ce:	4a 81       	ldd	r20, Y+2	; 0x02
    34d0:	5b 81       	ldd	r21, Y+3	; 0x03
    34d2:	9e 01       	movw	r18, r28
    34d4:	41 15       	cp	r20, r1
    34d6:	51 05       	cpc	r21, r1
    34d8:	f1 f0       	breq	.+60     	; 0x3516 <free+0x92>
    34da:	ea 01       	movw	r28, r20
    34dc:	f5 cf       	rjmp	.-22     	; 0x34c8 <free+0x44>
    34de:	c2 83       	std	Z+2, r28	; 0x02
    34e0:	d3 83       	std	Z+3, r29	; 0x03
    34e2:	40 81       	ld	r20, Z
    34e4:	51 81       	ldd	r21, Z+1	; 0x01
    34e6:	84 0f       	add	r24, r20
    34e8:	95 1f       	adc	r25, r21
    34ea:	c8 17       	cp	r28, r24
    34ec:	d9 07       	cpc	r29, r25
    34ee:	59 f4       	brne	.+22     	; 0x3506 <free+0x82>
    34f0:	88 81       	ld	r24, Y
    34f2:	99 81       	ldd	r25, Y+1	; 0x01
    34f4:	84 0f       	add	r24, r20
    34f6:	95 1f       	adc	r25, r21
    34f8:	02 96       	adiw	r24, 0x02	; 2
    34fa:	80 83       	st	Z, r24
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	9b 81       	ldd	r25, Y+3	; 0x03
    3502:	82 83       	std	Z+2, r24	; 0x02
    3504:	93 83       	std	Z+3, r25	; 0x03
    3506:	21 15       	cp	r18, r1
    3508:	31 05       	cpc	r19, r1
    350a:	29 f4       	brne	.+10     	; 0x3516 <free+0x92>
    350c:	e0 93 a1 23 	sts	0x23A1, r30	; 0x8023a1 <__flp>
    3510:	f0 93 a2 23 	sts	0x23A2, r31	; 0x8023a2 <__flp+0x1>
    3514:	3d c0       	rjmp	.+122    	; 0x3590 <free+0x10c>
    3516:	e9 01       	movw	r28, r18
    3518:	ea 83       	std	Y+2, r30	; 0x02
    351a:	fb 83       	std	Y+3, r31	; 0x03
    351c:	49 91       	ld	r20, Y+
    351e:	59 91       	ld	r21, Y+
    3520:	c4 0f       	add	r28, r20
    3522:	d5 1f       	adc	r29, r21
    3524:	ec 17       	cp	r30, r28
    3526:	fd 07       	cpc	r31, r29
    3528:	61 f4       	brne	.+24     	; 0x3542 <free+0xbe>
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	84 0f       	add	r24, r20
    3530:	95 1f       	adc	r25, r21
    3532:	02 96       	adiw	r24, 0x02	; 2
    3534:	e9 01       	movw	r28, r18
    3536:	88 83       	st	Y, r24
    3538:	99 83       	std	Y+1, r25	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	8a 83       	std	Y+2, r24	; 0x02
    3540:	9b 83       	std	Y+3, r25	; 0x03
    3542:	e0 e0       	ldi	r30, 0x00	; 0
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	12 96       	adiw	r26, 0x02	; 2
    3548:	8d 91       	ld	r24, X+
    354a:	9c 91       	ld	r25, X
    354c:	13 97       	sbiw	r26, 0x03	; 3
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	19 f0       	breq	.+6      	; 0x3558 <free+0xd4>
    3552:	fd 01       	movw	r30, r26
    3554:	dc 01       	movw	r26, r24
    3556:	f7 cf       	rjmp	.-18     	; 0x3546 <free+0xc2>
    3558:	8d 91       	ld	r24, X+
    355a:	9c 91       	ld	r25, X
    355c:	11 97       	sbiw	r26, 0x01	; 1
    355e:	9d 01       	movw	r18, r26
    3560:	2e 5f       	subi	r18, 0xFE	; 254
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	82 0f       	add	r24, r18
    3566:	93 1f       	adc	r25, r19
    3568:	20 91 9f 23 	lds	r18, 0x239F	; 0x80239f <__brkval>
    356c:	30 91 a0 23 	lds	r19, 0x23A0	; 0x8023a0 <__brkval+0x1>
    3570:	28 17       	cp	r18, r24
    3572:	39 07       	cpc	r19, r25
    3574:	69 f4       	brne	.+26     	; 0x3590 <free+0x10c>
    3576:	30 97       	sbiw	r30, 0x00	; 0
    3578:	29 f4       	brne	.+10     	; 0x3584 <free+0x100>
    357a:	10 92 a1 23 	sts	0x23A1, r1	; 0x8023a1 <__flp>
    357e:	10 92 a2 23 	sts	0x23A2, r1	; 0x8023a2 <__flp+0x1>
    3582:	02 c0       	rjmp	.+4      	; 0x3588 <free+0x104>
    3584:	12 82       	std	Z+2, r1	; 0x02
    3586:	13 82       	std	Z+3, r1	; 0x03
    3588:	a0 93 9f 23 	sts	0x239F, r26	; 0x80239f <__brkval>
    358c:	b0 93 a0 23 	sts	0x23A0, r27	; 0x8023a0 <__brkval+0x1>
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	08 95       	ret

00003596 <memcpy>:
    3596:	fb 01       	movw	r30, r22
    3598:	dc 01       	movw	r26, r24
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <memcpy+0xa>
    359c:	01 90       	ld	r0, Z+
    359e:	0d 92       	st	X+, r0
    35a0:	41 50       	subi	r20, 0x01	; 1
    35a2:	50 40       	sbci	r21, 0x00	; 0
    35a4:	d8 f7       	brcc	.-10     	; 0x359c <memcpy+0x6>
    35a6:	08 95       	ret

000035a8 <snprintf>:
    35a8:	0f 93       	push	r16
    35aa:	1f 93       	push	r17
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	2e 97       	sbiw	r28, 0x0e	; 14
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0e 89       	ldd	r16, Y+22	; 0x16
    35bc:	1f 89       	ldd	r17, Y+23	; 0x17
    35be:	88 8d       	ldd	r24, Y+24	; 0x18
    35c0:	99 8d       	ldd	r25, Y+25	; 0x19
    35c2:	26 e0       	ldi	r18, 0x06	; 6
    35c4:	2c 83       	std	Y+4, r18	; 0x04
    35c6:	09 83       	std	Y+1, r16	; 0x01
    35c8:	1a 83       	std	Y+2, r17	; 0x02
    35ca:	97 ff       	sbrs	r25, 7
    35cc:	02 c0       	rjmp	.+4      	; 0x35d2 <snprintf+0x2a>
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e8       	ldi	r25, 0x80	; 128
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	9e 83       	std	Y+6, r25	; 0x06
    35d8:	ae 01       	movw	r20, r28
    35da:	44 5e       	subi	r20, 0xE4	; 228
    35dc:	5f 4f       	sbci	r21, 0xFF	; 255
    35de:	6a 8d       	ldd	r22, Y+26	; 0x1a
    35e0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    35e2:	ce 01       	movw	r24, r28
    35e4:	01 96       	adiw	r24, 0x01	; 1
    35e6:	16 d0       	rcall	.+44     	; 0x3614 <vfprintf>
    35e8:	4d 81       	ldd	r20, Y+5	; 0x05
    35ea:	5e 81       	ldd	r21, Y+6	; 0x06
    35ec:	57 fd       	sbrc	r21, 7
    35ee:	0a c0       	rjmp	.+20     	; 0x3604 <snprintf+0x5c>
    35f0:	2f 81       	ldd	r18, Y+7	; 0x07
    35f2:	38 85       	ldd	r19, Y+8	; 0x08
    35f4:	42 17       	cp	r20, r18
    35f6:	53 07       	cpc	r21, r19
    35f8:	0c f4       	brge	.+2      	; 0x35fc <snprintf+0x54>
    35fa:	9a 01       	movw	r18, r20
    35fc:	f8 01       	movw	r30, r16
    35fe:	e2 0f       	add	r30, r18
    3600:	f3 1f       	adc	r31, r19
    3602:	10 82       	st	Z, r1
    3604:	2e 96       	adiw	r28, 0x0e	; 14
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	08 95       	ret

00003614 <vfprintf>:
    3614:	2f 92       	push	r2
    3616:	3f 92       	push	r3
    3618:	4f 92       	push	r4
    361a:	5f 92       	push	r5
    361c:	6f 92       	push	r6
    361e:	7f 92       	push	r7
    3620:	8f 92       	push	r8
    3622:	9f 92       	push	r9
    3624:	af 92       	push	r10
    3626:	bf 92       	push	r11
    3628:	cf 92       	push	r12
    362a:	df 92       	push	r13
    362c:	ef 92       	push	r14
    362e:	ff 92       	push	r15
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	2b 97       	sbiw	r28, 0x0b	; 11
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	6c 01       	movw	r12, r24
    3644:	7b 01       	movw	r14, r22
    3646:	8a 01       	movw	r16, r20
    3648:	fc 01       	movw	r30, r24
    364a:	16 82       	std	Z+6, r1	; 0x06
    364c:	17 82       	std	Z+7, r1	; 0x07
    364e:	83 81       	ldd	r24, Z+3	; 0x03
    3650:	81 ff       	sbrs	r24, 1
    3652:	bf c1       	rjmp	.+894    	; 0x39d2 <vfprintf+0x3be>
    3654:	ce 01       	movw	r24, r28
    3656:	01 96       	adiw	r24, 0x01	; 1
    3658:	3c 01       	movw	r6, r24
    365a:	f6 01       	movw	r30, r12
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	f7 01       	movw	r30, r14
    3660:	93 fd       	sbrc	r25, 3
    3662:	85 91       	lpm	r24, Z+
    3664:	93 ff       	sbrs	r25, 3
    3666:	81 91       	ld	r24, Z+
    3668:	7f 01       	movw	r14, r30
    366a:	88 23       	and	r24, r24
    366c:	09 f4       	brne	.+2      	; 0x3670 <vfprintf+0x5c>
    366e:	ad c1       	rjmp	.+858    	; 0x39ca <vfprintf+0x3b6>
    3670:	85 32       	cpi	r24, 0x25	; 37
    3672:	39 f4       	brne	.+14     	; 0x3682 <vfprintf+0x6e>
    3674:	93 fd       	sbrc	r25, 3
    3676:	85 91       	lpm	r24, Z+
    3678:	93 ff       	sbrs	r25, 3
    367a:	81 91       	ld	r24, Z+
    367c:	7f 01       	movw	r14, r30
    367e:	85 32       	cpi	r24, 0x25	; 37
    3680:	21 f4       	brne	.+8      	; 0x368a <vfprintf+0x76>
    3682:	b6 01       	movw	r22, r12
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	d3 d1       	rcall	.+934    	; 0x3a2e <fputc>
    3688:	e8 cf       	rjmp	.-48     	; 0x365a <vfprintf+0x46>
    368a:	91 2c       	mov	r9, r1
    368c:	21 2c       	mov	r2, r1
    368e:	31 2c       	mov	r3, r1
    3690:	ff e1       	ldi	r31, 0x1F	; 31
    3692:	f3 15       	cp	r31, r3
    3694:	d8 f0       	brcs	.+54     	; 0x36cc <vfprintf+0xb8>
    3696:	8b 32       	cpi	r24, 0x2B	; 43
    3698:	79 f0       	breq	.+30     	; 0x36b8 <vfprintf+0xa4>
    369a:	38 f4       	brcc	.+14     	; 0x36aa <vfprintf+0x96>
    369c:	80 32       	cpi	r24, 0x20	; 32
    369e:	79 f0       	breq	.+30     	; 0x36be <vfprintf+0xaa>
    36a0:	83 32       	cpi	r24, 0x23	; 35
    36a2:	a1 f4       	brne	.+40     	; 0x36cc <vfprintf+0xb8>
    36a4:	23 2d       	mov	r18, r3
    36a6:	20 61       	ori	r18, 0x10	; 16
    36a8:	1d c0       	rjmp	.+58     	; 0x36e4 <vfprintf+0xd0>
    36aa:	8d 32       	cpi	r24, 0x2D	; 45
    36ac:	61 f0       	breq	.+24     	; 0x36c6 <vfprintf+0xb2>
    36ae:	80 33       	cpi	r24, 0x30	; 48
    36b0:	69 f4       	brne	.+26     	; 0x36cc <vfprintf+0xb8>
    36b2:	23 2d       	mov	r18, r3
    36b4:	21 60       	ori	r18, 0x01	; 1
    36b6:	16 c0       	rjmp	.+44     	; 0x36e4 <vfprintf+0xd0>
    36b8:	83 2d       	mov	r24, r3
    36ba:	82 60       	ori	r24, 0x02	; 2
    36bc:	38 2e       	mov	r3, r24
    36be:	e3 2d       	mov	r30, r3
    36c0:	e4 60       	ori	r30, 0x04	; 4
    36c2:	3e 2e       	mov	r3, r30
    36c4:	2a c0       	rjmp	.+84     	; 0x371a <vfprintf+0x106>
    36c6:	f3 2d       	mov	r31, r3
    36c8:	f8 60       	ori	r31, 0x08	; 8
    36ca:	1d c0       	rjmp	.+58     	; 0x3706 <vfprintf+0xf2>
    36cc:	37 fc       	sbrc	r3, 7
    36ce:	2d c0       	rjmp	.+90     	; 0x372a <vfprintf+0x116>
    36d0:	20 ed       	ldi	r18, 0xD0	; 208
    36d2:	28 0f       	add	r18, r24
    36d4:	2a 30       	cpi	r18, 0x0A	; 10
    36d6:	40 f0       	brcs	.+16     	; 0x36e8 <vfprintf+0xd4>
    36d8:	8e 32       	cpi	r24, 0x2E	; 46
    36da:	b9 f4       	brne	.+46     	; 0x370a <vfprintf+0xf6>
    36dc:	36 fc       	sbrc	r3, 6
    36de:	75 c1       	rjmp	.+746    	; 0x39ca <vfprintf+0x3b6>
    36e0:	23 2d       	mov	r18, r3
    36e2:	20 64       	ori	r18, 0x40	; 64
    36e4:	32 2e       	mov	r3, r18
    36e6:	19 c0       	rjmp	.+50     	; 0x371a <vfprintf+0x106>
    36e8:	36 fe       	sbrs	r3, 6
    36ea:	06 c0       	rjmp	.+12     	; 0x36f8 <vfprintf+0xe4>
    36ec:	8a e0       	ldi	r24, 0x0A	; 10
    36ee:	98 9e       	mul	r9, r24
    36f0:	20 0d       	add	r18, r0
    36f2:	11 24       	eor	r1, r1
    36f4:	92 2e       	mov	r9, r18
    36f6:	11 c0       	rjmp	.+34     	; 0x371a <vfprintf+0x106>
    36f8:	ea e0       	ldi	r30, 0x0A	; 10
    36fa:	2e 9e       	mul	r2, r30
    36fc:	20 0d       	add	r18, r0
    36fe:	11 24       	eor	r1, r1
    3700:	22 2e       	mov	r2, r18
    3702:	f3 2d       	mov	r31, r3
    3704:	f0 62       	ori	r31, 0x20	; 32
    3706:	3f 2e       	mov	r3, r31
    3708:	08 c0       	rjmp	.+16     	; 0x371a <vfprintf+0x106>
    370a:	8c 36       	cpi	r24, 0x6C	; 108
    370c:	21 f4       	brne	.+8      	; 0x3716 <vfprintf+0x102>
    370e:	83 2d       	mov	r24, r3
    3710:	80 68       	ori	r24, 0x80	; 128
    3712:	38 2e       	mov	r3, r24
    3714:	02 c0       	rjmp	.+4      	; 0x371a <vfprintf+0x106>
    3716:	88 36       	cpi	r24, 0x68	; 104
    3718:	41 f4       	brne	.+16     	; 0x372a <vfprintf+0x116>
    371a:	f7 01       	movw	r30, r14
    371c:	93 fd       	sbrc	r25, 3
    371e:	85 91       	lpm	r24, Z+
    3720:	93 ff       	sbrs	r25, 3
    3722:	81 91       	ld	r24, Z+
    3724:	7f 01       	movw	r14, r30
    3726:	81 11       	cpse	r24, r1
    3728:	b3 cf       	rjmp	.-154    	; 0x3690 <vfprintf+0x7c>
    372a:	98 2f       	mov	r25, r24
    372c:	9f 7d       	andi	r25, 0xDF	; 223
    372e:	95 54       	subi	r25, 0x45	; 69
    3730:	93 30       	cpi	r25, 0x03	; 3
    3732:	28 f4       	brcc	.+10     	; 0x373e <vfprintf+0x12a>
    3734:	0c 5f       	subi	r16, 0xFC	; 252
    3736:	1f 4f       	sbci	r17, 0xFF	; 255
    3738:	9f e3       	ldi	r25, 0x3F	; 63
    373a:	99 83       	std	Y+1, r25	; 0x01
    373c:	0d c0       	rjmp	.+26     	; 0x3758 <vfprintf+0x144>
    373e:	83 36       	cpi	r24, 0x63	; 99
    3740:	31 f0       	breq	.+12     	; 0x374e <vfprintf+0x13a>
    3742:	83 37       	cpi	r24, 0x73	; 115
    3744:	71 f0       	breq	.+28     	; 0x3762 <vfprintf+0x14e>
    3746:	83 35       	cpi	r24, 0x53	; 83
    3748:	09 f0       	breq	.+2      	; 0x374c <vfprintf+0x138>
    374a:	55 c0       	rjmp	.+170    	; 0x37f6 <vfprintf+0x1e2>
    374c:	20 c0       	rjmp	.+64     	; 0x378e <vfprintf+0x17a>
    374e:	f8 01       	movw	r30, r16
    3750:	80 81       	ld	r24, Z
    3752:	89 83       	std	Y+1, r24	; 0x01
    3754:	0e 5f       	subi	r16, 0xFE	; 254
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	88 24       	eor	r8, r8
    375a:	83 94       	inc	r8
    375c:	91 2c       	mov	r9, r1
    375e:	53 01       	movw	r10, r6
    3760:	12 c0       	rjmp	.+36     	; 0x3786 <vfprintf+0x172>
    3762:	28 01       	movw	r4, r16
    3764:	f2 e0       	ldi	r31, 0x02	; 2
    3766:	4f 0e       	add	r4, r31
    3768:	51 1c       	adc	r5, r1
    376a:	f8 01       	movw	r30, r16
    376c:	a0 80       	ld	r10, Z
    376e:	b1 80       	ldd	r11, Z+1	; 0x01
    3770:	36 fe       	sbrs	r3, 6
    3772:	03 c0       	rjmp	.+6      	; 0x377a <vfprintf+0x166>
    3774:	69 2d       	mov	r22, r9
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	02 c0       	rjmp	.+4      	; 0x377e <vfprintf+0x16a>
    377a:	6f ef       	ldi	r22, 0xFF	; 255
    377c:	7f ef       	ldi	r23, 0xFF	; 255
    377e:	c5 01       	movw	r24, r10
    3780:	4b d1       	rcall	.+662    	; 0x3a18 <strnlen>
    3782:	4c 01       	movw	r8, r24
    3784:	82 01       	movw	r16, r4
    3786:	f3 2d       	mov	r31, r3
    3788:	ff 77       	andi	r31, 0x7F	; 127
    378a:	3f 2e       	mov	r3, r31
    378c:	15 c0       	rjmp	.+42     	; 0x37b8 <vfprintf+0x1a4>
    378e:	28 01       	movw	r4, r16
    3790:	22 e0       	ldi	r18, 0x02	; 2
    3792:	42 0e       	add	r4, r18
    3794:	51 1c       	adc	r5, r1
    3796:	f8 01       	movw	r30, r16
    3798:	a0 80       	ld	r10, Z
    379a:	b1 80       	ldd	r11, Z+1	; 0x01
    379c:	36 fe       	sbrs	r3, 6
    379e:	03 c0       	rjmp	.+6      	; 0x37a6 <vfprintf+0x192>
    37a0:	69 2d       	mov	r22, r9
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <vfprintf+0x196>
    37a6:	6f ef       	ldi	r22, 0xFF	; 255
    37a8:	7f ef       	ldi	r23, 0xFF	; 255
    37aa:	c5 01       	movw	r24, r10
    37ac:	2a d1       	rcall	.+596    	; 0x3a02 <strnlen_P>
    37ae:	4c 01       	movw	r8, r24
    37b0:	f3 2d       	mov	r31, r3
    37b2:	f0 68       	ori	r31, 0x80	; 128
    37b4:	3f 2e       	mov	r3, r31
    37b6:	82 01       	movw	r16, r4
    37b8:	33 fc       	sbrc	r3, 3
    37ba:	19 c0       	rjmp	.+50     	; 0x37ee <vfprintf+0x1da>
    37bc:	82 2d       	mov	r24, r2
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	88 16       	cp	r8, r24
    37c2:	99 06       	cpc	r9, r25
    37c4:	a0 f4       	brcc	.+40     	; 0x37ee <vfprintf+0x1da>
    37c6:	b6 01       	movw	r22, r12
    37c8:	80 e2       	ldi	r24, 0x20	; 32
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	30 d1       	rcall	.+608    	; 0x3a2e <fputc>
    37ce:	2a 94       	dec	r2
    37d0:	f5 cf       	rjmp	.-22     	; 0x37bc <vfprintf+0x1a8>
    37d2:	f5 01       	movw	r30, r10
    37d4:	37 fc       	sbrc	r3, 7
    37d6:	85 91       	lpm	r24, Z+
    37d8:	37 fe       	sbrs	r3, 7
    37da:	81 91       	ld	r24, Z+
    37dc:	5f 01       	movw	r10, r30
    37de:	b6 01       	movw	r22, r12
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	25 d1       	rcall	.+586    	; 0x3a2e <fputc>
    37e4:	21 10       	cpse	r2, r1
    37e6:	2a 94       	dec	r2
    37e8:	21 e0       	ldi	r18, 0x01	; 1
    37ea:	82 1a       	sub	r8, r18
    37ec:	91 08       	sbc	r9, r1
    37ee:	81 14       	cp	r8, r1
    37f0:	91 04       	cpc	r9, r1
    37f2:	79 f7       	brne	.-34     	; 0x37d2 <vfprintf+0x1be>
    37f4:	e1 c0       	rjmp	.+450    	; 0x39b8 <vfprintf+0x3a4>
    37f6:	84 36       	cpi	r24, 0x64	; 100
    37f8:	11 f0       	breq	.+4      	; 0x37fe <vfprintf+0x1ea>
    37fa:	89 36       	cpi	r24, 0x69	; 105
    37fc:	39 f5       	brne	.+78     	; 0x384c <vfprintf+0x238>
    37fe:	f8 01       	movw	r30, r16
    3800:	37 fe       	sbrs	r3, 7
    3802:	07 c0       	rjmp	.+14     	; 0x3812 <vfprintf+0x1fe>
    3804:	60 81       	ld	r22, Z
    3806:	71 81       	ldd	r23, Z+1	; 0x01
    3808:	82 81       	ldd	r24, Z+2	; 0x02
    380a:	93 81       	ldd	r25, Z+3	; 0x03
    380c:	0c 5f       	subi	r16, 0xFC	; 252
    380e:	1f 4f       	sbci	r17, 0xFF	; 255
    3810:	08 c0       	rjmp	.+16     	; 0x3822 <vfprintf+0x20e>
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	07 2e       	mov	r0, r23
    3818:	00 0c       	add	r0, r0
    381a:	88 0b       	sbc	r24, r24
    381c:	99 0b       	sbc	r25, r25
    381e:	0e 5f       	subi	r16, 0xFE	; 254
    3820:	1f 4f       	sbci	r17, 0xFF	; 255
    3822:	f3 2d       	mov	r31, r3
    3824:	ff 76       	andi	r31, 0x6F	; 111
    3826:	3f 2e       	mov	r3, r31
    3828:	97 ff       	sbrs	r25, 7
    382a:	09 c0       	rjmp	.+18     	; 0x383e <vfprintf+0x22a>
    382c:	90 95       	com	r25
    382e:	80 95       	com	r24
    3830:	70 95       	com	r23
    3832:	61 95       	neg	r22
    3834:	7f 4f       	sbci	r23, 0xFF	; 255
    3836:	8f 4f       	sbci	r24, 0xFF	; 255
    3838:	9f 4f       	sbci	r25, 0xFF	; 255
    383a:	f0 68       	ori	r31, 0x80	; 128
    383c:	3f 2e       	mov	r3, r31
    383e:	2a e0       	ldi	r18, 0x0A	; 10
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	a3 01       	movw	r20, r6
    3844:	30 d1       	rcall	.+608    	; 0x3aa6 <__ultoa_invert>
    3846:	88 2e       	mov	r8, r24
    3848:	86 18       	sub	r8, r6
    384a:	44 c0       	rjmp	.+136    	; 0x38d4 <vfprintf+0x2c0>
    384c:	85 37       	cpi	r24, 0x75	; 117
    384e:	31 f4       	brne	.+12     	; 0x385c <vfprintf+0x248>
    3850:	23 2d       	mov	r18, r3
    3852:	2f 7e       	andi	r18, 0xEF	; 239
    3854:	b2 2e       	mov	r11, r18
    3856:	2a e0       	ldi	r18, 0x0A	; 10
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	25 c0       	rjmp	.+74     	; 0x38a6 <vfprintf+0x292>
    385c:	93 2d       	mov	r25, r3
    385e:	99 7f       	andi	r25, 0xF9	; 249
    3860:	b9 2e       	mov	r11, r25
    3862:	8f 36       	cpi	r24, 0x6F	; 111
    3864:	c1 f0       	breq	.+48     	; 0x3896 <vfprintf+0x282>
    3866:	18 f4       	brcc	.+6      	; 0x386e <vfprintf+0x25a>
    3868:	88 35       	cpi	r24, 0x58	; 88
    386a:	79 f0       	breq	.+30     	; 0x388a <vfprintf+0x276>
    386c:	ae c0       	rjmp	.+348    	; 0x39ca <vfprintf+0x3b6>
    386e:	80 37       	cpi	r24, 0x70	; 112
    3870:	19 f0       	breq	.+6      	; 0x3878 <vfprintf+0x264>
    3872:	88 37       	cpi	r24, 0x78	; 120
    3874:	21 f0       	breq	.+8      	; 0x387e <vfprintf+0x26a>
    3876:	a9 c0       	rjmp	.+338    	; 0x39ca <vfprintf+0x3b6>
    3878:	e9 2f       	mov	r30, r25
    387a:	e0 61       	ori	r30, 0x10	; 16
    387c:	be 2e       	mov	r11, r30
    387e:	b4 fe       	sbrs	r11, 4
    3880:	0d c0       	rjmp	.+26     	; 0x389c <vfprintf+0x288>
    3882:	fb 2d       	mov	r31, r11
    3884:	f4 60       	ori	r31, 0x04	; 4
    3886:	bf 2e       	mov	r11, r31
    3888:	09 c0       	rjmp	.+18     	; 0x389c <vfprintf+0x288>
    388a:	34 fe       	sbrs	r3, 4
    388c:	0a c0       	rjmp	.+20     	; 0x38a2 <vfprintf+0x28e>
    388e:	29 2f       	mov	r18, r25
    3890:	26 60       	ori	r18, 0x06	; 6
    3892:	b2 2e       	mov	r11, r18
    3894:	06 c0       	rjmp	.+12     	; 0x38a2 <vfprintf+0x28e>
    3896:	28 e0       	ldi	r18, 0x08	; 8
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	05 c0       	rjmp	.+10     	; 0x38a6 <vfprintf+0x292>
    389c:	20 e1       	ldi	r18, 0x10	; 16
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <vfprintf+0x292>
    38a2:	20 e1       	ldi	r18, 0x10	; 16
    38a4:	32 e0       	ldi	r19, 0x02	; 2
    38a6:	f8 01       	movw	r30, r16
    38a8:	b7 fe       	sbrs	r11, 7
    38aa:	07 c0       	rjmp	.+14     	; 0x38ba <vfprintf+0x2a6>
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	0c 5f       	subi	r16, 0xFC	; 252
    38b6:	1f 4f       	sbci	r17, 0xFF	; 255
    38b8:	06 c0       	rjmp	.+12     	; 0x38c6 <vfprintf+0x2b2>
    38ba:	60 81       	ld	r22, Z
    38bc:	71 81       	ldd	r23, Z+1	; 0x01
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 5f       	subi	r16, 0xFE	; 254
    38c4:	1f 4f       	sbci	r17, 0xFF	; 255
    38c6:	a3 01       	movw	r20, r6
    38c8:	ee d0       	rcall	.+476    	; 0x3aa6 <__ultoa_invert>
    38ca:	88 2e       	mov	r8, r24
    38cc:	86 18       	sub	r8, r6
    38ce:	fb 2d       	mov	r31, r11
    38d0:	ff 77       	andi	r31, 0x7F	; 127
    38d2:	3f 2e       	mov	r3, r31
    38d4:	36 fe       	sbrs	r3, 6
    38d6:	0d c0       	rjmp	.+26     	; 0x38f2 <vfprintf+0x2de>
    38d8:	23 2d       	mov	r18, r3
    38da:	2e 7f       	andi	r18, 0xFE	; 254
    38dc:	a2 2e       	mov	r10, r18
    38de:	89 14       	cp	r8, r9
    38e0:	58 f4       	brcc	.+22     	; 0x38f8 <vfprintf+0x2e4>
    38e2:	34 fe       	sbrs	r3, 4
    38e4:	0b c0       	rjmp	.+22     	; 0x38fc <vfprintf+0x2e8>
    38e6:	32 fc       	sbrc	r3, 2
    38e8:	09 c0       	rjmp	.+18     	; 0x38fc <vfprintf+0x2e8>
    38ea:	83 2d       	mov	r24, r3
    38ec:	8e 7e       	andi	r24, 0xEE	; 238
    38ee:	a8 2e       	mov	r10, r24
    38f0:	05 c0       	rjmp	.+10     	; 0x38fc <vfprintf+0x2e8>
    38f2:	b8 2c       	mov	r11, r8
    38f4:	a3 2c       	mov	r10, r3
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <vfprintf+0x2ea>
    38f8:	b8 2c       	mov	r11, r8
    38fa:	01 c0       	rjmp	.+2      	; 0x38fe <vfprintf+0x2ea>
    38fc:	b9 2c       	mov	r11, r9
    38fe:	a4 fe       	sbrs	r10, 4
    3900:	0f c0       	rjmp	.+30     	; 0x3920 <vfprintf+0x30c>
    3902:	fe 01       	movw	r30, r28
    3904:	e8 0d       	add	r30, r8
    3906:	f1 1d       	adc	r31, r1
    3908:	80 81       	ld	r24, Z
    390a:	80 33       	cpi	r24, 0x30	; 48
    390c:	21 f4       	brne	.+8      	; 0x3916 <vfprintf+0x302>
    390e:	9a 2d       	mov	r25, r10
    3910:	99 7e       	andi	r25, 0xE9	; 233
    3912:	a9 2e       	mov	r10, r25
    3914:	09 c0       	rjmp	.+18     	; 0x3928 <vfprintf+0x314>
    3916:	a2 fe       	sbrs	r10, 2
    3918:	06 c0       	rjmp	.+12     	; 0x3926 <vfprintf+0x312>
    391a:	b3 94       	inc	r11
    391c:	b3 94       	inc	r11
    391e:	04 c0       	rjmp	.+8      	; 0x3928 <vfprintf+0x314>
    3920:	8a 2d       	mov	r24, r10
    3922:	86 78       	andi	r24, 0x86	; 134
    3924:	09 f0       	breq	.+2      	; 0x3928 <vfprintf+0x314>
    3926:	b3 94       	inc	r11
    3928:	a3 fc       	sbrc	r10, 3
    392a:	10 c0       	rjmp	.+32     	; 0x394c <vfprintf+0x338>
    392c:	a0 fe       	sbrs	r10, 0
    392e:	06 c0       	rjmp	.+12     	; 0x393c <vfprintf+0x328>
    3930:	b2 14       	cp	r11, r2
    3932:	80 f4       	brcc	.+32     	; 0x3954 <vfprintf+0x340>
    3934:	28 0c       	add	r2, r8
    3936:	92 2c       	mov	r9, r2
    3938:	9b 18       	sub	r9, r11
    393a:	0d c0       	rjmp	.+26     	; 0x3956 <vfprintf+0x342>
    393c:	b2 14       	cp	r11, r2
    393e:	58 f4       	brcc	.+22     	; 0x3956 <vfprintf+0x342>
    3940:	b6 01       	movw	r22, r12
    3942:	80 e2       	ldi	r24, 0x20	; 32
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	73 d0       	rcall	.+230    	; 0x3a2e <fputc>
    3948:	b3 94       	inc	r11
    394a:	f8 cf       	rjmp	.-16     	; 0x393c <vfprintf+0x328>
    394c:	b2 14       	cp	r11, r2
    394e:	18 f4       	brcc	.+6      	; 0x3956 <vfprintf+0x342>
    3950:	2b 18       	sub	r2, r11
    3952:	02 c0       	rjmp	.+4      	; 0x3958 <vfprintf+0x344>
    3954:	98 2c       	mov	r9, r8
    3956:	21 2c       	mov	r2, r1
    3958:	a4 fe       	sbrs	r10, 4
    395a:	0f c0       	rjmp	.+30     	; 0x397a <vfprintf+0x366>
    395c:	b6 01       	movw	r22, r12
    395e:	80 e3       	ldi	r24, 0x30	; 48
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	65 d0       	rcall	.+202    	; 0x3a2e <fputc>
    3964:	a2 fe       	sbrs	r10, 2
    3966:	16 c0       	rjmp	.+44     	; 0x3994 <vfprintf+0x380>
    3968:	a1 fc       	sbrc	r10, 1
    396a:	03 c0       	rjmp	.+6      	; 0x3972 <vfprintf+0x35e>
    396c:	88 e7       	ldi	r24, 0x78	; 120
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	02 c0       	rjmp	.+4      	; 0x3976 <vfprintf+0x362>
    3972:	88 e5       	ldi	r24, 0x58	; 88
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	b6 01       	movw	r22, r12
    3978:	0c c0       	rjmp	.+24     	; 0x3992 <vfprintf+0x37e>
    397a:	8a 2d       	mov	r24, r10
    397c:	86 78       	andi	r24, 0x86	; 134
    397e:	51 f0       	breq	.+20     	; 0x3994 <vfprintf+0x380>
    3980:	a1 fe       	sbrs	r10, 1
    3982:	02 c0       	rjmp	.+4      	; 0x3988 <vfprintf+0x374>
    3984:	8b e2       	ldi	r24, 0x2B	; 43
    3986:	01 c0       	rjmp	.+2      	; 0x398a <vfprintf+0x376>
    3988:	80 e2       	ldi	r24, 0x20	; 32
    398a:	a7 fc       	sbrc	r10, 7
    398c:	8d e2       	ldi	r24, 0x2D	; 45
    398e:	b6 01       	movw	r22, r12
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	4d d0       	rcall	.+154    	; 0x3a2e <fputc>
    3994:	89 14       	cp	r8, r9
    3996:	30 f4       	brcc	.+12     	; 0x39a4 <vfprintf+0x390>
    3998:	b6 01       	movw	r22, r12
    399a:	80 e3       	ldi	r24, 0x30	; 48
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	47 d0       	rcall	.+142    	; 0x3a2e <fputc>
    39a0:	9a 94       	dec	r9
    39a2:	f8 cf       	rjmp	.-16     	; 0x3994 <vfprintf+0x380>
    39a4:	8a 94       	dec	r8
    39a6:	f3 01       	movw	r30, r6
    39a8:	e8 0d       	add	r30, r8
    39aa:	f1 1d       	adc	r31, r1
    39ac:	80 81       	ld	r24, Z
    39ae:	b6 01       	movw	r22, r12
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	3d d0       	rcall	.+122    	; 0x3a2e <fputc>
    39b4:	81 10       	cpse	r8, r1
    39b6:	f6 cf       	rjmp	.-20     	; 0x39a4 <vfprintf+0x390>
    39b8:	22 20       	and	r2, r2
    39ba:	09 f4       	brne	.+2      	; 0x39be <vfprintf+0x3aa>
    39bc:	4e ce       	rjmp	.-868    	; 0x365a <vfprintf+0x46>
    39be:	b6 01       	movw	r22, r12
    39c0:	80 e2       	ldi	r24, 0x20	; 32
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	34 d0       	rcall	.+104    	; 0x3a2e <fputc>
    39c6:	2a 94       	dec	r2
    39c8:	f7 cf       	rjmp	.-18     	; 0x39b8 <vfprintf+0x3a4>
    39ca:	f6 01       	movw	r30, r12
    39cc:	86 81       	ldd	r24, Z+6	; 0x06
    39ce:	97 81       	ldd	r25, Z+7	; 0x07
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <vfprintf+0x3c2>
    39d2:	8f ef       	ldi	r24, 0xFF	; 255
    39d4:	9f ef       	ldi	r25, 0xFF	; 255
    39d6:	2b 96       	adiw	r28, 0x0b	; 11
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	df 91       	pop	r29
    39de:	cf 91       	pop	r28
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	ff 90       	pop	r15
    39e6:	ef 90       	pop	r14
    39e8:	df 90       	pop	r13
    39ea:	cf 90       	pop	r12
    39ec:	bf 90       	pop	r11
    39ee:	af 90       	pop	r10
    39f0:	9f 90       	pop	r9
    39f2:	8f 90       	pop	r8
    39f4:	7f 90       	pop	r7
    39f6:	6f 90       	pop	r6
    39f8:	5f 90       	pop	r5
    39fa:	4f 90       	pop	r4
    39fc:	3f 90       	pop	r3
    39fe:	2f 90       	pop	r2
    3a00:	08 95       	ret

00003a02 <strnlen_P>:
    3a02:	fc 01       	movw	r30, r24
    3a04:	05 90       	lpm	r0, Z+
    3a06:	61 50       	subi	r22, 0x01	; 1
    3a08:	70 40       	sbci	r23, 0x00	; 0
    3a0a:	01 10       	cpse	r0, r1
    3a0c:	d8 f7       	brcc	.-10     	; 0x3a04 <strnlen_P+0x2>
    3a0e:	80 95       	com	r24
    3a10:	90 95       	com	r25
    3a12:	8e 0f       	add	r24, r30
    3a14:	9f 1f       	adc	r25, r31
    3a16:	08 95       	ret

00003a18 <strnlen>:
    3a18:	fc 01       	movw	r30, r24
    3a1a:	61 50       	subi	r22, 0x01	; 1
    3a1c:	70 40       	sbci	r23, 0x00	; 0
    3a1e:	01 90       	ld	r0, Z+
    3a20:	01 10       	cpse	r0, r1
    3a22:	d8 f7       	brcc	.-10     	; 0x3a1a <strnlen+0x2>
    3a24:	80 95       	com	r24
    3a26:	90 95       	com	r25
    3a28:	8e 0f       	add	r24, r30
    3a2a:	9f 1f       	adc	r25, r31
    3a2c:	08 95       	ret

00003a2e <fputc>:
    3a2e:	0f 93       	push	r16
    3a30:	1f 93       	push	r17
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	fb 01       	movw	r30, r22
    3a38:	23 81       	ldd	r18, Z+3	; 0x03
    3a3a:	21 fd       	sbrc	r18, 1
    3a3c:	03 c0       	rjmp	.+6      	; 0x3a44 <fputc+0x16>
    3a3e:	8f ef       	ldi	r24, 0xFF	; 255
    3a40:	9f ef       	ldi	r25, 0xFF	; 255
    3a42:	2c c0       	rjmp	.+88     	; 0x3a9c <fputc+0x6e>
    3a44:	22 ff       	sbrs	r18, 2
    3a46:	16 c0       	rjmp	.+44     	; 0x3a74 <fputc+0x46>
    3a48:	46 81       	ldd	r20, Z+6	; 0x06
    3a4a:	57 81       	ldd	r21, Z+7	; 0x07
    3a4c:	24 81       	ldd	r18, Z+4	; 0x04
    3a4e:	35 81       	ldd	r19, Z+5	; 0x05
    3a50:	42 17       	cp	r20, r18
    3a52:	53 07       	cpc	r21, r19
    3a54:	44 f4       	brge	.+16     	; 0x3a66 <fputc+0x38>
    3a56:	a0 81       	ld	r26, Z
    3a58:	b1 81       	ldd	r27, Z+1	; 0x01
    3a5a:	9d 01       	movw	r18, r26
    3a5c:	2f 5f       	subi	r18, 0xFF	; 255
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a60:	20 83       	st	Z, r18
    3a62:	31 83       	std	Z+1, r19	; 0x01
    3a64:	8c 93       	st	X, r24
    3a66:	26 81       	ldd	r18, Z+6	; 0x06
    3a68:	37 81       	ldd	r19, Z+7	; 0x07
    3a6a:	2f 5f       	subi	r18, 0xFF	; 255
    3a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6e:	26 83       	std	Z+6, r18	; 0x06
    3a70:	37 83       	std	Z+7, r19	; 0x07
    3a72:	14 c0       	rjmp	.+40     	; 0x3a9c <fputc+0x6e>
    3a74:	8b 01       	movw	r16, r22
    3a76:	ec 01       	movw	r28, r24
    3a78:	fb 01       	movw	r30, r22
    3a7a:	00 84       	ldd	r0, Z+8	; 0x08
    3a7c:	f1 85       	ldd	r31, Z+9	; 0x09
    3a7e:	e0 2d       	mov	r30, r0
    3a80:	19 95       	eicall
    3a82:	89 2b       	or	r24, r25
    3a84:	e1 f6       	brne	.-72     	; 0x3a3e <fputc+0x10>
    3a86:	d8 01       	movw	r26, r16
    3a88:	16 96       	adiw	r26, 0x06	; 6
    3a8a:	8d 91       	ld	r24, X+
    3a8c:	9c 91       	ld	r25, X
    3a8e:	17 97       	sbiw	r26, 0x07	; 7
    3a90:	01 96       	adiw	r24, 0x01	; 1
    3a92:	16 96       	adiw	r26, 0x06	; 6
    3a94:	8d 93       	st	X+, r24
    3a96:	9c 93       	st	X, r25
    3a98:	17 97       	sbiw	r26, 0x07	; 7
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	1f 91       	pop	r17
    3aa2:	0f 91       	pop	r16
    3aa4:	08 95       	ret

00003aa6 <__ultoa_invert>:
    3aa6:	fa 01       	movw	r30, r20
    3aa8:	aa 27       	eor	r26, r26
    3aaa:	28 30       	cpi	r18, 0x08	; 8
    3aac:	51 f1       	breq	.+84     	; 0x3b02 <__ultoa_invert+0x5c>
    3aae:	20 31       	cpi	r18, 0x10	; 16
    3ab0:	81 f1       	breq	.+96     	; 0x3b12 <__ultoa_invert+0x6c>
    3ab2:	e8 94       	clt
    3ab4:	6f 93       	push	r22
    3ab6:	6e 7f       	andi	r22, 0xFE	; 254
    3ab8:	6e 5f       	subi	r22, 0xFE	; 254
    3aba:	7f 4f       	sbci	r23, 0xFF	; 255
    3abc:	8f 4f       	sbci	r24, 0xFF	; 255
    3abe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac0:	af 4f       	sbci	r26, 0xFF	; 255
    3ac2:	b1 e0       	ldi	r27, 0x01	; 1
    3ac4:	3e d0       	rcall	.+124    	; 0x3b42 <__ultoa_invert+0x9c>
    3ac6:	b4 e0       	ldi	r27, 0x04	; 4
    3ac8:	3c d0       	rcall	.+120    	; 0x3b42 <__ultoa_invert+0x9c>
    3aca:	67 0f       	add	r22, r23
    3acc:	78 1f       	adc	r23, r24
    3ace:	89 1f       	adc	r24, r25
    3ad0:	9a 1f       	adc	r25, r26
    3ad2:	a1 1d       	adc	r26, r1
    3ad4:	68 0f       	add	r22, r24
    3ad6:	79 1f       	adc	r23, r25
    3ad8:	8a 1f       	adc	r24, r26
    3ada:	91 1d       	adc	r25, r1
    3adc:	a1 1d       	adc	r26, r1
    3ade:	6a 0f       	add	r22, r26
    3ae0:	71 1d       	adc	r23, r1
    3ae2:	81 1d       	adc	r24, r1
    3ae4:	91 1d       	adc	r25, r1
    3ae6:	a1 1d       	adc	r26, r1
    3ae8:	20 d0       	rcall	.+64     	; 0x3b2a <__ultoa_invert+0x84>
    3aea:	09 f4       	brne	.+2      	; 0x3aee <__ultoa_invert+0x48>
    3aec:	68 94       	set
    3aee:	3f 91       	pop	r19
    3af0:	2a e0       	ldi	r18, 0x0A	; 10
    3af2:	26 9f       	mul	r18, r22
    3af4:	11 24       	eor	r1, r1
    3af6:	30 19       	sub	r19, r0
    3af8:	30 5d       	subi	r19, 0xD0	; 208
    3afa:	31 93       	st	Z+, r19
    3afc:	de f6       	brtc	.-74     	; 0x3ab4 <__ultoa_invert+0xe>
    3afe:	cf 01       	movw	r24, r30
    3b00:	08 95       	ret
    3b02:	46 2f       	mov	r20, r22
    3b04:	47 70       	andi	r20, 0x07	; 7
    3b06:	40 5d       	subi	r20, 0xD0	; 208
    3b08:	41 93       	st	Z+, r20
    3b0a:	b3 e0       	ldi	r27, 0x03	; 3
    3b0c:	0f d0       	rcall	.+30     	; 0x3b2c <__ultoa_invert+0x86>
    3b0e:	c9 f7       	brne	.-14     	; 0x3b02 <__ultoa_invert+0x5c>
    3b10:	f6 cf       	rjmp	.-20     	; 0x3afe <__ultoa_invert+0x58>
    3b12:	46 2f       	mov	r20, r22
    3b14:	4f 70       	andi	r20, 0x0F	; 15
    3b16:	40 5d       	subi	r20, 0xD0	; 208
    3b18:	4a 33       	cpi	r20, 0x3A	; 58
    3b1a:	18 f0       	brcs	.+6      	; 0x3b22 <__ultoa_invert+0x7c>
    3b1c:	49 5d       	subi	r20, 0xD9	; 217
    3b1e:	31 fd       	sbrc	r19, 1
    3b20:	40 52       	subi	r20, 0x20	; 32
    3b22:	41 93       	st	Z+, r20
    3b24:	02 d0       	rcall	.+4      	; 0x3b2a <__ultoa_invert+0x84>
    3b26:	a9 f7       	brne	.-22     	; 0x3b12 <__ultoa_invert+0x6c>
    3b28:	ea cf       	rjmp	.-44     	; 0x3afe <__ultoa_invert+0x58>
    3b2a:	b4 e0       	ldi	r27, 0x04	; 4
    3b2c:	a6 95       	lsr	r26
    3b2e:	97 95       	ror	r25
    3b30:	87 95       	ror	r24
    3b32:	77 95       	ror	r23
    3b34:	67 95       	ror	r22
    3b36:	ba 95       	dec	r27
    3b38:	c9 f7       	brne	.-14     	; 0x3b2c <__ultoa_invert+0x86>
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	61 05       	cpc	r22, r1
    3b3e:	71 05       	cpc	r23, r1
    3b40:	08 95       	ret
    3b42:	9b 01       	movw	r18, r22
    3b44:	ac 01       	movw	r20, r24
    3b46:	0a 2e       	mov	r0, r26
    3b48:	06 94       	lsr	r0
    3b4a:	57 95       	ror	r21
    3b4c:	47 95       	ror	r20
    3b4e:	37 95       	ror	r19
    3b50:	27 95       	ror	r18
    3b52:	ba 95       	dec	r27
    3b54:	c9 f7       	brne	.-14     	; 0x3b48 <__ultoa_invert+0xa2>
    3b56:	62 0f       	add	r22, r18
    3b58:	73 1f       	adc	r23, r19
    3b5a:	84 1f       	adc	r24, r20
    3b5c:	95 1f       	adc	r25, r21
    3b5e:	a0 1d       	adc	r26, r0
    3b60:	08 95       	ret

00003b62 <_exit>:
    3b62:	f8 94       	cli

00003b64 <__stop_program>:
    3b64:	ff cf       	rjmp	.-2      	; 0x3b64 <__stop_program>
